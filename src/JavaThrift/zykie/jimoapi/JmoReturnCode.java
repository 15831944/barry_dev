/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package zykie.jimoapi;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum JmoReturnCode implements org.apache.thrift.TEnum {
  FAILED(0),
  SUCCESS(1),
  MISSING_USERNAME(2),
  MISSING_PASSWORD(3),
  MISSING_DATABASE(4),
  MISSING_APIKEY(5),
  USER_NOT_DEFINED(6),
  DATABASE_NOT_DEFINED(7),
  PASSWORD_MISMATCH(8),
  INVALID_SESSION(9),
  ACCESS_DENIED(10),
  UNRECOG_DOCTYPE(11),
  SYNTAX_ERROR(12),
  QUOTA_EXCEEDED(13),
  NOT_IMPLEMENT(14),
  INVALID_DOCID(15),
  DOC_NOT_FOUND(16),
  INTERNAL_ERROR(17),
  MISSING_DOCIDS(18),
  INVALID_OBJID(19),
  MISSING_OBJIDS(20),
  INVALID_INDEX_TYPE(21),
  NOT_DELETABLE(22),
  DOC_LOCKED(23),
  DATABASE_NOT_SPECIED(24),
  TOO_MANY_TABLES(25),
  MISSING_ATTR(26),
  EMPTY_TABLE(27),
  TABLENAMEDUPLICATE(28),
  INVALID(29);

  private final int value;

  private JmoReturnCode(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static JmoReturnCode findByValue(int value) { 
    switch (value) {
      case 0:
        return FAILED;
      case 1:
        return SUCCESS;
      case 2:
        return MISSING_USERNAME;
      case 3:
        return MISSING_PASSWORD;
      case 4:
        return MISSING_DATABASE;
      case 5:
        return MISSING_APIKEY;
      case 6:
        return USER_NOT_DEFINED;
      case 7:
        return DATABASE_NOT_DEFINED;
      case 8:
        return PASSWORD_MISMATCH;
      case 9:
        return INVALID_SESSION;
      case 10:
        return ACCESS_DENIED;
      case 11:
        return UNRECOG_DOCTYPE;
      case 12:
        return SYNTAX_ERROR;
      case 13:
        return QUOTA_EXCEEDED;
      case 14:
        return NOT_IMPLEMENT;
      case 15:
        return INVALID_DOCID;
      case 16:
        return DOC_NOT_FOUND;
      case 17:
        return INTERNAL_ERROR;
      case 18:
        return MISSING_DOCIDS;
      case 19:
        return INVALID_OBJID;
      case 20:
        return MISSING_OBJIDS;
      case 21:
        return INVALID_INDEX_TYPE;
      case 22:
        return NOT_DELETABLE;
      case 23:
        return DOC_LOCKED;
      case 24:
        return DATABASE_NOT_SPECIED;
      case 25:
        return TOO_MANY_TABLES;
      case 26:
        return MISSING_ATTR;
      case 27:
        return EMPTY_TABLE;
      case 28:
        return TABLENAMEDUPLICATE;
      case 29:
        return INVALID;
      default:
        return null;
    }
  }
}
