////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2005
// Packet Engineering, Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification is not permitted unless authorized in writing by a duly
// appointed officer of Packet Engineering, Inc. or its derivatives
//
// File Name: Rslt.h
// Description:
//	This class is used to carry execution (function call) return 
//	results to the caller. There are three member data in this 
//	class:
//
//	mStatus: if true, the other two member data are ignored. The 
//		return result is considered 'true'.
//	mReader: if mStatus == false, this member data tells the OmnErrId::E.
//	mErrid:	 if mStatus == false, and an error has been generated by
//		calling OmnError::log(...), which should generate an error 
//		identifier (a code). This code is stored here.   
//
// Modification History:
// 
////////////////////////////////////////////////////////////////////////////

#ifndef Omn_Debug_Rslt_h
#define Omn_Debug_Rslt_h

#include "Debug/ErrId.h"
#include "Util/String.h"

class OmnAlarmEntry;

class OmnRslt 
{
private:
	OmnString		mFile;
	int				mLine;
	OmnErrId::E		mErrId;
	OmnString		mErrmsg;

public:
	OmnRslt(const bool f = true)
		:
	mFile("not set"),
	mLine(-1),
	mErrId(f?OmnErrId::eNoError:OmnErrId::eUnknown)
	{
	}

	OmnRslt(const OmnErrId::E errId)
		:
	mFile("not set"),
	mLine(-1),
	mErrId(errId)
	{
	}

	OmnRslt(const OmnErrId::E errid, const OmnString &errmsg)
	:
	mFile("not set"),
	mLine(-1),
	mErrId(errid),
	mErrmsg(errmsg)
	{
	}

	OmnRslt(const OmnString &file, 
			const int line,
			const OmnString &errmsg)
			:
	mFile(file),
	mLine(line),
	mErrId(OmnErrId::eGeneral),
	mErrmsg(errmsg)
	{
	}

	OmnRslt(const OmnAlarmEntry &entry);
	~OmnRslt() {}

	// 
	// Get's
	//
	OmnErrId::E	getErrId() const {return mErrId;}
	OmnString	getErrmsg() const {return mErrmsg;}

	void		setErrId(const OmnErrId::E r) {mErrId = r;}
	void		setErrmsg(const OmnString &errmsg) {mErrmsg = errmsg;}
	void		set(const char *file, const int line, const bool status, 
					const OmnString &errmsg)
	{
		mFile = file;
		mLine = line;
		mErrId = OmnErrId::eGeneral;
		mErrmsg = errmsg;
	}

	operator bool () const {return mErrId == OmnErrId::eNoError;}
	bool operator !() const {return mErrId != OmnErrId::eNoError;}

	bool operator == (const bool v)
	{
		return (v)?mErrId == OmnErrId::eNoError:mErrId != OmnErrId::eNoError;
	}

	OmnRslt & operator = (const OmnRslt &rhs)
	{
		mErrId  = rhs.mErrId;
		mErrmsg = rhs.mErrmsg;
		return *this;
	}

	OmnString toString() const 
	{
		OmnString str;
	    str	<< ". ErrId = " << mErrId
			<< ". Errmsg = " << mErrmsg;
		return str;
	}

	OmnRslt & operator << (const OmnString &errmsg)
	{
		mErrmsg << errmsg;
		return *this;
	}

	OmnRslt & operator << (const int v)
	{
		mErrmsg << v;
		return *this;
	}

	OmnRslt operator + (const OmnRslt &rhs) const
	{
		if (*this && rhs)
		{
			// 
			// Both are good. 
			// 
			OmnRslt rslt(true);
			return rslt;
		}

		if (*this && !rhs)
		{
			// 
			// This rslt is good but not 'rhs'. Return 'rhs'.
			//
			return rhs;
		}

		if (!*this && rhs)
		{
			// 
			// This rslt is not good but 'rhs' is good. Return this.
			//
			return *this;
		}

		// 
		// Both are bad. We need to append 'rhs' as a string to mErrmsg
		//
		OmnRslt rslt = *this;
		rslt.mErrmsg << "\nThe next error: " << rhs.toString();
		return rslt;
	}

	OmnRslt & operator += (const OmnRslt &rhs)
	{
		if (rhs)
		{
			// 
			// 'rhs' is good. Do nothing.
			//
			return *this;
		}

		// 
		// 'rhs' is not good. If this is good, take 'rhs'
		//
		if (*this)
		{
			*this = rhs;
			return *this;
		}

		// 
		// Both are bad. Append 'rhs' as a string to mErrmsg
		//
		mErrmsg << "\nThe next error: " << rhs.toString();
		return *this;
	}

};
#endif

