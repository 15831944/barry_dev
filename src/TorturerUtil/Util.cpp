////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2005
// Packet Engineering, Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification is not permitted unless authorized in writing by a duly
// appointed officer of Packet Engineering, Inc. or its derivatives
//
// Description:
//
// Modification History:
// 04/07/2007: Created by Chen Ding
//
////////////////////////////////////////////////////////////////////////////
#include "TorturerUtil/Util.h"

#include "Alarm/Alarm.h"
#include "Debug/Debug.h"
#include "ProgramAid/Util.h"
#include "Util/File.h"

static OmnString sgSourceFileHeader = 
"//////////////////////////////////////////////////////////////////////////\n"
"//\n"
"// Copyright (C) 2005\n"
"// Packet Engineering, Inc. All rights reserved.\n"
"//\n"
"// Redistribution and use in source and binary forms, with or without\n"
"// modification is not permitted unless authorized in writing by a duly\n"
"// appointed officer of Packet Engineering, Inc. or its derivatives\n"
"//\n"
"// Description:\n"
"// This file is automatically generated by the TorturerGen facility. \n"
"//\n"
"// Modification History:\n";

OmnString aos_get_file_declaimer()
{
	OmnString str = sgSourceFileHeader;
	str << "// " << OmnGetMDY() << " Created by TorturerGen Facility\n";
	str << "//////////////////////////////////////////////////////////////////////////\n";
	return str;
}


OmnString aos_get_header_guard(const OmnString &srcDirName, 
			const OmnString &testDirName, 
			const OmnString &className)
{
	OmnString name = "Aos_";
	name << srcDirName << "_" << testDirName << "_" << className << "_h\n";
	OmnString str = "#ifndef ";
	str << name << "#define " << name << "\n";
	return str;
}


static OmnString sgCreationDate = "<$$CreationDate>";
static OmnString sgTargetName = "<$$TargetName>";
static OmnString sgTestSuiteName = "<$$TestSuiteName>";
static OmnString sgTestSuiteHeader = "<$$TestSuiteHeaderFile>";
static OmnString sgDots = "<$$DOTS>";



bool
AosTorturerUtil::createMakefile(const OmnString &srcDir, 
							   const OmnString &testDir,
							   const OmnString &targetName,
							   const bool force, 
							   const AosMakefileType type)
{
	OmnString dirname = srcDir;
	if (testDir != "")
	{
		dirname << "/" << testDir;
	}

	// 
	// Calculate the dots
	//
	OmnString dots = "..";
	const char *data = dirname.data();
	for (int i=0; i<dirname.length(); i++)
	{
		if (data[i] == '/') dots << "/..";
	}

	OmnString homedir = AosProgramAid_getAosHomeDir();
	OmnString filename = homedir;
	filename << "/src/" << dirname << "/Makefile";

	if (!force && OmnFile::fileExist(filename))
	{
		// 
		// The file is there. Do nothing.
		//
		return true;
	}

	// 
	// Copy the Makefile template to the new location
	//
	if (homedir == "")
	{
		OmnAlarm << "AOS_HOME environment variable not set. "
			<< "This environment variable should point to AOS src directory!"
			<< enderr;
		return false;
	}

	OmnString cmd = "cp -f ";
	OmnString makefileName;
	switch (type)
	{
	case eAosMakefileType_Exe:
		 makefileName = "MakefileForExe";
		 break;
	
	case eAosMakefileType_Lib:
		 makefileName = "MakefileForLib";
		 break;

	case eAosMakefileType_ExeWithCli:
	     makefileName = "Makefile_with_cli";
		 break;

	default:
	     OmnAlarm << "Invalid makefile type: " << type << enderr;
		 return false;
	}

	cmd << homedir << "/Data/ProgramGen/" << makefileName << " " << filename;

	// OmnTrace << "To run command: " << cmd << endl;
	system(cmd.data());

	// 
	// Open the Makefile template
	//
	OmnFile file(filename, OmnFile::eReadOnly);
	if (!file.isGood())
	{
		OmnAlarm << "Failed to open the Makefile template: " 
			<< filename << enderr;
		return false;
	}

	OmnString exename = targetName;
	bool ret = file.replace(sgCreationDate, OmnGetMDY(), false);
	if (!ret)
	{
		OmnAlarm << "Failed to replace date" << enderr;
		return false;
	}

	if (!(ret = file.replace(sgTargetName, exename, false)))
	{
		OmnAlarm << "Failed to replace TargetName: " 
			<< filename << ":" << sgTargetName << ":" << exename << enderr;
		return false;
	}

	if (!(ret = file.replace(sgDots, dots, true)))
	{
		OmnAlarm << "Failed to replace dots" << enderr;
		return false;
	}

	file.flushFileContents();
	return true;
}


bool
AosTorturerUtil::createMain(const OmnString &srcDir, 
						   const OmnString &testDir,
						   const OmnString &targetName,
						   const AosCodeGenMainType type,
						   const bool force)
{
	OmnString homedir = AosProgramAid_getAosHomeDir();
	OmnString dirname = homedir;
	dirname << "/src/" << srcDir;
	if (testDir != "")
	{
		dirname << "/" << testDir;
	}

	OmnString mainName = homedir;
	switch (type)
	{
	case eAosCodeGenMainType_Normal:
		 mainName << "/Data/ProgramGen/main_normal";
		 break;

	case eAosCodeGenMainType_Normal_with_Cli:
		 mainName << "/Data/ProgramGen/main_with_cli";
		 break;

	case eAosCodeGenMainType_ApiTorturer:
		 mainName << "/Data/ProgramGen/main_api_torturer";
		 break;

	default:
		 OmnAlarm << "Unrecognized main type: " << type << enderr;
		 return false;
	}

	OmnString filename = dirname;
	filename << "/main.cpp";
	if (!force && OmnFile::fileExist(filename))
	{
		// 
		// The file is there. Do nothing.
		//
		return true;
	}

	if (!OmnFile::fileExist(mainName))
	{
		cout << "The main.cpp template file does not exist. You need "
			 << "check the file out by going to \"Data/torturerGen\""
			 << " sub-directory and running the cvs command "
			 << "\"cvs update\"" << endl;
		return false;
	}

	OmnString cmd = "cp -f ";
	cmd << mainName << " " << filename;
	// OmnTrace << "To run command: " << cmd << endl;
	system(cmd.data());

	// 
	// Open the main.cpp template
	//
	OmnFile file(filename, OmnFile::eReadOnly);
	if (!file.isGood())
	{
		OmnAlarm << "Failed to open the main template: " 
			<< filename << enderr;
		return false;
	}

	OmnString className = "Aos";
	className << targetName << "TestSuite";
	OmnString headerFile = dirname;
	headerFile << "/TestSuite.h";

	bool ret = file.replace(sgCreationDate, OmnGetMDY(), false);
	switch (type)
	{
	case eAosCodeGenMainType_Normal:
	case eAosCodeGenMainType_Normal_with_Cli:
		 ret = ret && file.replace(sgTestSuiteName, className, false) &&
		   	   file.replace(sgTestSuiteHeader, headerFile, false);
		 break;

	case eAosCodeGenMainType_ApiTorturer:
	     ret = ret && file.replace(sgTargetName, targetName, false);
		 break;

	default:
		 OmnAlarm << "Unrecognized main type: " << type << enderr;
		 return false;
	}

	if (!ret)
	{
		OmnAlarm << "Failed to create main.cpp" << enderr;
		return false;
	}

	file.flushFileContents();
	return true;
}


bool
AosTorturerUtil::createTestSuite(const OmnString &dirname, 
									const OmnString &srcdir, 
									const OmnString &testerDirname, 
									const OmnString &torturerName, 
									const OmnString &torturerDesc, 
									const OmnString &includes, 
									const OmnString &testers, 
									const bool force)
{
	bool ret = createTestSuiteCpp(dirname, srcdir, testerDirname, 
							torturerName, torturerDesc, includes, 
							testers, force) &&
					  createTestSuiteHeader(dirname, torturerName, 
					  		srcdir, testerDirname, force);
	return ret;
}


bool
AosTorturerUtil::createTestSuiteCpp(const OmnString &dirname, 
									const OmnString &srcdir, 
									const OmnString &testerDirname, 
									const OmnString &torturerName, 
									const OmnString &torturerDesc, 
									const OmnString &includes, 
									const OmnString &testers, 
									const bool force)
{
	OmnString filename = dirname;
    filename <<	"/TestSuite.cpp";
	if (!force && OmnFile::fileExist(filename))
	{
		// 
		// The file is there. Do nothing.
		//
		return true;
	}

	OmnFile file(filename, OmnFile::eCreate);
	file << aos_get_file_declaimer();
	file << "// " << OmnGetMDY() << " Created by TorturerGen Facility\n";
	file << "//////////////////////////////////////////////////////////////////////////\n";
	file << "#include \"" << srcdir
		 << "/" << testerDirname 
		 << "/TestSuite.h\"\n\n";
	file << "#include \"Tester/TestSuite.h\"\n";
	file << "#include \"Tester/TestMgr.h\"\n";
	file << "#include \"Util/OmnNew.h\"\n";
	file << "#include \"Util/GenTable.h\"\n";

	// 
	// Add the include files for all the testers.
	//
	file << includes;

	OmnString className = "Aos";
	className << torturerName << "TestSuite";

	// 
	// The default constructor
	//
	file << "\n\n";
	file << "//\n"
		 << "// Default constructor.\n"
		 << "// Code automatically generated by TorturerGen\n"
		 << "//\n"
		 << className << "::" << className << "()\n"
		 << "{\n"
		 << "}\n";

	// 
	// The destructor
	//
	file << "\n\n";
	file << "//\n"
		 << "// Destructor.\n"
		 << "// Code automatically generated by TorturerGen\n"
		 << "//\n"
		 << className << "::~" << className << "()\n"
		 << "{\n"
		 << "}\n";

	// 
	// The getSuite() member function
	//
	file << "\n\n";
	file << "//\n"
		 << "// Code automatically generated by TorturerGen\n"
		 << "//\n";
	file << "OmnTestSuitePtr\n";
	file << className << "::getSuite()\n";
	file << "{\n";
	file << "    OmnTestSuitePtr suite = OmnNew OmnTestSuite(\""
		 << torturerName << "TestSuite\", \""
		 << torturerDesc << "\");";
	file << "\n";

	// 
	// Adding all the testers
	//
	file << "    // \n"
		 << "    // Add all the testers\n"
		 << "    // \n";
	
	file << testers;

	file << "\n";
	file << "    return suite;\n";
	file << "}\n";
	file << "\n";

	file.closeFile();

	return true;
}


bool
AosTorturerUtil::createTestSuiteHeader(const OmnString &dirname, 
									  const OmnString &torturerName,
									  const OmnString &srcdir,
									  const OmnString &testerDir,
									  const bool force)
{
	OmnString filename = dirname;
    filename << "/TestSuite.h";
	if (!force && OmnFile::fileExist(filename))
	{
		// 
		// The file is there. Do nothing.
		//
		return true;
	}

	OmnString className = "Aos";
	className << torturerName << "TestSuite";

	OmnFile file(filename, OmnFile::eCreate);
	file << aos_get_file_declaimer();
	file << "// " << OmnGetMDY() << " Created by TorturerGen Facility\n";
	file << "//////////////////////////////////////////////////////////////////////////\n";
	file << "#ifndef Aos_"
		 << srcdir << "_"
		 << testerDir << "_TestSuite_h\n";
	file << "#define Aos_"
		 << srcdir << "_"
		 << testerDir << "_TestSuite_h\n";
	file << "\n";
	file << "#include \"Tester/Ptrs.h\"\n"
	 	 << "#include \"Tester/TestPkg.h\"\n"
	 	 << "#include \"Util/String.h\"\n"
		 << "\n\n";
	file << "class " << className << "\n"
	     << "{\n"
		 << "private:\n"
		 << "    OmnTestSuitePtr     mSuite;\n"
		 << "\n"
		 << "public:\n"
		 << "    " << className << "();\n"
		 << "    ~" << className << "();\n"
		 << "\n"
		 << "    static OmnTestSuitePtr      getSuite();\n"
		 << "};\n"
		 << "#endif"
		 << "\n";

	file.closeFile();
	return true;
}

