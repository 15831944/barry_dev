#!/usr/bin/python
import xml.dom.minidom
import sys
import string

xmlPath = "API.xml"
xmlDoc = xml.dom.minidom.parse(xmlPath)
'''
get the module name
'''
module_name = xmlDoc.getElementsByTagName("module")
print module_name
'''
parse api section
'''
allLines_cpp = "/*\n * generated by genAPI.py\n * author: bill xia<xw_cn@163.com>\n */\n#include \"common.h\"\n#include \"aos/aosReturnCode.h\"\n#include \"" + module_name[0].firstChild.data + ".h\"\n#define MAX_BUFF_LEN 10240\n"

allLines_h = "#ifndef AOS_API_" + string.upper(module_name[0].firstChild.data) + "_H\n#define AOS_API_" + string.upper(module_name[0].firstChild.data)+ "_H\n/*\n * generated by genAPI.py\n * author: bill xia<xw_cn@163.com>\n */\n"

apis = xmlDoc.getElementsByTagName("api");

dstPath_cpp = module_name[0].firstChild.data + ".cpp"
dstPath_h = "../include/" + module_name[0].firstChild.data + ".h"

f_cpp = open(dstPath_cpp, "w")
f_h = open(dstPath_h, "w")

for api in apis:
    line_cpp = ""
    line_h = ""
    
    api_name = api.childNodes[1]
    des = api.getElementsByTagName("description")
    
    prefix_cpp = "/*\n * " + des[0].firstChild.data + "\n */"
    prefix_cpp = prefix_cpp + "\nint " + api_name.firstChild.data + '('
    
    prefix_h = "/*\n * " + des[0].firstChild.data + "\n */"
    prefix_h = prefix_h + "\nextern int " + api_name.firstChild.data + '('

    protype = api.childNodes[3];
    
    params = protype.getElementsByTagName("param")
    type_names = []
    var_names = []
    counter = 0
    cmd = ""
    '''
    the prefix of command
    '''
    cmd_prefix = api.childNodes[5].firstChild.data;
    print cmd_prefix

    for param in params:
        var_name = "" 
    	type_name = ""
        if param.getElementsByTagName("type"):
            type_name = param.childNodes[1].firstChild.data
        else:
            continue
        
    	if param.getElementsByTagName("var"):
            var_name = param.childNodes[3].firstChild.data
        else:
            continue
        
    	if type_name == "outdata":
            if counter == 0:
                line_cpp = line_cpp + "char* result, int* resultlen"
                line_h = line_h + "char*, int*" 
            else:
                line_cpp = line_cpp + ", "  + "char* result, int* resultlen"
                line_h = line_h + ", "  + "char*, int*"
        else:    
            if counter == 0:
                line_cpp = line_cpp + type_name + " " + var_name
                line_h = line_h + type_name 
            else:
                line_cpp = line_cpp + ", "  + type_name + " " + var_name
                line_h = line_h + ", "  + type_name
        
    	type_names.append(type_name)
    	var_names.append(var_name)
    	counter = counter + 1
    	
    allLines_h = allLines_h + prefix_h + line_h + ");\n"

    has_outdata = 0
    for type_name in type_names:
        if type_name == "outdata":
            has_outdata = has_outdata + 1
    	    
    allLines_cpp = allLines_cpp + prefix_cpp + line_cpp + ")\n{\n"
    if has_outdata > 0:
        allLines_cpp = allLines_cpp + "\tOmnString rslt = \"\";\n\tchar* tmp;\n\tchar cmd[MAX_BUFF_LEN];\n\tint len;\n\n"
    else:
        allLines_cpp = allLines_cpp + "\tOmnString rslt = \"\";\n\tchar* tmp;\n\tchar cmd[MAX_BUFF_LEN];\n\n"
    cmd = "\tsprintf(cmd, \"" + cmd_prefix + " "

    has_outdata = 0
    for type_name in type_names:
    	if type_name == "int":
    	    cmd = cmd + " %d "
    	elif type_name == "outdata":
            has_outdata = has_outdata + 1
            continue
    	else:
    	    cmd = cmd + " %s "
    cmd = cmd + "\""
    counter = 0
    for var_name in var_names:
        if type_names[counter] == "outdata":
            continue
        else:
            cmd = cmd + ", " + var_name
        counter = counter + 1
    
    cmd = cmd + ");\n\n"
    
    allLines_cpp = allLines_cpp + cmd
    if has_outdata > 0:
        allLines_cpp = allLines_cpp + "\tOmnCliProc::getSelf()->runCliAsClient(cmd, rslt);\n"
        allLines_cpp = allLines_cpp + "\tlen = strlen(rslt);\n\tif (len > *resultlen)\n"
        allLines_cpp = allLines_cpp +"\t{\n\t\tstrncpy(result, rslt, *resultlen);\n\t\treturn eAosRc_LenTooShort;\n\t}\n\telse\n\t{\n\t\tstrcpy(result, rslt);\n\t\t*resultlen = len;}\n"
        allLines_cpp = allLines_cpp + "\ttmp = rslt.getBuffer();\n\ttmp += rslt.find(0, false) + 1;\n\n\treturn *((int*)tmp);\n"
    else:
        allLines_cpp = allLines_cpp + "\tOmnCliProc::getSelf()->runCliAsClient(cmd, rslt);\n\ttmp = rslt.getBuffer();\n\ttmp += rslt.find(0, false) + 1;\n\n\treturn *((int*)tmp);\n"

    allLines_cpp = allLines_cpp + "}\n\n"
    	
allLines_h = allLines_h + "\n#endif\n"
f_h.write(allLines_h)
f_cpp.write(allLines_cpp)
f_cpp.close()
f_h.close()        
