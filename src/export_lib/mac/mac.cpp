/*
 * generated by genAPI.py
 * author: bill xia<xw_cn@163.com>
 */
#include "common.h"
#include "aos/aosReturnCode.h"
#include "mac.h"
#define MAX_BUFF_LEN 10240
/*
 * clone device mac
 */
int aos_mac_set(char* interface, char* mac)
{
	OmnString rslt = "";
	char* tmp;
	char cmd[MAX_BUFF_LEN];

	sprintf(cmd, "mac set  %s  %s ", interface, mac);

	OmnCliProc::getSelf()->runCliAsClient(cmd, rslt);
	tmp = rslt.getBuffer();
	tmp += rslt.find(0, false) + 1;

	return *((int*)tmp);
}

/*
 *  restores an interface's MAC address.
 */
int aos_mac_restore(char* interface)
{
	OmnString rslt = "";
	char* tmp;
	char cmd[MAX_BUFF_LEN];

	sprintf(cmd, "mac back set  %s ", interface);

	OmnCliProc::getSelf()->runCliAsClient(cmd, rslt);
	tmp = rslt.getBuffer();
	tmp += rslt.find(0, false) + 1;

	return *((int*)tmp);
}

/*
 *  get an interface's MAC address.
 */
int aos_mac_get(char* interface, char* result, int* resultlen)
{
	OmnString rslt = "";
	char* tmp;
	char cmd[MAX_BUFF_LEN];
	int len;
	sprintf(cmd, "mac get current%s ", interface);

	OmnCliProc::getSelf()->runCliAsClient(cmd, rslt);
	len = strlen(rslt);
	if (len > *resultlen)
	{
		strncpy(result, rslt, *resultlen);
		return eAosRc_LenTooShort;
	}
	else
	{
		strcpy(result, rslt);
		*resultlen = len;
	}

	tmp = rslt.getBuffer();
	tmp += rslt.find(0, false) + 1;

	return *((int*)tmp);
}

/*
 * save current mac config
 */
int aos_mac_clone_save_config()
{
	OmnString rslt = "";
	char* tmp;
	char cmd[MAX_BUFF_LEN];

	sprintf(cmd, "mac save config ");

	OmnCliProc::getSelf()->runCliAsClient(cmd, rslt);
	tmp = rslt.getBuffer();
	tmp += rslt.find(0, false) + 1;

	return *((int*)tmp);
}

/*
 * load current mac config
 */
int aos_mac_clone_load_config()
{
	OmnString rslt = "";
	char* tmp;
	char cmd[MAX_BUFF_LEN];

	sprintf(cmd, "mac load config ");

	OmnCliProc::getSelf()->runCliAsClient(cmd, rslt);
	tmp = rslt.getBuffer();
	tmp += rslt.find(0, false) + 1;

	return *((int*)tmp);
}

/*
 * show mac  config
 */
int aos_mac_clone_retrieve_config(char* result, int* resultlen)
{
	OmnString rslt = "";
	char* tmp;
	char cmd[MAX_BUFF_LEN];
	int len;

	sprintf(cmd, "mac show config ");

	OmnCliProc::getSelf()->runCliAsClient(cmd, rslt);
	len = strlen(rslt);
	if (len > *resultlen)
	{
		strncpy(result, rslt, *resultlen);
		return eAosRc_LenTooShort;
	}
	else
	{
		strcpy(result, rslt);
		*resultlen = len;
	}
	tmp = rslt.getBuffer();
	tmp += rslt.find(0, false) + 1;

	return *((int*)tmp);
}

/*
 * clear current mac config
 */
int aos_mac_clone_clear_config()
{
	OmnString rslt = "";
	char* tmp;
	char cmd[MAX_BUFF_LEN];

	sprintf(cmd, "mac clear config ");

	OmnCliProc::getSelf()->runCliAsClient(cmd, rslt);
	tmp = rslt.getBuffer();
	tmp += rslt.find(0, false) + 1;

	return *((int*)tmp);
}

