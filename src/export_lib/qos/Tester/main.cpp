/*generated by gencode.py
 *author: bill xia
 */

#include <stdio.h>
#include "common.h"

#include "qosapi.h"
int main()
{
    char result[10240];
    int ret = 0;
    u32 len = 10240;
    int total_case = 0;
    int fail_case = 0;

    ret = aos_qos_enable(1);
    if (ret != 0) {
        printf("caseId:1	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_enable(1);
    if (ret != -eAosRc_FailedToEnable) {
        printf("caseId:2	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_enable(0);
    if (ret != 0) {
        printf("caseId:3	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_enable(0);
    if (ret != -eAosRc_FailedToDisable) {
        printf("caseId:4	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_generalrule("172.22.0.1", 80, "172.22.0.3", 8090, "tcp", 0);
    if (ret != 0) {
        printf("caseId:5	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_generalrule("172.22.0.1", 80, "172.22.0.13", 8090, "tcp", 0);
    if (ret != 0) {
        printf("caseId:5	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_generalrule("172.22.0.311", 80, "172.22.0.3", 8090, "tcp", 0);
    if (ret != -eAosRc_InvalidIPAddress) {
        printf("caseId:6	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_generalrule("172.22.0.11", 80, "172.22.0.3", 8090, "TCP", 0);
    if (ret != -eAosRc_InvalidProtocol) {
        printf("caseId:7	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_generalrule("172.22.0.11", 80, "172.22.0.3", 8090, "tcp", 3);
    if (ret != -eAosRc_InvalidPriority) {
        printf("caseId:8	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_generalrule("172.22.0.1", 80, "172.22.0.13", 8090, "tcp");
    if (ret != 0) {
        printf("caseId:10	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_generalrule("172.22.0.1341", 80, "172.22.0.13", 8090, "tcp");
    if (ret != -eAosRc_InvalidIPAddress) {
        printf("caseId:12	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_generalrule("172.22.0.131", 80, "172.22.0.13", 8090, "TCP");
    if (ret != -eAosRc_InvalidProtocol) {
        printf("caseId:13	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_generalrule(result, &len);
    if (ret != 0) {
        printf("caseId:14	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_clear_generalrule();
    if (ret != 0) {
        printf("caseId:16	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_macrule("12:23:23:43:24:23", 2);
    if (ret != 0) {
        printf("caseId:17	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_macrule("11:23:23:43:24:23", 2);
    if (ret != 0) {
        printf("caseId:17	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_macrule("12xd:23:23:43:24:23", 2);
    if (ret != -eAosRc_InvalidMACAddress) {
        printf("caseId:18	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_macrule("12:23:23:43:24:23", 4);
    if (ret != -eAosRc_InvalidPriority) {
        printf("caseId:19	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_macrule("11:23:23:43:24:23");
    if (ret != 0) {
        printf("caseId:21	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_macrule("11x:23:23:43:24:23");
    if (ret != -eAosRc_InvalidMACAddress) {
        printf("caseId:22	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

	len = 10240;


    ret = aos_qos_retrieve_macrule(result, &len);
    if (ret != 0) {
        printf("caseId:24	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_clear_macrule();
    if (ret != 0) {
        printf("caseId:25	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_vlanrule(128, 1);
    if (ret != 0) {
        printf("caseId:26	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_vlanrule(65530, 1);
    if (ret != -eAosRc_InvalidVLANTag) {
        printf("caseId:27	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_vlanrule(128, 4);
    if (ret != -eAosRc_InvalidPriority) {
        printf("caseId:28	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_vlanrule(129, 1);
    if (ret != 0) {
        printf("caseId:30	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_vlanrule(129);
    if (ret != 0) {
        printf("caseId:31	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_vlanrule(65530);
    if (ret != -eAosRc_InvalidVLANTag) {
        printf("caseId:32	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_vlanrule(result, &len);
    if (ret != 0) {
        printf("caseId:34	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_clear_vlanrule();
    if (ret != 0) {
        printf("caseId:35	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_portrule("ftp", "eth0", 80,  1);
    if (ret != 0) {
        printf("caseId:36	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_portrule("ftp", "eth0", 80,  5);
    if (ret != -eAosRc_InvalidPriority) {
        printf("caseId:38	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_portrule("ftp", "eth0", 80,  1);
    if (ret != 0) {
        printf("caseId:36	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_portrule("eth0", 8080);
    if (ret != 0) {
        printf("caseId:37	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_portrule(result, &len);
    if (ret != 0) {
        printf("caseId:39	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_clear_portrule();
    if (ret != 0) {
        printf("caseId:40	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_protocolrule("tcp", 1);
    if (ret != 0) {
        printf("caseId:41	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_protocolrule("TCP", 1);
    if (ret != -eAosRc_InvalidProtocol) {
        printf("caseId:42	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_protocolrule("tcp", 10);
    if (ret != -eAosRc_InvalidPriority) {
        printf("caseId:43	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_add_protocolrule("udp", 1);
    if (ret != 0) {
        printf("caseId:45	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_protocolrule("udp");
    if (ret != 0) {
        printf("caseId:46	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_remove_protocolrule("TCP");
    if (ret != -eAosRc_InvalidProtocol) {
        printf("caseId:47	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_protocolrule(result, &len);
    if (ret != 0) {
        printf("caseId:59	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_clear_protocolrule();
    if (ret != 0) {
        printf("caseId:60	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_channel("tcp", "172.22.0.1xs", 80, "172.22.0.3", 8080, result, &len);
    if (ret != -eAosRc_InvalidIPAddress) {
        printf("caseId:62	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_channel("TCPjsj", "172.22.0.1", 80, "172.22.0.3", 8080, result, &len);
    if (ret != -eAosRc_InvalidProtocol) {
        printf("caseId:63	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_all_channels(result, &len);
    if (ret != 0) {
        printf("caseId:64	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_channel_history("tcp", "172.22.0.1x", 80, "172.22.0.3", 8080, 10, 1, 1, result, &len);
    if (ret != -eAosRc_InvalidIPAddress) {
        printf("caseId:66	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_channel_history("TCP", "172.22.0.1", 80, "172.22.0.3", 8080, 10, 1, 1, result, &len);
    if (ret != -eAosRc_InvalidProtocol) {
        printf("caseId:67	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_interface("eth0", 0, result, &len);
    if (ret != 0) {
        printf("caseId:68	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_interface("eth8", 0, result, &len);
    if (ret != -eAosRc_DevNotFound) {
        printf("caseId:69	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_all_interface(result, &len);
    if (ret != 0) {
        printf("caseId:70	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_interface_history("eth0", 0, 10, 1, 1, result, &len);
    if (ret != 0) {
        printf("caseId:71	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_interface_history("eth9", 0, 10, 1, 1, result, &len);
    if (ret != -eAosRc_DevNotFound) {
        printf("caseId:72	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_priority("eth0", 0, result, &len);
    if (ret != 0) {
        printf("caseId:73	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_priority("eth9", 0, result, &len);
    if (ret != -eAosRc_DevNotFound) {
        printf("caseId:74	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_priority("eth0", 5, result, &len);
    if (ret != -eAosRc_InvalidPriority) {
        printf("caseId:75	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_all_priority(result, &len);
    if (ret != 0) {
        printf("caseId:76	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_priority_history("eth0", 0, 10, 1, 1, result, &len);
    if (ret != 0) {
        printf("caseId:77	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_priority_history("eth9", 0, 10, 1, 1, result, &len);
    if (ret != -eAosRc_DevNotFound) {
        printf("caseId:78	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_priority_history("eth0", 7, 10, 1, 1, result, &len);
    if (ret != -eAosRc_InvalidPriority) {
        printf("caseId:79	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_max_history_interval(1000);
    if (ret != 0) {
        printf("caseId:80	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_bandwidth_control_status(1);
    if (ret != 0) {
        printf("caseId:81	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_bandwidth_control_dev("eth0", 0, 1);
    if (ret != 0) {
        printf("caseId:82	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_minimum_bandwidth(1000);
    if (ret != 0) {
        printf("caseId:83	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_rule_match_log(1);
    if (ret != 0) {
        printf("caseId:84	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_channel_log(1);
    if (ret != 0) {
        printf("caseId:85	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_config_log(1);
    if (ret != 0) {
        printf("caseId:86	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_set_statistics_status(1);
    if (ret != 0) {
        printf("caseId:87	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_retrieve_statistics(result, &len);
    if (ret != 0) {
        printf("caseId:88	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_save_config(result, &len);
    if (ret != 0) {
        printf("caseId:89	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_clear_config();
    if (ret != 0) {
        printf("caseId:90	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;


    ret = aos_qos_show_config(result, &len);
    if (ret != 0) {
        printf("caseId:91	ret = %d	Error\n", ret);
        fail_case++;
    }
    total_case++;

len = 10240;

    printf("total case: %d\n fail case:%d", total_case, fail_case);
    return 0;
}
