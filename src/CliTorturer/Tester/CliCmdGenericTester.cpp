//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2005
// Packet Engineering, Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification is not permitted unless authorized in writing by a duly
// appointed officer of Packet Engineering, Inc. or its derivatives
//
// Description:
// This file is automatically generated by the TorturerGen facility. 
//
// Modification History:
// 05/06/2007 Created by Chen Ding
//////////////////////////////////////////////////////////////////////////
#include "CliTorturer/Tester/CliCmdGenericTester.h"

#include "Torturer/Ptrs.h"
#include "Torturer/ParmStr.h"
#include "Torturer/Util.h"
#include "CliTorturer/Util.h"
#include "CliTorturer/CliCmdGeneric.h"
#include "CliTorturer/CliModuleTorturer.h"
#include "CliTorturer/CliTorturer.h"
#include "CliTorturer/Tester/TestSuite.h"
#include "Debug/Debug.h"
#include "Random/RandomInteger.h"
#include "Tester/Test.h"
#include "Tester/TestMgr.h"
#include "TorturerConds/Ptrs.h"
#include "Util/OmnNew.h"
#include "Util/GenTable.h"
#include "Util/File.h"
#include "Util/VarList.h"
#include "XmlParser/XmlItem.h"


const OmnString sgTableDef = 
"<TableDef>"
	"<MaxEntries>100</MaxEntries>"
	"<KeyFields>app_name</KeyFields>"
	"<Fields>"
		"<Field>"
			"<Type>string</Type>"
			"<Name>app_name</Name>"
		"</Field>"
	"</Fields>"
"</TableDef>";

// 
// 	<CmdType>
// 		Only accept "Generic" now". If not specified, "Generic" is assumed.
//
//  <Action>
//  	It supports the following:
//  		1. "DoNothing"
//  		2. "AddToTable"
//  		3. "DeleteFromTable"
//  <KeyType>
//  	It supports the following:
//  		1. "NotKey"
//  		2. "Exist"
//  		3. "New"
//  		4. "SubkeyExist"
//  		5. "SubkeyNew"
//
//
static OmnString sgCmd1Def = 
"<Cmd>"
	"<CmdType>Generic</CmdType>"
	"<Name>AddApp</Name>"
	"<Action>AddToTable</Action>"
	"<CorrectPct>90</CorrectPct>"
	"<KeyType>SingleKeyNew</KeyType>"
	"<Weight>50</Weight>"
	"<Prefix>inetrl application add</Prefix>"
	"<Parms>"
		"<Parm>"
			"<type>string</type>"
			"<Name>AppName</Name>"
			"<MinLen>1</MinLen>"
			"<MaxLen>16</MaxLen>"
			"<FieldName>app_name</FieldName>"
			"<KeyType>New</KeyType>"
			"<BadValue>***Bad***</BadValue>"
			"<StrType>VarName</StrType>"
		"</Parm>"
	"</Parms>"
"</Cmd>";

AosCliCmdGenericTester::AosCliCmdGenericTester()
{
    mTries = 200;
    mName = "AosCliCmdGenericTester";
	mCliTorturer = OmnNew AosCliTorturer(true);
	mVariables = OmnNew AosVarList();
}


AosCliCmdGenericTester::~AosCliCmdGenericTester()
{
}


bool
AosCliCmdGenericTester::start()
{
	mStatus[0] = 0;
	mStatus[1] = 0;

	u32 tries = 100;
	createData();
	// basicTest(tries);
	// runCmd2(tries);
	// runCmd3(tries);
	// runCmd4(tries);
	runCmd5(tries);
    return true;
}


bool
AosCliCmdGenericTester::basicTest(const u32 tries)
{
	bool cmdGood;

	mStatus[0] = 0;
	mStatus[1] = 0;

	for (u32 i=0; i<tries; i++)
	{
		if (i % 10000 == 0 && i > 0)
		{
			cout << "Count: " << i << endl;
		}

		OmnTCBool(true, mCmd->run(cmdGood, mTestMgr)) << endtc;

		if (cmdGood)
		{
			mStatus[0]++;
		}
		else
		{
			mStatus[1]++;
		}
	}

	OmnFilePtr logfile = AosCliTorturerTestSuite::getLogFile();

	OmnString rslt = "Total: ";
	rslt << tries << "\n"
		<< "Correct:   " << mStatus[0] << ",   " 
		<< (float)(mStatus[0] * 100.0 / tries) << "\n"
		<< "Incorrect: " << mStatus[1] << ",   " 
		<< (float)(mStatus[1] * 100.0 / tries) << "\n";
	if (logfile)
	{	
		logfile->append(rslt);
		logfile->append(mTable->toString());
	}	
	else
	{
		cout << rslt;
	}

	return true;
}


bool
AosCliCmdGenericTester::createData()
{
	OmnVList<AosGenTablePtr> tables;
	OmnXmlItemPtr item = OmnNew OmnXmlItem(sgTableDef);
	AosGenTablePtr table= OmnNew AosGenTable(item);
	if (!table)
	{
		OmnAlarm << "Failed to create table: " << sgTableDef << enderr;
		return false;
	}
	tables.append(table);

	item = OmnNew OmnXmlItem(sgCmd1Def);
	OmnFilePtr logfile = AosCliTorturerTestSuite::getLogFile();
	if (logfile)
	{
		mCmd = AosCliCmdTorturer::createCmd(item, logfile, eAosCliTorturerLogType_File, tables, mVariables, mCliTorturer);
	}
	else
	{
		mCmd = AosCliCmdTorturer::createCmd(item, logfile, eAosCliTorturerLogType_NoLog, tables, mVariables, mCliTorturer);
	}

	if (!mCmd)
	{
		OmnAlarm << "Failed to create command: " << sgCmd1Def << enderr;
		return false;
	}

	return true;
}


bool
AosCliCmdGenericTester::runCmd2(const u32 tries)
{
	// 
	// inetrl application add <AppName> <UserID>
	//
	// where <AppName> is a New type of key
	//
	static OmnString lsCmdDef = 
	"<Cmd>"
		"<CmdType>Generic</CmdType>"
		"<Name>Cmd2</Name>"
		"<Action>AddToTable</Action>"
		"<CorrectPct>90</CorrectPct>"
		"<KeyType>SingleKeyNew</KeyType>"
		"<Weight>50</Weight>"
		"<Prefix>inetrl application add</Prefix>"
		"<Parms>"
			"<Parm>"
				"<type>string</type>"
				"<Name>AppName</Name>"
				"<MinLen>1</MinLen>"
				"<MaxLen>16</MaxLen>"
				"<FieldName>app_name</FieldName>"
				"<KeyType>New</KeyType>"
				"<BadValue>***Bad***</BadValue>"
				"<StrType>VarName</StrType>"
			"</Parm>"
			"<Parm>"
				"<type>int</type>"
				"<Name>UserID</Name>"
				"<FieldName>user_id</FieldName>"
				"<BadValue>0</BadValue>"
				"<ValidValues>[1, 100, 20], [200, 2000, 40]</ValidValues>"
				"<InvalidValues>[-100, 0, 30], [101, 199, 50]</InvalidValues>"
			"</Parm>"
		"</Parms>"
	"</Cmd>";

	static OmnString lsTableDef = 
	"<TableDef>"
		"<MaxEntries>100</MaxEntries>"
		"<KeyFields>app_name</KeyFields>"
		"<Fields>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>app_name</Name>"
			"</Field>"
			"<Field>"
				"<Type>int</Type>"
				"<Name>user_id</Name>"
			"</Field>"
		"</Fields>"
	"</TableDef>";

	OmnVList<AosGenTablePtr> tables;
	OmnXmlItemPtr item = OmnNew OmnXmlItem(lsTableDef);
	AosGenTablePtr table = OmnNew AosGenTable(item);
	if (!table)
	{
		OmnAlarm << "Failed to create table: " << lsTableDef << enderr;
		return false;
	}
	tables.append(table);

	item = OmnNew OmnXmlItem(lsCmdDef);
	OmnFilePtr logfile = AosCliTorturerTestSuite::getLogFile();
	AosCliCmdTorturerPtr cmd;
	if (logfile)
	{
		cmd = AosCliCmdTorturer::createCmd(item, logfile, eAosCliTorturerLogType_File, tables, mVariables, mCliTorturer);
	}
	else
	{
		cmd = AosCliCmdTorturer::createCmd(item, logfile, eAosCliTorturerLogType_NoLog, tables, mVariables, mCliTorturer);
	}

	if (!cmd)
	{
		OmnAlarm << "Failed to create command: " << lsCmdDef << enderr;
		return false;
	}


	return runCmd(tries, cmd, table);
}


bool
AosCliCmdGenericTester::runCmd(const u32 tries, 
							   const AosCliCmdTorturerPtr &cmd, 
							   const AosGenTablePtr &table)
{
	bool cmdGood;

	for (u32 i=0; i<tries; i++)
	{
		if (i % 10000 == 0 && i > 0)
		{
			cout << "Count: " << i << endl;
		}

		OmnTCBool(true, cmd->run(cmdGood, mTestMgr)) << endtc;

		if (cmdGood)
		{
			mStatus[0]++;
		}
		else
		{
			mStatus[1]++;
		}
	}

	OmnFilePtr logfile = AosCliTorturerTestSuite::getLogFile();

/*
	OmnString rslt = "Total: ";
	rslt << tries << "\n"
		<< "Correct:   " << mStatus[0] << ",   " 
		<< (float)(mStatus[0] * 100.0 / tries) << "\n"
		<< "Incorrect: " << mStatus[1] << ",   " 
		<< (float)(mStatus[1] * 100.0 / tries) << "\n";
	if (logfile)
	{	
		logfile->append(rslt);
		logfile->append(table->toString());
	}	
	else
	{
		cout << rslt;
	}
*/
	return true;
}


bool	
AosCliCmdGenericTester::runCmd3(const u32 tries)
{
	// 
	// inetrl application add <AppName> <UserID> <Addr> <Netmask>
	//
	// where <AppName> is a New type of key
	// 		<UserId> integer
	// 		<Addr> an IP address
	// 		<Netmask> a netmask
	// 
	// <CmdType>:
	// 		Generic (default)
	//
	// <Name> default NoName
	// <Action>:
	// 		DoNothing (default)
	// 		AddToTable
	// 		DeleteFromTable
	//  <CorrectPct>
	//  	default 85
	//  <KeyType>
	//  	MultiKeyExist
	//  	MultiKeyNew
	//  	SingleKeyExist
	//  	SingleKeyNew
	//  	NoKey (default)
	//  <Weight>
	//      default: 50
	//  <TableName>
	//  	default: NoTable
	//
	static OmnString lsCmdDef = 
	"<Cmd>"
		"<CmdType>Generic</CmdType>"
		"<Name>Cmd2</Name>"
		"<Action>AddToTable</Action>"
		"<CorrectPct>90</CorrectPct>"
		"<KeyType>SingleKeyNew</KeyType>"
		"<Weight>50</Weight>"
		"<Prefix>inetrl application add</Prefix>"
		"<Parms>"
			"<Parm>"
				"<type>string</type>"
				"<Name>AppName</Name>"
				"<MinLen>1</MinLen>"
				"<MaxLen>16</MaxLen>"
				"<FieldName>app_name</FieldName>"
				"<KeyType>New</KeyType>"
				"<BadValue>***Bad***</BadValue>"
				"<StrType>VarName</StrType>"
			"</Parm>"
			"<Parm>"
				"<type>int</type>"
				"<Name>UserID</Name>"
				"<FieldName>user_id</FieldName>"
				"<BadValue>0</BadValue>"
				"<ValidValues>[1, 100, 20], [200, 2000, 40]</ValidValues>"
				"<InvalidValues>[-100, 0, 30], [101, 199, 50]</InvalidValues>"
			"</Parm>"
			"<Parm>"
				"<type>addr</type>"
				"<FieldName>addr</FieldName>"
				"<NetAddr>192.168.0.0</NetAddr>"
				"<NetMask>255.255.0.0</NetMask>"
				"<BadValue>10.10.10.10</BadValue>"
			"</Parm>"
			"<Parm>"
				"<type>netmask</type>"
				"<FieldName>netmask</FieldName>"
				"<BadValue>0.0.0.0</BadValue>"
			"</Parm>"
		"</Parms>"
	"</Cmd>";

	static OmnString lsTableDef = 
	"<TableDef>"
		"<MaxEntries>100</MaxEntries>"
		"<KeyFields>app_name</KeyFields>"
		"<Fields>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>app_name</Name>"
			"</Field>"
			"<Field>"
				"<Type>int</Type>"
				"<Name>user_id</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>addr</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>netmask</Name>"
			"</Field>"
		"</Fields>"
	"</TableDef>";

	return runCmd(tries, lsCmdDef, lsTableDef);
}


bool
AosCliCmdGenericTester::runCmd(const u32 tries, 
			const OmnString &cmdDef, 
			const OmnString &tableDef)
{
	OmnVList<AosGenTablePtr> tables;
	AosGenTablePtr table = createTable(tableDef);
	tables.append(table);

	AosCliCmdTorturerPtr cmd = createCmd(tables, cmdDef);
	return runCmd(tries, cmd, table);
}


AosGenTablePtr
AosCliCmdGenericTester::createTable(const OmnString &tableDef)
{
	OmnXmlItemPtr item = OmnNew OmnXmlItem(tableDef);
	AosGenTablePtr table = OmnNew AosGenTable(item);
	if (!table)
	{
		OmnAlarm << "Failed to create table: " << tableDef << enderr;
		return 0;
	}

	return table;
}


AosCliCmdTorturerPtr
AosCliCmdGenericTester::createCmd(OmnVList<AosGenTablePtr> &tables, const OmnString &cmdDef)
{
	OmnXmlItemPtr item = OmnNew OmnXmlItem(cmdDef);
	OmnFilePtr logfile = AosCliTorturerTestSuite::getLogFile();
	AosCliCmdTorturerPtr cmd;
	if (logfile)
	{
		cmd = AosCliCmdTorturer::createCmd(item, logfile, eAosCliTorturerLogType_File, tables, mVariables, mCliTorturer);
	}
	else
	{
		cmd = AosCliCmdTorturer::createCmd(item, logfile, eAosCliTorturerLogType_NoLog, tables, mVariables, mCliTorturer);
	}

	if (!cmd)
	{
		OmnAlarm << "Failed to create command: " << cmdDef << enderr;
		return 0;
	}

	return cmd;
}


bool	
AosCliCmdGenericTester::runCmd4(const u32 tries)
{
	OmnString tableDef = 
	"<TableDef>"
		"<Name>flow_table</Name>"
		"<MaxEntries>500</MaxEntries>"
		"<KeyFields>app_name, addr, netmask, starting_port, ending_port</KeyFields>"
		"<Fields>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>app_name</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>protocol</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>addr</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>netmask</Name>"
			"</Field>"
			"<Field>"
				"<Type>int</Type>"
				"<Name>starting_port</Name>"
			"</Field>"
			"<Field>"
				"<Type>int</Type>"
				"<Name>ending_port</Name>"
			"</Field>"
		"</Fields>"
	"</TableDef>";

	OmnString cmdDef = 
			"<Cmd>"
				"<Name>AddFlow</Name>"
				"<Weight>50</Weight>"
				"<TableName>flow_table</TableName>"
				"<OprID>inetctrl_app_addflow_ip</OprID>"
				"<Prefix>inetctrl app addflow ip</Prefix>"
				"<ModId>kernel</ModId>"
				"<KeyType>MultiKeyNew</KeyType>"
				"<bufsize>1000</bufsize>"
				"<Usage>Usage: inetctrl app addflow ip <name> [tcp|udp] <dst ip> <dst mask> <start port> <end port> </Usage>"
				"<Parms>"
					"<Parm>"
	        			"<type>string</type>"
						"<Name>AppName</Name>"
						"<MinLen>1</MinLen>"
						"<MaxLen>16</MaxLen>"
						"<FieldName>app_name</FieldName>"
						"<KeyType>New</KeyType>"
						"<StrType>VarName</StrType>"
		    			"<help>Name of app to which flow is added</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>StringList</type>"
						"<Name>Protocol</Name>"
						"<MinLen>1</MinLen>"
						"<MaxLen>16</MaxLen>"
						"<Values>tcp, udp</Values>"
						"<FieldName>protocol</FieldName>"
						"<StrType>VarName</StrType>"
		    			"<help>tcp or udp</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>addr</type>"
						"<FieldName>addr</FieldName>"
						"<NetAddr>192.168.0.0</NetAddr>"
						"<KeyType>New</KeyType>"
						"<NetMask>255.255.0.0</NetMask>"
						"<BadValue>0.0.0.0</BadValue>"
		    			"<help>Destination IP address</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>netmask</type>"
						"<FieldName>netmask</FieldName>"
						"<KeyType>New</KeyType>"
						"<BadValue>0.0.0.0</BadValue>"
		    			"<help>Netmask</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>port</type>"
						"<Name>StartingPort</Name>"
						"<FieldName>starting_port</FieldName>"
						"<ValidValues>[1025, 4999, 50], [10000, 19999, 20], [40000, 49999, 10]</ValidValues>"
						"<InvalidValues>[-1000, 0, 10], [1, 1024, 50]</InvalidValues>"
						"<KeyType>New</KeyType>"
						"<BadValue>-1</BadValue>"
		    			"<help>Starting Port</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>port</type>"
						"<Name>EndingPort</Name>"
						"<FieldName>ending_port</FieldName>"
						"<ValidValues>[1025, 4999, 50], [10000, 19999, 20], [40000, 49999, 10]</ValidValues>"
						"<KeyType>New</KeyType>"
						"<InvalidValues>[-1000, 0, 10], [1, 1024, 50]</InvalidValues>"
						"<BadValue>-1</BadValue>"
		    			"<help>Ending Port</help>"
	    			"</Parm>"
				"</Parms>"
			"</Cmd>";

	return runCmd(tries, cmdDef, tableDef);
}


bool	
AosCliCmdGenericTester::runCmd5(const u32 tries)
{
	// 
	// This test uses the following commands:
	// 1. Add an app
	// 2. Delete an app
	// 3. Add flow role
	//
	// There will be two tables: app_table and flow_table. The field app_name in the
	// app_table is used in the flow_table. When we delete an app, we want to make 
	// sure the app_name is not used in the flow_table. 
	//
	OmnString appTableDef = 
	"<TableDef>"
		"<Name>app_table</Name>"
		"<MaxEntries>500</MaxEntries>"
		"<KeyFields>app_name, user_id</KeyFields>"
		"<Fields>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>app_name</Name>"
			"</Field>"
			"<Field>"
				"<Type>int</Type>"
				"<Name>user_id</Name>"
			"</Field>"
		"</Fields>"
	"</TableDef>";

	OmnString flowTableDef = 
	"<TableDef>"
		"<Name>flow_table</Name>"
		"<MaxEntries>500</MaxEntries>"
		"<KeyFields>app_name, addr, netmask, starting_port, ending_port</KeyFields>"
		"<Fields>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>app_name</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>protocol</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>addr</Name>"
			"</Field>"
			"<Field>"
				"<Type>string</Type>"
				"<Name>netmask</Name>"
			"</Field>"
			"<Field>"
				"<Type>int</Type>"
				"<Name>starting_port</Name>"
			"</Field>"
			"<Field>"
				"<Type>int</Type>"
				"<Name>ending_port</Name>"
			"</Field>"
		"</Fields>"
	"</TableDef>";

	OmnString addAppCmdDef = 
	"<Cmd>"
		"<CmdType>Generic</CmdType>"
		"<Name>AddApp</Name>"
		"<Action>AddToTable</Action>"
		"<CorrectPct>90</CorrectPct>"
		"<TableName>app_table</TableName>"
		"<KeyType>SingleKeyNew</KeyType>"
		"<Weight>50</Weight>"
		"<Prefix>inetrl application add</Prefix>"
		"<Parms>"
			"<Parm>"
				"<type>string</type>"
				"<Name>AppName</Name>"
				"<MinLen>1</MinLen>"
				"<MaxLen>16</MaxLen>"
				"<FieldName>app_name</FieldName>"
				"<KeyType>New</KeyType>"
				"<BadValue>***Bad***</BadValue>"
				"<StrType>VarName</StrType>"
			"</Parm>"
			"<Parm>"
				"<type>int</type>"
				"<Name>UserID</Name>"
				"<FieldName>user_id</FieldName>"
				"<BadValue>0</BadValue>"
				"<ValidValues>[1, 100, 20], [200, 2000, 40]</ValidValues>"
				"<InvalidValues>[-100, 0, 30], [101, 199, 50]</InvalidValues>"
			"</Parm>"
		"</Parms>"
	"</Cmd>";

	OmnString removeAppCmdDef = 
	"<Cmd>"
		"<CmdType>Generic</CmdType>"
		"<Name>RemoveApp</Name>"
		"<Action>DeleteFromTable</Action>"
		"<CorrectPct>90</CorrectPct>"
		"<KeyType>SingleKeyNew</KeyType>"
		"<Weight>50</Weight>"
		"<TableName>app_table</TableName>"
		"<Prefix>inetrl application remove</Prefix>"
		"<Parms>"
			"<Parm>"
				"<type>string</type>"
				"<DependedTables>"
					"<Entry>flow_table, app_name</Entry>"
				"</DependedTables>"
				"<Name>AppName</Name>"
				"<MinLen>1</MinLen>"
				"<MaxLen>16</MaxLen>"
				"<FieldName>app_name</FieldName>"
				"<KeyType>Exist</KeyType>"
				"<BadValue>***Bad***</BadValue>"
				"<StrType>VarName</StrType>"
			"</Parm>"
		"</Parms>"
	"</Cmd>";

	OmnString addFlowCmdDef = 
			"<Cmd>"
				"<Name>AddFlow</Name>"
				"<Weight>50</Weight>"
				"<TableName>flow_table</TableName>"
				"<OprID>inetctrl_app_addflow_ip</OprID>"
				"<Action>AddToTable</Action>"
				"<Prefix>inetctrl app addflow ip</Prefix>"
				"<ModId>kernel</ModId>"
				"<KeyType>MultiKeyNew</KeyType>"
				"<bufsize>1000</bufsize>"
				"<Usage>Usage: inetctrl app addflow ip <name> [tcp|udp] <dst ip> <dst mask> <start port> <end port> </Usage>"
				"<Parms>"
					"<Parm>"
	        			"<type>string</type>"
						"<Name>AppName</Name>"
						"<MinLen>1</MinLen>"
						"<MaxLen>16</MaxLen>"
						"<FieldName>app_name</FieldName>"
						"<KeyType>Exist</KeyType>"
						"<TableName>app_table</TableName>"
						"<StrType>VarName</StrType>"
		    			"<help>Name of app to which flow is added</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>StringList</type>"
						"<Name>Protocol</Name>"
						"<MinLen>1</MinLen>"
						"<MaxLen>16</MaxLen>"
						"<Values>tcp, udp</Values>"
						"<FieldName>protocol</FieldName>"
						"<StrType>VarName</StrType>"
		    			"<help>tcp or udp</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>addr</type>"
						"<FieldName>addr</FieldName>"
						"<NetAddr>192.168.0.0</NetAddr>"
						"<NetMask>255.255.0.0</NetMask>"
						"<BadValue>0.0.0.0</BadValue>"
		    			"<help>Destination IP address</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>netmask</type>"
						"<FieldName>netmask</FieldName>"
						"<BadValue>0.0.0.0</BadValue>"
		    			"<help>Netmask</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>port</type>"
						"<Name>StartingPort</Name>"
						"<FieldName>starting_port</FieldName>"
						"<ValidValues>[1025, 4999, 50], [10000, 19999, 20], [40000, 49999, 10]</ValidValues>"
						"<InvalidValues>[-1000, 0, 10], [1, 1024, 50]</InvalidValues>"
						"<BadValue>-1</BadValue>"
		    			"<help>Starting Port</help>"
	    			"</Parm>"
	    			"<Parm>"
	        			"<type>port</type>"
						"<Name>EndingPort</Name>"
						"<FieldName>ending_port</FieldName>"
						"<ValidValues>[1025, 4999, 50], [10000, 19999, 20], [40000, 49999, 10]</ValidValues>"
						"<InvalidValues>[-1000, 0, 10], [1, 1024, 50]</InvalidValues>"
						"<BadValue>-1</BadValue>"
		    			"<help>Ending Port</help>"
	    			"</Parm>"
				"</Parms>"
			"</Cmd>";

	AosGenTablePtr appTable = createTable(appTableDef);
	AosGenTablePtr flowTable = createTable(flowTableDef);
	OmnVList<AosGenTablePtr> tables;
	tables.append(appTable);
	tables.append(flowTable);
	AosCliCmdTorturerPtr addAppCmd = createCmd(tables, addAppCmdDef);
	AosCliCmdTorturerPtr removeAppCmd = createCmd(tables, removeAppCmdDef);
	AosCliCmdTorturerPtr addFlowCmd = createCmd(tables, addFlowCmdDef);

	for (u32 i=0; i<tries; i++)
	{
		if (i % 10000 == 0 && i > 0)
		{
			cout << i << endl;
		}

		int choice = OmnRandom::nextInt(1, 40);
		if (choice < 15)
		{
			runCmd(1, addAppCmd, appTable);
		}
		else if (choice < 25)
		{
			runCmd(1, removeAppCmd, appTable);
		}
		else
		{
			runCmd(1, addFlowCmd, flowTable);
		}
	}

	OmnFilePtr logfile = AosCliTorturerTestSuite::getLogFile();

	OmnString rslt = "Total: ";
	rslt << tries << "\n"
		<< "Correct:   " << mStatus[0] << ",   " 
		<< (float)(mStatus[0] * 100.0 / tries) << "\n"
		<< "Incorrect: " << mStatus[1] << ",   " 
		<< (float)(mStatus[1] * 100.0 / tries) << "\n";
	if (logfile)
	{	
		logfile->append(rslt);
		logfile->append(appTable->toString());
		logfile->append(flowTable->toString());
	}	
	else
	{
		cout << rslt;
	}

	return true;
}


