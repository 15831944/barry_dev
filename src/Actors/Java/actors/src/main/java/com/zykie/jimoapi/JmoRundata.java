/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package zykie.jimoapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JmoRundata implements org.apache.thrift.TBase<JmoRundata, JmoRundata._Fields>, java.io.Serializable, Cloneable, Comparable<JmoRundata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JmoRundata");

  private static final org.apache.thrift.protocol.TField CALL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("call_data", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ERRMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errmsg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("rcode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ERROR_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("error_num", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("api_key", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STR_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("str_values", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField INT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("int_values", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("site_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField I64_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_value", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField STR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("str_value", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HELLO_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("hello_value", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SUSER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("suser_value", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JmoRundataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JmoRundataTupleSchemeFactory());
  }

  public JmoCallData call_data; // required
  public String errmsg; // required
  /**
   * 
   * @see JmoReturnCode
   */
  public JmoReturnCode rcode; // required
  public long error_num; // required
  public String database; // required
  public String api_key; // required
  public List<String> str_values; // required
  public List<Long> int_values; // required
  public long site_id; // required
  public long i64_value; // required
  public String str_value; // required
  public String hello_value; // required
  public String suser_value; // required
  public String session_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CALL_DATA((short)1, "call_data"),
    ERRMSG((short)2, "errmsg"),
    /**
     * 
     * @see JmoReturnCode
     */
    RCODE((short)3, "rcode"),
    ERROR_NUM((short)4, "error_num"),
    DATABASE((short)5, "database"),
    API_KEY((short)6, "api_key"),
    STR_VALUES((short)7, "str_values"),
    INT_VALUES((short)8, "int_values"),
    SITE_ID((short)9, "site_id"),
    I64_VALUE((short)10, "i64_value"),
    STR_VALUE((short)11, "str_value"),
    HELLO_VALUE((short)12, "hello_value"),
    SUSER_VALUE((short)13, "suser_value"),
    SESSION_ID((short)14, "session_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CALL_DATA
          return CALL_DATA;
        case 2: // ERRMSG
          return ERRMSG;
        case 3: // RCODE
          return RCODE;
        case 4: // ERROR_NUM
          return ERROR_NUM;
        case 5: // DATABASE
          return DATABASE;
        case 6: // API_KEY
          return API_KEY;
        case 7: // STR_VALUES
          return STR_VALUES;
        case 8: // INT_VALUES
          return INT_VALUES;
        case 9: // SITE_ID
          return SITE_ID;
        case 10: // I64_VALUE
          return I64_VALUE;
        case 11: // STR_VALUE
          return STR_VALUE;
        case 12: // HELLO_VALUE
          return HELLO_VALUE;
        case 13: // SUSER_VALUE
          return SUSER_VALUE;
        case 14: // SESSION_ID
          return SESSION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERROR_NUM_ISSET_ID = 0;
  private static final int __SITE_ID_ISSET_ID = 1;
  private static final int __I64_VALUE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CALL_DATA, new org.apache.thrift.meta_data.FieldMetaData("call_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JmoCallData.class)));
    tmpMap.put(_Fields.ERRMSG, new org.apache.thrift.meta_data.FieldMetaData("errmsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RCODE, new org.apache.thrift.meta_data.FieldMetaData("rcode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JmoReturnCode.class)));
    tmpMap.put(_Fields.ERROR_NUM, new org.apache.thrift.meta_data.FieldMetaData("error_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("api_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR_VALUES, new org.apache.thrift.meta_data.FieldMetaData("str_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("int_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("site_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I64_VALUE, new org.apache.thrift.meta_data.FieldMetaData("i64_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("str_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HELLO_VALUE, new org.apache.thrift.meta_data.FieldMetaData("hello_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUSER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("suser_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JmoRundata.class, metaDataMap);
  }

  public JmoRundata() {
  }

  public JmoRundata(
    JmoCallData call_data,
    String errmsg,
    JmoReturnCode rcode,
    long error_num,
    String database,
    String api_key,
    List<String> str_values,
    List<Long> int_values,
    long site_id,
    long i64_value,
    String str_value,
    String hello_value,
    String suser_value,
    String session_id)
  {
    this();
    this.call_data = call_data;
    this.errmsg = errmsg;
    this.rcode = rcode;
    this.error_num = error_num;
    setError_numIsSet(true);
    this.database = database;
    this.api_key = api_key;
    this.str_values = str_values;
    this.int_values = int_values;
    this.site_id = site_id;
    setSite_idIsSet(true);
    this.i64_value = i64_value;
    setI64_valueIsSet(true);
    this.str_value = str_value;
    this.hello_value = hello_value;
    this.suser_value = suser_value;
    this.session_id = session_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JmoRundata(JmoRundata other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCall_data()) {
      this.call_data = new JmoCallData(other.call_data);
    }
    if (other.isSetErrmsg()) {
      this.errmsg = other.errmsg;
    }
    if (other.isSetRcode()) {
      this.rcode = other.rcode;
    }
    this.error_num = other.error_num;
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetApi_key()) {
      this.api_key = other.api_key;
    }
    if (other.isSetStr_values()) {
      List<String> __this__str_values = new ArrayList<String>(other.str_values);
      this.str_values = __this__str_values;
    }
    if (other.isSetInt_values()) {
      List<Long> __this__int_values = new ArrayList<Long>(other.int_values);
      this.int_values = __this__int_values;
    }
    this.site_id = other.site_id;
    this.i64_value = other.i64_value;
    if (other.isSetStr_value()) {
      this.str_value = other.str_value;
    }
    if (other.isSetHello_value()) {
      this.hello_value = other.hello_value;
    }
    if (other.isSetSuser_value()) {
      this.suser_value = other.suser_value;
    }
    if (other.isSetSession_id()) {
      this.session_id = other.session_id;
    }
  }

  public JmoRundata deepCopy() {
    return new JmoRundata(this);
  }

  @Override
  public void clear() {
    this.call_data = null;
    this.errmsg = null;
    this.rcode = null;
    setError_numIsSet(false);
    this.error_num = 0;
    this.database = null;
    this.api_key = null;
    this.str_values = null;
    this.int_values = null;
    setSite_idIsSet(false);
    this.site_id = 0;
    setI64_valueIsSet(false);
    this.i64_value = 0;
    this.str_value = null;
    this.hello_value = null;
    this.suser_value = null;
    this.session_id = null;
  }

  public JmoCallData getCall_data() {
    return this.call_data;
  }

  public JmoRundata setCall_data(JmoCallData call_data) {
    this.call_data = call_data;
    return this;
  }

  public void unsetCall_data() {
    this.call_data = null;
  }

  /** Returns true if field call_data is set (has been assigned a value) and false otherwise */
  public boolean isSetCall_data() {
    return this.call_data != null;
  }

  public void setCall_dataIsSet(boolean value) {
    if (!value) {
      this.call_data = null;
    }
  }

  public String getErrmsg() {
    return this.errmsg;
  }

  public JmoRundata setErrmsg(String errmsg) {
    this.errmsg = errmsg;
    return this;
  }

  public void unsetErrmsg() {
    this.errmsg = null;
  }

  /** Returns true if field errmsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrmsg() {
    return this.errmsg != null;
  }

  public void setErrmsgIsSet(boolean value) {
    if (!value) {
      this.errmsg = null;
    }
  }

  /**
   * 
   * @see JmoReturnCode
   */
  public JmoReturnCode getRcode() {
    return this.rcode;
  }

  /**
   * 
   * @see JmoReturnCode
   */
  public JmoRundata setRcode(JmoReturnCode rcode) {
    this.rcode = rcode;
    return this;
  }

  public void unsetRcode() {
    this.rcode = null;
  }

  /** Returns true if field rcode is set (has been assigned a value) and false otherwise */
  public boolean isSetRcode() {
    return this.rcode != null;
  }

  public void setRcodeIsSet(boolean value) {
    if (!value) {
      this.rcode = null;
    }
  }

  public long getError_num() {
    return this.error_num;
  }

  public JmoRundata setError_num(long error_num) {
    this.error_num = error_num;
    setError_numIsSet(true);
    return this;
  }

  public void unsetError_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERROR_NUM_ISSET_ID);
  }

  /** Returns true if field error_num is set (has been assigned a value) and false otherwise */
  public boolean isSetError_num() {
    return EncodingUtils.testBit(__isset_bitfield, __ERROR_NUM_ISSET_ID);
  }

  public void setError_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERROR_NUM_ISSET_ID, value);
  }

  public String getDatabase() {
    return this.database;
  }

  public JmoRundata setDatabase(String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  public String getApi_key() {
    return this.api_key;
  }

  public JmoRundata setApi_key(String api_key) {
    this.api_key = api_key;
    return this;
  }

  public void unsetApi_key() {
    this.api_key = null;
  }

  /** Returns true if field api_key is set (has been assigned a value) and false otherwise */
  public boolean isSetApi_key() {
    return this.api_key != null;
  }

  public void setApi_keyIsSet(boolean value) {
    if (!value) {
      this.api_key = null;
    }
  }

  public int getStr_valuesSize() {
    return (this.str_values == null) ? 0 : this.str_values.size();
  }

  public java.util.Iterator<String> getStr_valuesIterator() {
    return (this.str_values == null) ? null : this.str_values.iterator();
  }

  public void addToStr_values(String elem) {
    if (this.str_values == null) {
      this.str_values = new ArrayList<String>();
    }
    this.str_values.add(elem);
  }

  public List<String> getStr_values() {
    return this.str_values;
  }

  public JmoRundata setStr_values(List<String> str_values) {
    this.str_values = str_values;
    return this;
  }

  public void unsetStr_values() {
    this.str_values = null;
  }

  /** Returns true if field str_values is set (has been assigned a value) and false otherwise */
  public boolean isSetStr_values() {
    return this.str_values != null;
  }

  public void setStr_valuesIsSet(boolean value) {
    if (!value) {
      this.str_values = null;
    }
  }

  public int getInt_valuesSize() {
    return (this.int_values == null) ? 0 : this.int_values.size();
  }

  public java.util.Iterator<Long> getInt_valuesIterator() {
    return (this.int_values == null) ? null : this.int_values.iterator();
  }

  public void addToInt_values(long elem) {
    if (this.int_values == null) {
      this.int_values = new ArrayList<Long>();
    }
    this.int_values.add(elem);
  }

  public List<Long> getInt_values() {
    return this.int_values;
  }

  public JmoRundata setInt_values(List<Long> int_values) {
    this.int_values = int_values;
    return this;
  }

  public void unsetInt_values() {
    this.int_values = null;
  }

  /** Returns true if field int_values is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_values() {
    return this.int_values != null;
  }

  public void setInt_valuesIsSet(boolean value) {
    if (!value) {
      this.int_values = null;
    }
  }

  public long getSite_id() {
    return this.site_id;
  }

  public JmoRundata setSite_id(long site_id) {
    this.site_id = site_id;
    setSite_idIsSet(true);
    return this;
  }

  public void unsetSite_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITE_ID_ISSET_ID);
  }

  /** Returns true if field site_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSite_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SITE_ID_ISSET_ID);
  }

  public void setSite_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITE_ID_ISSET_ID, value);
  }

  public long getI64_value() {
    return this.i64_value;
  }

  public JmoRundata setI64_value(long i64_value) {
    this.i64_value = i64_value;
    setI64_valueIsSet(true);
    return this;
  }

  public void unsetI64_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64_VALUE_ISSET_ID);
  }

  /** Returns true if field i64_value is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_value() {
    return EncodingUtils.testBit(__isset_bitfield, __I64_VALUE_ISSET_ID);
  }

  public void setI64_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64_VALUE_ISSET_ID, value);
  }

  public String getStr_value() {
    return this.str_value;
  }

  public JmoRundata setStr_value(String str_value) {
    this.str_value = str_value;
    return this;
  }

  public void unsetStr_value() {
    this.str_value = null;
  }

  /** Returns true if field str_value is set (has been assigned a value) and false otherwise */
  public boolean isSetStr_value() {
    return this.str_value != null;
  }

  public void setStr_valueIsSet(boolean value) {
    if (!value) {
      this.str_value = null;
    }
  }

  public String getHello_value() {
    return this.hello_value;
  }

  public JmoRundata setHello_value(String hello_value) {
    this.hello_value = hello_value;
    return this;
  }

  public void unsetHello_value() {
    this.hello_value = null;
  }

  /** Returns true if field hello_value is set (has been assigned a value) and false otherwise */
  public boolean isSetHello_value() {
    return this.hello_value != null;
  }

  public void setHello_valueIsSet(boolean value) {
    if (!value) {
      this.hello_value = null;
    }
  }

  public String getSuser_value() {
    return this.suser_value;
  }

  public JmoRundata setSuser_value(String suser_value) {
    this.suser_value = suser_value;
    return this;
  }

  public void unsetSuser_value() {
    this.suser_value = null;
  }

  /** Returns true if field suser_value is set (has been assigned a value) and false otherwise */
  public boolean isSetSuser_value() {
    return this.suser_value != null;
  }

  public void setSuser_valueIsSet(boolean value) {
    if (!value) {
      this.suser_value = null;
    }
  }

  public String getSession_id() {
    return this.session_id;
  }

  public JmoRundata setSession_id(String session_id) {
    this.session_id = session_id;
    return this;
  }

  public void unsetSession_id() {
    this.session_id = null;
  }

  /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSession_id() {
    return this.session_id != null;
  }

  public void setSession_idIsSet(boolean value) {
    if (!value) {
      this.session_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CALL_DATA:
      if (value == null) {
        unsetCall_data();
      } else {
        setCall_data((JmoCallData)value);
      }
      break;

    case ERRMSG:
      if (value == null) {
        unsetErrmsg();
      } else {
        setErrmsg((String)value);
      }
      break;

    case RCODE:
      if (value == null) {
        unsetRcode();
      } else {
        setRcode((JmoReturnCode)value);
      }
      break;

    case ERROR_NUM:
      if (value == null) {
        unsetError_num();
      } else {
        setError_num((Long)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((String)value);
      }
      break;

    case API_KEY:
      if (value == null) {
        unsetApi_key();
      } else {
        setApi_key((String)value);
      }
      break;

    case STR_VALUES:
      if (value == null) {
        unsetStr_values();
      } else {
        setStr_values((List<String>)value);
      }
      break;

    case INT_VALUES:
      if (value == null) {
        unsetInt_values();
      } else {
        setInt_values((List<Long>)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSite_id();
      } else {
        setSite_id((Long)value);
      }
      break;

    case I64_VALUE:
      if (value == null) {
        unsetI64_value();
      } else {
        setI64_value((Long)value);
      }
      break;

    case STR_VALUE:
      if (value == null) {
        unsetStr_value();
      } else {
        setStr_value((String)value);
      }
      break;

    case HELLO_VALUE:
      if (value == null) {
        unsetHello_value();
      } else {
        setHello_value((String)value);
      }
      break;

    case SUSER_VALUE:
      if (value == null) {
        unsetSuser_value();
      } else {
        setSuser_value((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSession_id();
      } else {
        setSession_id((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CALL_DATA:
      return getCall_data();

    case ERRMSG:
      return getErrmsg();

    case RCODE:
      return getRcode();

    case ERROR_NUM:
      return Long.valueOf(getError_num());

    case DATABASE:
      return getDatabase();

    case API_KEY:
      return getApi_key();

    case STR_VALUES:
      return getStr_values();

    case INT_VALUES:
      return getInt_values();

    case SITE_ID:
      return Long.valueOf(getSite_id());

    case I64_VALUE:
      return Long.valueOf(getI64_value());

    case STR_VALUE:
      return getStr_value();

    case HELLO_VALUE:
      return getHello_value();

    case SUSER_VALUE:
      return getSuser_value();

    case SESSION_ID:
      return getSession_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CALL_DATA:
      return isSetCall_data();
    case ERRMSG:
      return isSetErrmsg();
    case RCODE:
      return isSetRcode();
    case ERROR_NUM:
      return isSetError_num();
    case DATABASE:
      return isSetDatabase();
    case API_KEY:
      return isSetApi_key();
    case STR_VALUES:
      return isSetStr_values();
    case INT_VALUES:
      return isSetInt_values();
    case SITE_ID:
      return isSetSite_id();
    case I64_VALUE:
      return isSetI64_value();
    case STR_VALUE:
      return isSetStr_value();
    case HELLO_VALUE:
      return isSetHello_value();
    case SUSER_VALUE:
      return isSetSuser_value();
    case SESSION_ID:
      return isSetSession_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JmoRundata)
      return this.equals((JmoRundata)that);
    return false;
  }

  public boolean equals(JmoRundata that) {
    if (that == null)
      return false;

    boolean this_present_call_data = true && this.isSetCall_data();
    boolean that_present_call_data = true && that.isSetCall_data();
    if (this_present_call_data || that_present_call_data) {
      if (!(this_present_call_data && that_present_call_data))
        return false;
      if (!this.call_data.equals(that.call_data))
        return false;
    }

    boolean this_present_errmsg = true && this.isSetErrmsg();
    boolean that_present_errmsg = true && that.isSetErrmsg();
    if (this_present_errmsg || that_present_errmsg) {
      if (!(this_present_errmsg && that_present_errmsg))
        return false;
      if (!this.errmsg.equals(that.errmsg))
        return false;
    }

    boolean this_present_rcode = true && this.isSetRcode();
    boolean that_present_rcode = true && that.isSetRcode();
    if (this_present_rcode || that_present_rcode) {
      if (!(this_present_rcode && that_present_rcode))
        return false;
      if (!this.rcode.equals(that.rcode))
        return false;
    }

    boolean this_present_error_num = true;
    boolean that_present_error_num = true;
    if (this_present_error_num || that_present_error_num) {
      if (!(this_present_error_num && that_present_error_num))
        return false;
      if (this.error_num != that.error_num)
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_api_key = true && this.isSetApi_key();
    boolean that_present_api_key = true && that.isSetApi_key();
    if (this_present_api_key || that_present_api_key) {
      if (!(this_present_api_key && that_present_api_key))
        return false;
      if (!this.api_key.equals(that.api_key))
        return false;
    }

    boolean this_present_str_values = true && this.isSetStr_values();
    boolean that_present_str_values = true && that.isSetStr_values();
    if (this_present_str_values || that_present_str_values) {
      if (!(this_present_str_values && that_present_str_values))
        return false;
      if (!this.str_values.equals(that.str_values))
        return false;
    }

    boolean this_present_int_values = true && this.isSetInt_values();
    boolean that_present_int_values = true && that.isSetInt_values();
    if (this_present_int_values || that_present_int_values) {
      if (!(this_present_int_values && that_present_int_values))
        return false;
      if (!this.int_values.equals(that.int_values))
        return false;
    }

    boolean this_present_site_id = true;
    boolean that_present_site_id = true;
    if (this_present_site_id || that_present_site_id) {
      if (!(this_present_site_id && that_present_site_id))
        return false;
      if (this.site_id != that.site_id)
        return false;
    }

    boolean this_present_i64_value = true;
    boolean that_present_i64_value = true;
    if (this_present_i64_value || that_present_i64_value) {
      if (!(this_present_i64_value && that_present_i64_value))
        return false;
      if (this.i64_value != that.i64_value)
        return false;
    }

    boolean this_present_str_value = true && this.isSetStr_value();
    boolean that_present_str_value = true && that.isSetStr_value();
    if (this_present_str_value || that_present_str_value) {
      if (!(this_present_str_value && that_present_str_value))
        return false;
      if (!this.str_value.equals(that.str_value))
        return false;
    }

    boolean this_present_hello_value = true && this.isSetHello_value();
    boolean that_present_hello_value = true && that.isSetHello_value();
    if (this_present_hello_value || that_present_hello_value) {
      if (!(this_present_hello_value && that_present_hello_value))
        return false;
      if (!this.hello_value.equals(that.hello_value))
        return false;
    }

    boolean this_present_suser_value = true && this.isSetSuser_value();
    boolean that_present_suser_value = true && that.isSetSuser_value();
    if (this_present_suser_value || that_present_suser_value) {
      if (!(this_present_suser_value && that_present_suser_value))
        return false;
      if (!this.suser_value.equals(that.suser_value))
        return false;
    }

    boolean this_present_session_id = true && this.isSetSession_id();
    boolean that_present_session_id = true && that.isSetSession_id();
    if (this_present_session_id || that_present_session_id) {
      if (!(this_present_session_id && that_present_session_id))
        return false;
      if (!this.session_id.equals(that.session_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JmoRundata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCall_data()).compareTo(other.isSetCall_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCall_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.call_data, other.call_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrmsg()).compareTo(other.isSetErrmsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrmsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errmsg, other.errmsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRcode()).compareTo(other.isSetRcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rcode, other.rcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError_num()).compareTo(other.isSetError_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_num, other.error_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi_key()).compareTo(other.isSetApi_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api_key, other.api_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr_values()).compareTo(other.isSetStr_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str_values, other.str_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_values()).compareTo(other.isSetInt_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_values, other.int_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSite_id()).compareTo(other.isSetSite_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSite_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site_id, other.site_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_value()).compareTo(other.isSetI64_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_value, other.i64_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr_value()).compareTo(other.isSetStr_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str_value, other.str_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHello_value()).compareTo(other.isSetHello_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHello_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hello_value, other.hello_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuser_value()).compareTo(other.isSetSuser_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuser_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suser_value, other.suser_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JmoRundata(");
    boolean first = true;

    sb.append("call_data:");
    if (this.call_data == null) {
      sb.append("null");
    } else {
      sb.append(this.call_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errmsg:");
    if (this.errmsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errmsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rcode:");
    if (this.rcode == null) {
      sb.append("null");
    } else {
      sb.append(this.rcode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("error_num:");
    sb.append(this.error_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("database:");
    if (this.database == null) {
      sb.append("null");
    } else {
      sb.append(this.database);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("api_key:");
    if (this.api_key == null) {
      sb.append("null");
    } else {
      sb.append(this.api_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str_values:");
    if (this.str_values == null) {
      sb.append("null");
    } else {
      sb.append(this.str_values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("int_values:");
    if (this.int_values == null) {
      sb.append("null");
    } else {
      sb.append(this.int_values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("site_id:");
    sb.append(this.site_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_value:");
    sb.append(this.i64_value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("str_value:");
    if (this.str_value == null) {
      sb.append("null");
    } else {
      sb.append(this.str_value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hello_value:");
    if (this.hello_value == null) {
      sb.append("null");
    } else {
      sb.append(this.hello_value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("suser_value:");
    if (this.suser_value == null) {
      sb.append("null");
    } else {
      sb.append(this.suser_value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("session_id:");
    if (this.session_id == null) {
      sb.append("null");
    } else {
      sb.append(this.session_id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (call_data != null) {
      call_data.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JmoRundataStandardSchemeFactory implements SchemeFactory {
    public JmoRundataStandardScheme getScheme() {
      return new JmoRundataStandardScheme();
    }
  }

  private static class JmoRundataStandardScheme extends StandardScheme<JmoRundata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JmoRundata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CALL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.call_data = new JmoCallData();
              struct.call_data.read(iprot);
              struct.setCall_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERRMSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errmsg = iprot.readString();
              struct.setErrmsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rcode = JmoReturnCode.findByValue(iprot.readI32());
              struct.setRcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ERROR_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.error_num = iprot.readI64();
              struct.setError_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // API_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.api_key = iprot.readString();
              struct.setApi_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STR_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.str_values = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.str_values.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setStr_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.int_values = new ArrayList<Long>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  long _elem13;
                  _elem13 = iprot.readI64();
                  struct.int_values.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setInt_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.site_id = iprot.readI64();
              struct.setSite_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // I64_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64_value = iprot.readI64();
              struct.setI64_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str_value = iprot.readString();
              struct.setStr_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HELLO_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hello_value = iprot.readString();
              struct.setHello_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUSER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suser_value = iprot.readString();
              struct.setSuser_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.session_id = iprot.readString();
              struct.setSession_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JmoRundata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.call_data != null) {
        oprot.writeFieldBegin(CALL_DATA_FIELD_DESC);
        struct.call_data.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.errmsg != null) {
        oprot.writeFieldBegin(ERRMSG_FIELD_DESC);
        oprot.writeString(struct.errmsg);
        oprot.writeFieldEnd();
      }
      if (struct.rcode != null) {
        oprot.writeFieldBegin(RCODE_FIELD_DESC);
        oprot.writeI32(struct.rcode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERROR_NUM_FIELD_DESC);
      oprot.writeI64(struct.error_num);
      oprot.writeFieldEnd();
      if (struct.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(struct.database);
        oprot.writeFieldEnd();
      }
      if (struct.api_key != null) {
        oprot.writeFieldBegin(API_KEY_FIELD_DESC);
        oprot.writeString(struct.api_key);
        oprot.writeFieldEnd();
      }
      if (struct.str_values != null) {
        oprot.writeFieldBegin(STR_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.str_values.size()));
          for (String _iter14 : struct.str_values)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.int_values != null) {
        oprot.writeFieldBegin(INT_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.int_values.size()));
          for (long _iter15 : struct.int_values)
          {
            oprot.writeI64(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
      oprot.writeI64(struct.site_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I64_VALUE_FIELD_DESC);
      oprot.writeI64(struct.i64_value);
      oprot.writeFieldEnd();
      if (struct.str_value != null) {
        oprot.writeFieldBegin(STR_VALUE_FIELD_DESC);
        oprot.writeString(struct.str_value);
        oprot.writeFieldEnd();
      }
      if (struct.hello_value != null) {
        oprot.writeFieldBegin(HELLO_VALUE_FIELD_DESC);
        oprot.writeString(struct.hello_value);
        oprot.writeFieldEnd();
      }
      if (struct.suser_value != null) {
        oprot.writeFieldBegin(SUSER_VALUE_FIELD_DESC);
        oprot.writeString(struct.suser_value);
        oprot.writeFieldEnd();
      }
      if (struct.session_id != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.session_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JmoRundataTupleSchemeFactory implements SchemeFactory {
    public JmoRundataTupleScheme getScheme() {
      return new JmoRundataTupleScheme();
    }
  }

  private static class JmoRundataTupleScheme extends TupleScheme<JmoRundata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JmoRundata struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCall_data()) {
        optionals.set(0);
      }
      if (struct.isSetErrmsg()) {
        optionals.set(1);
      }
      if (struct.isSetRcode()) {
        optionals.set(2);
      }
      if (struct.isSetError_num()) {
        optionals.set(3);
      }
      if (struct.isSetDatabase()) {
        optionals.set(4);
      }
      if (struct.isSetApi_key()) {
        optionals.set(5);
      }
      if (struct.isSetStr_values()) {
        optionals.set(6);
      }
      if (struct.isSetInt_values()) {
        optionals.set(7);
      }
      if (struct.isSetSite_id()) {
        optionals.set(8);
      }
      if (struct.isSetI64_value()) {
        optionals.set(9);
      }
      if (struct.isSetStr_value()) {
        optionals.set(10);
      }
      if (struct.isSetHello_value()) {
        optionals.set(11);
      }
      if (struct.isSetSuser_value()) {
        optionals.set(12);
      }
      if (struct.isSetSession_id()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetCall_data()) {
        struct.call_data.write(oprot);
      }
      if (struct.isSetErrmsg()) {
        oprot.writeString(struct.errmsg);
      }
      if (struct.isSetRcode()) {
        oprot.writeI32(struct.rcode.getValue());
      }
      if (struct.isSetError_num()) {
        oprot.writeI64(struct.error_num);
      }
      if (struct.isSetDatabase()) {
        oprot.writeString(struct.database);
      }
      if (struct.isSetApi_key()) {
        oprot.writeString(struct.api_key);
      }
      if (struct.isSetStr_values()) {
        {
          oprot.writeI32(struct.str_values.size());
          for (String _iter16 : struct.str_values)
          {
            oprot.writeString(_iter16);
          }
        }
      }
      if (struct.isSetInt_values()) {
        {
          oprot.writeI32(struct.int_values.size());
          for (long _iter17 : struct.int_values)
          {
            oprot.writeI64(_iter17);
          }
        }
      }
      if (struct.isSetSite_id()) {
        oprot.writeI64(struct.site_id);
      }
      if (struct.isSetI64_value()) {
        oprot.writeI64(struct.i64_value);
      }
      if (struct.isSetStr_value()) {
        oprot.writeString(struct.str_value);
      }
      if (struct.isSetHello_value()) {
        oprot.writeString(struct.hello_value);
      }
      if (struct.isSetSuser_value()) {
        oprot.writeString(struct.suser_value);
      }
      if (struct.isSetSession_id()) {
        oprot.writeString(struct.session_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JmoRundata struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.call_data = new JmoCallData();
        struct.call_data.read(iprot);
        struct.setCall_dataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errmsg = iprot.readString();
        struct.setErrmsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rcode = JmoReturnCode.findByValue(iprot.readI32());
        struct.setRcodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.error_num = iprot.readI64();
        struct.setError_numIsSet(true);
      }
      if (incoming.get(4)) {
        struct.database = iprot.readString();
        struct.setDatabaseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.api_key = iprot.readString();
        struct.setApi_keyIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.str_values = new ArrayList<String>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            String _elem20;
            _elem20 = iprot.readString();
            struct.str_values.add(_elem20);
          }
        }
        struct.setStr_valuesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.int_values = new ArrayList<Long>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            long _elem23;
            _elem23 = iprot.readI64();
            struct.int_values.add(_elem23);
          }
        }
        struct.setInt_valuesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.site_id = iprot.readI64();
        struct.setSite_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.i64_value = iprot.readI64();
        struct.setI64_valueIsSet(true);
      }
      if (incoming.get(10)) {
        struct.str_value = iprot.readString();
        struct.setStr_valueIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hello_value = iprot.readString();
        struct.setHello_valueIsSet(true);
      }
      if (incoming.get(12)) {
        struct.suser_value = iprot.readString();
        struct.setSuser_valueIsSet(true);
      }
      if (incoming.get(13)) {
        struct.session_id = iprot.readString();
        struct.setSession_idIsSet(true);
      }
    }
  }

}

