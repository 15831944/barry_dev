/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package zykie.jimoapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JmoQueryRslt implements org.apache.thrift.TBase<JmoQueryRslt, JmoQueryRslt._Fields>, java.io.Serializable, Cloneable, Comparable<JmoQueryRslt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JmoQueryRslt");

  private static final org.apache.thrift.protocol.TField RETURN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("return_code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERRMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errmsg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_columns", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JmoQueryRsltStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JmoQueryRsltTupleSchemeFactory());
  }

  /**
   * 
   * @see JmoReturnCode
   */
  public JmoReturnCode return_code; // required
  public String errmsg; // required
  public long num_rows; // required
  public long num_columns; // required
  public List<JmoQueryColumn> columns; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see JmoReturnCode
     */
    RETURN_CODE((short)1, "return_code"),
    ERRMSG((short)2, "errmsg"),
    NUM_ROWS((short)3, "num_rows"),
    NUM_COLUMNS((short)4, "num_columns"),
    COLUMNS((short)5, "columns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETURN_CODE
          return RETURN_CODE;
        case 2: // ERRMSG
          return ERRMSG;
        case 3: // NUM_ROWS
          return NUM_ROWS;
        case 4: // NUM_COLUMNS
          return NUM_COLUMNS;
        case 5: // COLUMNS
          return COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ROWS_ISSET_ID = 0;
  private static final int __NUM_COLUMNS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETURN_CODE, new org.apache.thrift.meta_data.FieldMetaData("return_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JmoReturnCode.class)));
    tmpMap.put(_Fields.ERRMSG, new org.apache.thrift.meta_data.FieldMetaData("errmsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("num_columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JmoQueryColumn.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JmoQueryRslt.class, metaDataMap);
  }

  public JmoQueryRslt() {
  }

  public JmoQueryRslt(
    JmoReturnCode return_code,
    String errmsg,
    long num_rows,
    long num_columns,
    List<JmoQueryColumn> columns)
  {
    this();
    this.return_code = return_code;
    this.errmsg = errmsg;
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    this.num_columns = num_columns;
    setNum_columnsIsSet(true);
    this.columns = columns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JmoQueryRslt(JmoQueryRslt other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReturn_code()) {
      this.return_code = other.return_code;
    }
    if (other.isSetErrmsg()) {
      this.errmsg = other.errmsg;
    }
    this.num_rows = other.num_rows;
    this.num_columns = other.num_columns;
    if (other.isSetColumns()) {
      List<JmoQueryColumn> __this__columns = new ArrayList<JmoQueryColumn>(other.columns.size());
      for (JmoQueryColumn other_element : other.columns) {
        __this__columns.add(new JmoQueryColumn(other_element));
      }
      this.columns = __this__columns;
    }
  }

  public JmoQueryRslt deepCopy() {
    return new JmoQueryRslt(this);
  }

  @Override
  public void clear() {
    this.return_code = null;
    this.errmsg = null;
    setNum_rowsIsSet(false);
    this.num_rows = 0;
    setNum_columnsIsSet(false);
    this.num_columns = 0;
    this.columns = null;
  }

  /**
   * 
   * @see JmoReturnCode
   */
  public JmoReturnCode getReturn_code() {
    return this.return_code;
  }

  /**
   * 
   * @see JmoReturnCode
   */
  public JmoQueryRslt setReturn_code(JmoReturnCode return_code) {
    this.return_code = return_code;
    return this;
  }

  public void unsetReturn_code() {
    this.return_code = null;
  }

  /** Returns true if field return_code is set (has been assigned a value) and false otherwise */
  public boolean isSetReturn_code() {
    return this.return_code != null;
  }

  public void setReturn_codeIsSet(boolean value) {
    if (!value) {
      this.return_code = null;
    }
  }

  public String getErrmsg() {
    return this.errmsg;
  }

  public JmoQueryRslt setErrmsg(String errmsg) {
    this.errmsg = errmsg;
    return this;
  }

  public void unsetErrmsg() {
    this.errmsg = null;
  }

  /** Returns true if field errmsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrmsg() {
    return this.errmsg != null;
  }

  public void setErrmsgIsSet(boolean value) {
    if (!value) {
      this.errmsg = null;
    }
  }

  public long getNum_rows() {
    return this.num_rows;
  }

  public JmoQueryRslt setNum_rows(long num_rows) {
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    return this;
  }

  public void unsetNum_rows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  /** Returns true if field num_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  public void setNum_rowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ISSET_ID, value);
  }

  public long getNum_columns() {
    return this.num_columns;
  }

  public JmoQueryRslt setNum_columns(long num_columns) {
    this.num_columns = num_columns;
    setNum_columnsIsSet(true);
    return this;
  }

  public void unsetNum_columns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_COLUMNS_ISSET_ID);
  }

  /** Returns true if field num_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_columns() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_COLUMNS_ISSET_ID);
  }

  public void setNum_columnsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_COLUMNS_ISSET_ID, value);
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<JmoQueryColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(JmoQueryColumn elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<JmoQueryColumn>();
    }
    this.columns.add(elem);
  }

  public List<JmoQueryColumn> getColumns() {
    return this.columns;
  }

  public JmoQueryRslt setColumns(List<JmoQueryColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RETURN_CODE:
      if (value == null) {
        unsetReturn_code();
      } else {
        setReturn_code((JmoReturnCode)value);
      }
      break;

    case ERRMSG:
      if (value == null) {
        unsetErrmsg();
      } else {
        setErrmsg((String)value);
      }
      break;

    case NUM_ROWS:
      if (value == null) {
        unsetNum_rows();
      } else {
        setNum_rows((Long)value);
      }
      break;

    case NUM_COLUMNS:
      if (value == null) {
        unsetNum_columns();
      } else {
        setNum_columns((Long)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<JmoQueryColumn>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RETURN_CODE:
      return getReturn_code();

    case ERRMSG:
      return getErrmsg();

    case NUM_ROWS:
      return Long.valueOf(getNum_rows());

    case NUM_COLUMNS:
      return Long.valueOf(getNum_columns());

    case COLUMNS:
      return getColumns();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RETURN_CODE:
      return isSetReturn_code();
    case ERRMSG:
      return isSetErrmsg();
    case NUM_ROWS:
      return isSetNum_rows();
    case NUM_COLUMNS:
      return isSetNum_columns();
    case COLUMNS:
      return isSetColumns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JmoQueryRslt)
      return this.equals((JmoQueryRslt)that);
    return false;
  }

  public boolean equals(JmoQueryRslt that) {
    if (that == null)
      return false;

    boolean this_present_return_code = true && this.isSetReturn_code();
    boolean that_present_return_code = true && that.isSetReturn_code();
    if (this_present_return_code || that_present_return_code) {
      if (!(this_present_return_code && that_present_return_code))
        return false;
      if (!this.return_code.equals(that.return_code))
        return false;
    }

    boolean this_present_errmsg = true && this.isSetErrmsg();
    boolean that_present_errmsg = true && that.isSetErrmsg();
    if (this_present_errmsg || that_present_errmsg) {
      if (!(this_present_errmsg && that_present_errmsg))
        return false;
      if (!this.errmsg.equals(that.errmsg))
        return false;
    }

    boolean this_present_num_rows = true;
    boolean that_present_num_rows = true;
    if (this_present_num_rows || that_present_num_rows) {
      if (!(this_present_num_rows && that_present_num_rows))
        return false;
      if (this.num_rows != that.num_rows)
        return false;
    }

    boolean this_present_num_columns = true;
    boolean that_present_num_columns = true;
    if (this_present_num_columns || that_present_num_columns) {
      if (!(this_present_num_columns && that_present_num_columns))
        return false;
      if (this.num_columns != that.num_columns)
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JmoQueryRslt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReturn_code()).compareTo(other.isSetReturn_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturn_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.return_code, other.return_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrmsg()).compareTo(other.isSetErrmsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrmsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errmsg, other.errmsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_rows()).compareTo(other.isSetNum_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows, other.num_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_columns()).compareTo(other.isSetNum_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_columns, other.num_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JmoQueryRslt(");
    boolean first = true;

    sb.append("return_code:");
    if (this.return_code == null) {
      sb.append("null");
    } else {
      sb.append(this.return_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errmsg:");
    if (this.errmsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errmsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_rows:");
    sb.append(this.num_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_columns:");
    sb.append(this.num_columns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JmoQueryRsltStandardSchemeFactory implements SchemeFactory {
    public JmoQueryRsltStandardScheme getScheme() {
      return new JmoQueryRsltStandardScheme();
    }
  }

  private static class JmoQueryRsltStandardScheme extends StandardScheme<JmoQueryRslt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JmoQueryRslt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETURN_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.return_code = JmoReturnCode.findByValue(iprot.readI32());
              struct.setReturn_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERRMSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errmsg = iprot.readString();
              struct.setErrmsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows = iprot.readI64();
              struct.setNum_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_columns = iprot.readI64();
              struct.setNum_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.columns = new ArrayList<JmoQueryColumn>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  JmoQueryColumn _elem82;
                  _elem82 = new JmoQueryColumn();
                  _elem82.read(iprot);
                  struct.columns.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JmoQueryRslt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.return_code != null) {
        oprot.writeFieldBegin(RETURN_CODE_FIELD_DESC);
        oprot.writeI32(struct.return_code.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.errmsg != null) {
        oprot.writeFieldBegin(ERRMSG_FIELD_DESC);
        oprot.writeString(struct.errmsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
      oprot.writeI64(struct.num_rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_COLUMNS_FIELD_DESC);
      oprot.writeI64(struct.num_columns);
      oprot.writeFieldEnd();
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (JmoQueryColumn _iter83 : struct.columns)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JmoQueryRsltTupleSchemeFactory implements SchemeFactory {
    public JmoQueryRsltTupleScheme getScheme() {
      return new JmoQueryRsltTupleScheme();
    }
  }

  private static class JmoQueryRsltTupleScheme extends TupleScheme<JmoQueryRslt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JmoQueryRslt struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReturn_code()) {
        optionals.set(0);
      }
      if (struct.isSetErrmsg()) {
        optionals.set(1);
      }
      if (struct.isSetNum_rows()) {
        optionals.set(2);
      }
      if (struct.isSetNum_columns()) {
        optionals.set(3);
      }
      if (struct.isSetColumns()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetReturn_code()) {
        oprot.writeI32(struct.return_code.getValue());
      }
      if (struct.isSetErrmsg()) {
        oprot.writeString(struct.errmsg);
      }
      if (struct.isSetNum_rows()) {
        oprot.writeI64(struct.num_rows);
      }
      if (struct.isSetNum_columns()) {
        oprot.writeI64(struct.num_columns);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (JmoQueryColumn _iter84 : struct.columns)
          {
            _iter84.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JmoQueryRslt struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.return_code = JmoReturnCode.findByValue(iprot.readI32());
        struct.setReturn_codeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errmsg = iprot.readString();
        struct.setErrmsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_rows = iprot.readI64();
        struct.setNum_rowsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_columns = iprot.readI64();
        struct.setNum_columnsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.columns = new ArrayList<JmoQueryColumn>(_list85.size);
          for (int _i86 = 0; _i86 < _list85.size; ++_i86)
          {
            JmoQueryColumn _elem87;
            _elem87 = new JmoQueryColumn();
            _elem87.read(iprot);
            struct.columns.add(_elem87);
          }
        }
        struct.setColumnsIsSet(true);
      }
    }
  }

}

