/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package zykie.jimoapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JmoQueryColumn implements org.apache.thrift.TBase<JmoQueryColumn, JmoQueryColumn._Fields>, java.io.Serializable, Cloneable, Comparable<JmoQueryColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JmoQueryColumn");

  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField I16_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_values", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField I32_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_values", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField I64_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_values", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("double_values", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField STR_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("str_values", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JmoQueryColumnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JmoQueryColumnTupleSchemeFactory());
  }

  /**
   * 
   * @see JmoDataType
   */
  public JmoDataType data_type; // required
  public List<Short> i16_values; // required
  public List<Integer> i32_values; // required
  public List<Long> i64_values; // required
  public List<Double> double_values; // required
  public List<String> str_values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see JmoDataType
     */
    DATA_TYPE((short)1, "data_type"),
    I16_VALUES((short)2, "i16_values"),
    I32_VALUES((short)3, "i32_values"),
    I64_VALUES((short)4, "i64_values"),
    DOUBLE_VALUES((short)5, "double_values"),
    STR_VALUES((short)6, "str_values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_TYPE
          return DATA_TYPE;
        case 2: // I16_VALUES
          return I16_VALUES;
        case 3: // I32_VALUES
          return I32_VALUES;
        case 4: // I64_VALUES
          return I64_VALUES;
        case 5: // DOUBLE_VALUES
          return DOUBLE_VALUES;
        case 6: // STR_VALUES
          return STR_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("data_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JmoDataType.class)));
    tmpMap.put(_Fields.I16_VALUES, new org.apache.thrift.meta_data.FieldMetaData("i16_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.I32_VALUES, new org.apache.thrift.meta_data.FieldMetaData("i32_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.I64_VALUES, new org.apache.thrift.meta_data.FieldMetaData("i64_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_VALUES, new org.apache.thrift.meta_data.FieldMetaData("double_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STR_VALUES, new org.apache.thrift.meta_data.FieldMetaData("str_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JmoQueryColumn.class, metaDataMap);
  }

  public JmoQueryColumn() {
  }

  public JmoQueryColumn(
    JmoDataType data_type,
    List<Short> i16_values,
    List<Integer> i32_values,
    List<Long> i64_values,
    List<Double> double_values,
    List<String> str_values)
  {
    this();
    this.data_type = data_type;
    this.i16_values = i16_values;
    this.i32_values = i32_values;
    this.i64_values = i64_values;
    this.double_values = double_values;
    this.str_values = str_values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JmoQueryColumn(JmoQueryColumn other) {
    if (other.isSetData_type()) {
      this.data_type = other.data_type;
    }
    if (other.isSetI16_values()) {
      List<Short> __this__i16_values = new ArrayList<Short>(other.i16_values);
      this.i16_values = __this__i16_values;
    }
    if (other.isSetI32_values()) {
      List<Integer> __this__i32_values = new ArrayList<Integer>(other.i32_values);
      this.i32_values = __this__i32_values;
    }
    if (other.isSetI64_values()) {
      List<Long> __this__i64_values = new ArrayList<Long>(other.i64_values);
      this.i64_values = __this__i64_values;
    }
    if (other.isSetDouble_values()) {
      List<Double> __this__double_values = new ArrayList<Double>(other.double_values);
      this.double_values = __this__double_values;
    }
    if (other.isSetStr_values()) {
      List<String> __this__str_values = new ArrayList<String>(other.str_values);
      this.str_values = __this__str_values;
    }
  }

  public JmoQueryColumn deepCopy() {
    return new JmoQueryColumn(this);
  }

  @Override
  public void clear() {
    this.data_type = null;
    this.i16_values = null;
    this.i32_values = null;
    this.i64_values = null;
    this.double_values = null;
    this.str_values = null;
  }

  /**
   * 
   * @see JmoDataType
   */
  public JmoDataType getData_type() {
    return this.data_type;
  }

  /**
   * 
   * @see JmoDataType
   */
  public JmoQueryColumn setData_type(JmoDataType data_type) {
    this.data_type = data_type;
    return this;
  }

  public void unsetData_type() {
    this.data_type = null;
  }

  /** Returns true if field data_type is set (has been assigned a value) and false otherwise */
  public boolean isSetData_type() {
    return this.data_type != null;
  }

  public void setData_typeIsSet(boolean value) {
    if (!value) {
      this.data_type = null;
    }
  }

  public int getI16_valuesSize() {
    return (this.i16_values == null) ? 0 : this.i16_values.size();
  }

  public java.util.Iterator<Short> getI16_valuesIterator() {
    return (this.i16_values == null) ? null : this.i16_values.iterator();
  }

  public void addToI16_values(short elem) {
    if (this.i16_values == null) {
      this.i16_values = new ArrayList<Short>();
    }
    this.i16_values.add(elem);
  }

  public List<Short> getI16_values() {
    return this.i16_values;
  }

  public JmoQueryColumn setI16_values(List<Short> i16_values) {
    this.i16_values = i16_values;
    return this;
  }

  public void unsetI16_values() {
    this.i16_values = null;
  }

  /** Returns true if field i16_values is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_values() {
    return this.i16_values != null;
  }

  public void setI16_valuesIsSet(boolean value) {
    if (!value) {
      this.i16_values = null;
    }
  }

  public int getI32_valuesSize() {
    return (this.i32_values == null) ? 0 : this.i32_values.size();
  }

  public java.util.Iterator<Integer> getI32_valuesIterator() {
    return (this.i32_values == null) ? null : this.i32_values.iterator();
  }

  public void addToI32_values(int elem) {
    if (this.i32_values == null) {
      this.i32_values = new ArrayList<Integer>();
    }
    this.i32_values.add(elem);
  }

  public List<Integer> getI32_values() {
    return this.i32_values;
  }

  public JmoQueryColumn setI32_values(List<Integer> i32_values) {
    this.i32_values = i32_values;
    return this;
  }

  public void unsetI32_values() {
    this.i32_values = null;
  }

  /** Returns true if field i32_values is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_values() {
    return this.i32_values != null;
  }

  public void setI32_valuesIsSet(boolean value) {
    if (!value) {
      this.i32_values = null;
    }
  }

  public int getI64_valuesSize() {
    return (this.i64_values == null) ? 0 : this.i64_values.size();
  }

  public java.util.Iterator<Long> getI64_valuesIterator() {
    return (this.i64_values == null) ? null : this.i64_values.iterator();
  }

  public void addToI64_values(long elem) {
    if (this.i64_values == null) {
      this.i64_values = new ArrayList<Long>();
    }
    this.i64_values.add(elem);
  }

  public List<Long> getI64_values() {
    return this.i64_values;
  }

  public JmoQueryColumn setI64_values(List<Long> i64_values) {
    this.i64_values = i64_values;
    return this;
  }

  public void unsetI64_values() {
    this.i64_values = null;
  }

  /** Returns true if field i64_values is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_values() {
    return this.i64_values != null;
  }

  public void setI64_valuesIsSet(boolean value) {
    if (!value) {
      this.i64_values = null;
    }
  }

  public int getDouble_valuesSize() {
    return (this.double_values == null) ? 0 : this.double_values.size();
  }

  public java.util.Iterator<Double> getDouble_valuesIterator() {
    return (this.double_values == null) ? null : this.double_values.iterator();
  }

  public void addToDouble_values(double elem) {
    if (this.double_values == null) {
      this.double_values = new ArrayList<Double>();
    }
    this.double_values.add(elem);
  }

  public List<Double> getDouble_values() {
    return this.double_values;
  }

  public JmoQueryColumn setDouble_values(List<Double> double_values) {
    this.double_values = double_values;
    return this;
  }

  public void unsetDouble_values() {
    this.double_values = null;
  }

  /** Returns true if field double_values is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_values() {
    return this.double_values != null;
  }

  public void setDouble_valuesIsSet(boolean value) {
    if (!value) {
      this.double_values = null;
    }
  }

  public int getStr_valuesSize() {
    return (this.str_values == null) ? 0 : this.str_values.size();
  }

  public java.util.Iterator<String> getStr_valuesIterator() {
    return (this.str_values == null) ? null : this.str_values.iterator();
  }

  public void addToStr_values(String elem) {
    if (this.str_values == null) {
      this.str_values = new ArrayList<String>();
    }
    this.str_values.add(elem);
  }

  public List<String> getStr_values() {
    return this.str_values;
  }

  public JmoQueryColumn setStr_values(List<String> str_values) {
    this.str_values = str_values;
    return this;
  }

  public void unsetStr_values() {
    this.str_values = null;
  }

  /** Returns true if field str_values is set (has been assigned a value) and false otherwise */
  public boolean isSetStr_values() {
    return this.str_values != null;
  }

  public void setStr_valuesIsSet(boolean value) {
    if (!value) {
      this.str_values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_TYPE:
      if (value == null) {
        unsetData_type();
      } else {
        setData_type((JmoDataType)value);
      }
      break;

    case I16_VALUES:
      if (value == null) {
        unsetI16_values();
      } else {
        setI16_values((List<Short>)value);
      }
      break;

    case I32_VALUES:
      if (value == null) {
        unsetI32_values();
      } else {
        setI32_values((List<Integer>)value);
      }
      break;

    case I64_VALUES:
      if (value == null) {
        unsetI64_values();
      } else {
        setI64_values((List<Long>)value);
      }
      break;

    case DOUBLE_VALUES:
      if (value == null) {
        unsetDouble_values();
      } else {
        setDouble_values((List<Double>)value);
      }
      break;

    case STR_VALUES:
      if (value == null) {
        unsetStr_values();
      } else {
        setStr_values((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_TYPE:
      return getData_type();

    case I16_VALUES:
      return getI16_values();

    case I32_VALUES:
      return getI32_values();

    case I64_VALUES:
      return getI64_values();

    case DOUBLE_VALUES:
      return getDouble_values();

    case STR_VALUES:
      return getStr_values();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_TYPE:
      return isSetData_type();
    case I16_VALUES:
      return isSetI16_values();
    case I32_VALUES:
      return isSetI32_values();
    case I64_VALUES:
      return isSetI64_values();
    case DOUBLE_VALUES:
      return isSetDouble_values();
    case STR_VALUES:
      return isSetStr_values();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JmoQueryColumn)
      return this.equals((JmoQueryColumn)that);
    return false;
  }

  public boolean equals(JmoQueryColumn that) {
    if (that == null)
      return false;

    boolean this_present_data_type = true && this.isSetData_type();
    boolean that_present_data_type = true && that.isSetData_type();
    if (this_present_data_type || that_present_data_type) {
      if (!(this_present_data_type && that_present_data_type))
        return false;
      if (!this.data_type.equals(that.data_type))
        return false;
    }

    boolean this_present_i16_values = true && this.isSetI16_values();
    boolean that_present_i16_values = true && that.isSetI16_values();
    if (this_present_i16_values || that_present_i16_values) {
      if (!(this_present_i16_values && that_present_i16_values))
        return false;
      if (!this.i16_values.equals(that.i16_values))
        return false;
    }

    boolean this_present_i32_values = true && this.isSetI32_values();
    boolean that_present_i32_values = true && that.isSetI32_values();
    if (this_present_i32_values || that_present_i32_values) {
      if (!(this_present_i32_values && that_present_i32_values))
        return false;
      if (!this.i32_values.equals(that.i32_values))
        return false;
    }

    boolean this_present_i64_values = true && this.isSetI64_values();
    boolean that_present_i64_values = true && that.isSetI64_values();
    if (this_present_i64_values || that_present_i64_values) {
      if (!(this_present_i64_values && that_present_i64_values))
        return false;
      if (!this.i64_values.equals(that.i64_values))
        return false;
    }

    boolean this_present_double_values = true && this.isSetDouble_values();
    boolean that_present_double_values = true && that.isSetDouble_values();
    if (this_present_double_values || that_present_double_values) {
      if (!(this_present_double_values && that_present_double_values))
        return false;
      if (!this.double_values.equals(that.double_values))
        return false;
    }

    boolean this_present_str_values = true && this.isSetStr_values();
    boolean that_present_str_values = true && that.isSetStr_values();
    if (this_present_str_values || that_present_str_values) {
      if (!(this_present_str_values && that_present_str_values))
        return false;
      if (!this.str_values.equals(that.str_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JmoQueryColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetData_type()).compareTo(other.isSetData_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_type, other.data_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_values()).compareTo(other.isSetI16_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_values, other.i16_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_values()).compareTo(other.isSetI32_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_values, other.i32_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_values()).compareTo(other.isSetI64_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_values, other.i64_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_values()).compareTo(other.isSetDouble_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_values, other.double_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr_values()).compareTo(other.isSetStr_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str_values, other.str_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JmoQueryColumn(");
    boolean first = true;

    sb.append("data_type:");
    if (this.data_type == null) {
      sb.append("null");
    } else {
      sb.append(this.data_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16_values:");
    if (this.i16_values == null) {
      sb.append("null");
    } else {
      sb.append(this.i16_values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32_values:");
    if (this.i32_values == null) {
      sb.append("null");
    } else {
      sb.append(this.i32_values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_values:");
    if (this.i64_values == null) {
      sb.append("null");
    } else {
      sb.append(this.i64_values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_values:");
    if (this.double_values == null) {
      sb.append("null");
    } else {
      sb.append(this.double_values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str_values:");
    if (this.str_values == null) {
      sb.append("null");
    } else {
      sb.append(this.str_values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JmoQueryColumnStandardSchemeFactory implements SchemeFactory {
    public JmoQueryColumnStandardScheme getScheme() {
      return new JmoQueryColumnStandardScheme();
    }
  }

  private static class JmoQueryColumnStandardScheme extends StandardScheme<JmoQueryColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JmoQueryColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_type = JmoDataType.findByValue(iprot.readI32());
              struct.setData_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I16_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.i16_values = new ArrayList<Short>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  short _elem42;
                  _elem42 = iprot.readI16();
                  struct.i16_values.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setI16_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I32_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.i32_values = new ArrayList<Integer>(_list43.size);
                for (int _i44 = 0; _i44 < _list43.size; ++_i44)
                {
                  int _elem45;
                  _elem45 = iprot.readI32();
                  struct.i32_values.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setI32_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I64_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.i64_values = new ArrayList<Long>(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  long _elem48;
                  _elem48 = iprot.readI64();
                  struct.i64_values.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setI64_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOUBLE_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.double_values = new ArrayList<Double>(_list49.size);
                for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                {
                  double _elem51;
                  _elem51 = iprot.readDouble();
                  struct.double_values.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setDouble_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STR_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.str_values = new ArrayList<String>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  String _elem54;
                  _elem54 = iprot.readString();
                  struct.str_values.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setStr_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JmoQueryColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data_type != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.data_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.i16_values != null) {
        oprot.writeFieldBegin(I16_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.i16_values.size()));
          for (short _iter55 : struct.i16_values)
          {
            oprot.writeI16(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i32_values != null) {
        oprot.writeFieldBegin(I32_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.i32_values.size()));
          for (int _iter56 : struct.i32_values)
          {
            oprot.writeI32(_iter56);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i64_values != null) {
        oprot.writeFieldBegin(I64_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.i64_values.size()));
          for (long _iter57 : struct.i64_values)
          {
            oprot.writeI64(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.double_values != null) {
        oprot.writeFieldBegin(DOUBLE_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.double_values.size()));
          for (double _iter58 : struct.double_values)
          {
            oprot.writeDouble(_iter58);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.str_values != null) {
        oprot.writeFieldBegin(STR_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.str_values.size()));
          for (String _iter59 : struct.str_values)
          {
            oprot.writeString(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JmoQueryColumnTupleSchemeFactory implements SchemeFactory {
    public JmoQueryColumnTupleScheme getScheme() {
      return new JmoQueryColumnTupleScheme();
    }
  }

  private static class JmoQueryColumnTupleScheme extends TupleScheme<JmoQueryColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JmoQueryColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetData_type()) {
        optionals.set(0);
      }
      if (struct.isSetI16_values()) {
        optionals.set(1);
      }
      if (struct.isSetI32_values()) {
        optionals.set(2);
      }
      if (struct.isSetI64_values()) {
        optionals.set(3);
      }
      if (struct.isSetDouble_values()) {
        optionals.set(4);
      }
      if (struct.isSetStr_values()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetData_type()) {
        oprot.writeI32(struct.data_type.getValue());
      }
      if (struct.isSetI16_values()) {
        {
          oprot.writeI32(struct.i16_values.size());
          for (short _iter60 : struct.i16_values)
          {
            oprot.writeI16(_iter60);
          }
        }
      }
      if (struct.isSetI32_values()) {
        {
          oprot.writeI32(struct.i32_values.size());
          for (int _iter61 : struct.i32_values)
          {
            oprot.writeI32(_iter61);
          }
        }
      }
      if (struct.isSetI64_values()) {
        {
          oprot.writeI32(struct.i64_values.size());
          for (long _iter62 : struct.i64_values)
          {
            oprot.writeI64(_iter62);
          }
        }
      }
      if (struct.isSetDouble_values()) {
        {
          oprot.writeI32(struct.double_values.size());
          for (double _iter63 : struct.double_values)
          {
            oprot.writeDouble(_iter63);
          }
        }
      }
      if (struct.isSetStr_values()) {
        {
          oprot.writeI32(struct.str_values.size());
          for (String _iter64 : struct.str_values)
          {
            oprot.writeString(_iter64);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JmoQueryColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.data_type = JmoDataType.findByValue(iprot.readI32());
        struct.setData_typeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.i16_values = new ArrayList<Short>(_list65.size);
          for (int _i66 = 0; _i66 < _list65.size; ++_i66)
          {
            short _elem67;
            _elem67 = iprot.readI16();
            struct.i16_values.add(_elem67);
          }
        }
        struct.setI16_valuesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.i32_values = new ArrayList<Integer>(_list68.size);
          for (int _i69 = 0; _i69 < _list68.size; ++_i69)
          {
            int _elem70;
            _elem70 = iprot.readI32();
            struct.i32_values.add(_elem70);
          }
        }
        struct.setI32_valuesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.i64_values = new ArrayList<Long>(_list71.size);
          for (int _i72 = 0; _i72 < _list71.size; ++_i72)
          {
            long _elem73;
            _elem73 = iprot.readI64();
            struct.i64_values.add(_elem73);
          }
        }
        struct.setI64_valuesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.double_values = new ArrayList<Double>(_list74.size);
          for (int _i75 = 0; _i75 < _list74.size; ++_i75)
          {
            double _elem76;
            _elem76 = iprot.readDouble();
            struct.double_values.add(_elem76);
          }
        }
        struct.setDouble_valuesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.str_values = new ArrayList<String>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            String _elem79;
            _elem79 = iprot.readString();
            struct.str_values.add(_elem79);
          }
        }
        struct.setStr_valuesIsSet(true);
      }
    }
  }

}

