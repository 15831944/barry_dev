/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package zykie.jimoapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JmoQueryCond implements org.apache.thrift.TBase<JmoQueryCond, JmoQueryCond._Fields>, java.io.Serializable, Cloneable, Comparable<JmoQueryCond> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JmoQueryCond");

  private static final org.apache.thrift.protocol.TField OPR_FIELD_DESC = new org.apache.thrift.protocol.TField("opr", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STR_VALUE1_FIELD_DESC = new org.apache.thrift.protocol.TField("str_value1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STR_VALUE2_FIELD_DESC = new org.apache.thrift.protocol.TField("str_value2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INT_VALUE1_FIELD_DESC = new org.apache.thrift.protocol.TField("int_value1", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INT_VALUE2_FIELD_DESC = new org.apache.thrift.protocol.TField("int_value2", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField IIL_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("iil_idx", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FINISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("finished", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IDX_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("idx_values", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JmoQueryCondStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JmoQueryCondTupleSchemeFactory());
  }

  /**
   * 
   * @see JmoQueryOperator
   */
  public JmoQueryOperator opr; // required
  public String str_value1; // required
  public String str_value2; // required
  public long int_value1; // required
  public long int_value2; // required
  public long index; // required
  public long iil_idx; // required
  public boolean finished; // required
  public List<Long> idx_values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see JmoQueryOperator
     */
    OPR((short)1, "opr"),
    STR_VALUE1((short)2, "str_value1"),
    STR_VALUE2((short)3, "str_value2"),
    INT_VALUE1((short)4, "int_value1"),
    INT_VALUE2((short)5, "int_value2"),
    INDEX((short)6, "index"),
    IIL_IDX((short)7, "iil_idx"),
    FINISHED((short)8, "finished"),
    IDX_VALUES((short)9, "idx_values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPR
          return OPR;
        case 2: // STR_VALUE1
          return STR_VALUE1;
        case 3: // STR_VALUE2
          return STR_VALUE2;
        case 4: // INT_VALUE1
          return INT_VALUE1;
        case 5: // INT_VALUE2
          return INT_VALUE2;
        case 6: // INDEX
          return INDEX;
        case 7: // IIL_IDX
          return IIL_IDX;
        case 8: // FINISHED
          return FINISHED;
        case 9: // IDX_VALUES
          return IDX_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INT_VALUE1_ISSET_ID = 0;
  private static final int __INT_VALUE2_ISSET_ID = 1;
  private static final int __INDEX_ISSET_ID = 2;
  private static final int __IIL_IDX_ISSET_ID = 3;
  private static final int __FINISHED_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPR, new org.apache.thrift.meta_data.FieldMetaData("opr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JmoQueryOperator.class)));
    tmpMap.put(_Fields.STR_VALUE1, new org.apache.thrift.meta_data.FieldMetaData("str_value1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR_VALUE2, new org.apache.thrift.meta_data.FieldMetaData("str_value2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INT_VALUE1, new org.apache.thrift.meta_data.FieldMetaData("int_value1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INT_VALUE2, new org.apache.thrift.meta_data.FieldMetaData("int_value2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IIL_IDX, new org.apache.thrift.meta_data.FieldMetaData("iil_idx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISHED, new org.apache.thrift.meta_data.FieldMetaData("finished", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IDX_VALUES, new org.apache.thrift.meta_data.FieldMetaData("idx_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JmoQueryCond.class, metaDataMap);
  }

  public JmoQueryCond() {
  }

  public JmoQueryCond(
    JmoQueryOperator opr,
    String str_value1,
    String str_value2,
    long int_value1,
    long int_value2,
    long index,
    long iil_idx,
    boolean finished,
    List<Long> idx_values)
  {
    this();
    this.opr = opr;
    this.str_value1 = str_value1;
    this.str_value2 = str_value2;
    this.int_value1 = int_value1;
    setInt_value1IsSet(true);
    this.int_value2 = int_value2;
    setInt_value2IsSet(true);
    this.index = index;
    setIndexIsSet(true);
    this.iil_idx = iil_idx;
    setIil_idxIsSet(true);
    this.finished = finished;
    setFinishedIsSet(true);
    this.idx_values = idx_values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JmoQueryCond(JmoQueryCond other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOpr()) {
      this.opr = other.opr;
    }
    if (other.isSetStr_value1()) {
      this.str_value1 = other.str_value1;
    }
    if (other.isSetStr_value2()) {
      this.str_value2 = other.str_value2;
    }
    this.int_value1 = other.int_value1;
    this.int_value2 = other.int_value2;
    this.index = other.index;
    this.iil_idx = other.iil_idx;
    this.finished = other.finished;
    if (other.isSetIdx_values()) {
      List<Long> __this__idx_values = new ArrayList<Long>(other.idx_values);
      this.idx_values = __this__idx_values;
    }
  }

  public JmoQueryCond deepCopy() {
    return new JmoQueryCond(this);
  }

  @Override
  public void clear() {
    this.opr = null;
    this.str_value1 = null;
    this.str_value2 = null;
    setInt_value1IsSet(false);
    this.int_value1 = 0;
    setInt_value2IsSet(false);
    this.int_value2 = 0;
    setIndexIsSet(false);
    this.index = 0;
    setIil_idxIsSet(false);
    this.iil_idx = 0;
    setFinishedIsSet(false);
    this.finished = false;
    this.idx_values = null;
  }

  /**
   * 
   * @see JmoQueryOperator
   */
  public JmoQueryOperator getOpr() {
    return this.opr;
  }

  /**
   * 
   * @see JmoQueryOperator
   */
  public JmoQueryCond setOpr(JmoQueryOperator opr) {
    this.opr = opr;
    return this;
  }

  public void unsetOpr() {
    this.opr = null;
  }

  /** Returns true if field opr is set (has been assigned a value) and false otherwise */
  public boolean isSetOpr() {
    return this.opr != null;
  }

  public void setOprIsSet(boolean value) {
    if (!value) {
      this.opr = null;
    }
  }

  public String getStr_value1() {
    return this.str_value1;
  }

  public JmoQueryCond setStr_value1(String str_value1) {
    this.str_value1 = str_value1;
    return this;
  }

  public void unsetStr_value1() {
    this.str_value1 = null;
  }

  /** Returns true if field str_value1 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr_value1() {
    return this.str_value1 != null;
  }

  public void setStr_value1IsSet(boolean value) {
    if (!value) {
      this.str_value1 = null;
    }
  }

  public String getStr_value2() {
    return this.str_value2;
  }

  public JmoQueryCond setStr_value2(String str_value2) {
    this.str_value2 = str_value2;
    return this;
  }

  public void unsetStr_value2() {
    this.str_value2 = null;
  }

  /** Returns true if field str_value2 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr_value2() {
    return this.str_value2 != null;
  }

  public void setStr_value2IsSet(boolean value) {
    if (!value) {
      this.str_value2 = null;
    }
  }

  public long getInt_value1() {
    return this.int_value1;
  }

  public JmoQueryCond setInt_value1(long int_value1) {
    this.int_value1 = int_value1;
    setInt_value1IsSet(true);
    return this;
  }

  public void unsetInt_value1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT_VALUE1_ISSET_ID);
  }

  /** Returns true if field int_value1 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_value1() {
    return EncodingUtils.testBit(__isset_bitfield, __INT_VALUE1_ISSET_ID);
  }

  public void setInt_value1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT_VALUE1_ISSET_ID, value);
  }

  public long getInt_value2() {
    return this.int_value2;
  }

  public JmoQueryCond setInt_value2(long int_value2) {
    this.int_value2 = int_value2;
    setInt_value2IsSet(true);
    return this;
  }

  public void unsetInt_value2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT_VALUE2_ISSET_ID);
  }

  /** Returns true if field int_value2 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_value2() {
    return EncodingUtils.testBit(__isset_bitfield, __INT_VALUE2_ISSET_ID);
  }

  public void setInt_value2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT_VALUE2_ISSET_ID, value);
  }

  public long getIndex() {
    return this.index;
  }

  public JmoQueryCond setIndex(long index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public long getIil_idx() {
    return this.iil_idx;
  }

  public JmoQueryCond setIil_idx(long iil_idx) {
    this.iil_idx = iil_idx;
    setIil_idxIsSet(true);
    return this;
  }

  public void unsetIil_idx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IIL_IDX_ISSET_ID);
  }

  /** Returns true if field iil_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetIil_idx() {
    return EncodingUtils.testBit(__isset_bitfield, __IIL_IDX_ISSET_ID);
  }

  public void setIil_idxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IIL_IDX_ISSET_ID, value);
  }

  public boolean isFinished() {
    return this.finished;
  }

  public JmoQueryCond setFinished(boolean finished) {
    this.finished = finished;
    setFinishedIsSet(true);
    return this;
  }

  public void unsetFinished() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHED_ISSET_ID);
  }

  /** Returns true if field finished is set (has been assigned a value) and false otherwise */
  public boolean isSetFinished() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHED_ISSET_ID);
  }

  public void setFinishedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHED_ISSET_ID, value);
  }

  public int getIdx_valuesSize() {
    return (this.idx_values == null) ? 0 : this.idx_values.size();
  }

  public java.util.Iterator<Long> getIdx_valuesIterator() {
    return (this.idx_values == null) ? null : this.idx_values.iterator();
  }

  public void addToIdx_values(long elem) {
    if (this.idx_values == null) {
      this.idx_values = new ArrayList<Long>();
    }
    this.idx_values.add(elem);
  }

  public List<Long> getIdx_values() {
    return this.idx_values;
  }

  public JmoQueryCond setIdx_values(List<Long> idx_values) {
    this.idx_values = idx_values;
    return this;
  }

  public void unsetIdx_values() {
    this.idx_values = null;
  }

  /** Returns true if field idx_values is set (has been assigned a value) and false otherwise */
  public boolean isSetIdx_values() {
    return this.idx_values != null;
  }

  public void setIdx_valuesIsSet(boolean value) {
    if (!value) {
      this.idx_values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPR:
      if (value == null) {
        unsetOpr();
      } else {
        setOpr((JmoQueryOperator)value);
      }
      break;

    case STR_VALUE1:
      if (value == null) {
        unsetStr_value1();
      } else {
        setStr_value1((String)value);
      }
      break;

    case STR_VALUE2:
      if (value == null) {
        unsetStr_value2();
      } else {
        setStr_value2((String)value);
      }
      break;

    case INT_VALUE1:
      if (value == null) {
        unsetInt_value1();
      } else {
        setInt_value1((Long)value);
      }
      break;

    case INT_VALUE2:
      if (value == null) {
        unsetInt_value2();
      } else {
        setInt_value2((Long)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Long)value);
      }
      break;

    case IIL_IDX:
      if (value == null) {
        unsetIil_idx();
      } else {
        setIil_idx((Long)value);
      }
      break;

    case FINISHED:
      if (value == null) {
        unsetFinished();
      } else {
        setFinished((Boolean)value);
      }
      break;

    case IDX_VALUES:
      if (value == null) {
        unsetIdx_values();
      } else {
        setIdx_values((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPR:
      return getOpr();

    case STR_VALUE1:
      return getStr_value1();

    case STR_VALUE2:
      return getStr_value2();

    case INT_VALUE1:
      return Long.valueOf(getInt_value1());

    case INT_VALUE2:
      return Long.valueOf(getInt_value2());

    case INDEX:
      return Long.valueOf(getIndex());

    case IIL_IDX:
      return Long.valueOf(getIil_idx());

    case FINISHED:
      return Boolean.valueOf(isFinished());

    case IDX_VALUES:
      return getIdx_values();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPR:
      return isSetOpr();
    case STR_VALUE1:
      return isSetStr_value1();
    case STR_VALUE2:
      return isSetStr_value2();
    case INT_VALUE1:
      return isSetInt_value1();
    case INT_VALUE2:
      return isSetInt_value2();
    case INDEX:
      return isSetIndex();
    case IIL_IDX:
      return isSetIil_idx();
    case FINISHED:
      return isSetFinished();
    case IDX_VALUES:
      return isSetIdx_values();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JmoQueryCond)
      return this.equals((JmoQueryCond)that);
    return false;
  }

  public boolean equals(JmoQueryCond that) {
    if (that == null)
      return false;

    boolean this_present_opr = true && this.isSetOpr();
    boolean that_present_opr = true && that.isSetOpr();
    if (this_present_opr || that_present_opr) {
      if (!(this_present_opr && that_present_opr))
        return false;
      if (!this.opr.equals(that.opr))
        return false;
    }

    boolean this_present_str_value1 = true && this.isSetStr_value1();
    boolean that_present_str_value1 = true && that.isSetStr_value1();
    if (this_present_str_value1 || that_present_str_value1) {
      if (!(this_present_str_value1 && that_present_str_value1))
        return false;
      if (!this.str_value1.equals(that.str_value1))
        return false;
    }

    boolean this_present_str_value2 = true && this.isSetStr_value2();
    boolean that_present_str_value2 = true && that.isSetStr_value2();
    if (this_present_str_value2 || that_present_str_value2) {
      if (!(this_present_str_value2 && that_present_str_value2))
        return false;
      if (!this.str_value2.equals(that.str_value2))
        return false;
    }

    boolean this_present_int_value1 = true;
    boolean that_present_int_value1 = true;
    if (this_present_int_value1 || that_present_int_value1) {
      if (!(this_present_int_value1 && that_present_int_value1))
        return false;
      if (this.int_value1 != that.int_value1)
        return false;
    }

    boolean this_present_int_value2 = true;
    boolean that_present_int_value2 = true;
    if (this_present_int_value2 || that_present_int_value2) {
      if (!(this_present_int_value2 && that_present_int_value2))
        return false;
      if (this.int_value2 != that.int_value2)
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_iil_idx = true;
    boolean that_present_iil_idx = true;
    if (this_present_iil_idx || that_present_iil_idx) {
      if (!(this_present_iil_idx && that_present_iil_idx))
        return false;
      if (this.iil_idx != that.iil_idx)
        return false;
    }

    boolean this_present_finished = true;
    boolean that_present_finished = true;
    if (this_present_finished || that_present_finished) {
      if (!(this_present_finished && that_present_finished))
        return false;
      if (this.finished != that.finished)
        return false;
    }

    boolean this_present_idx_values = true && this.isSetIdx_values();
    boolean that_present_idx_values = true && that.isSetIdx_values();
    if (this_present_idx_values || that_present_idx_values) {
      if (!(this_present_idx_values && that_present_idx_values))
        return false;
      if (!this.idx_values.equals(that.idx_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JmoQueryCond other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOpr()).compareTo(other.isSetOpr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opr, other.opr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr_value1()).compareTo(other.isSetStr_value1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr_value1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str_value1, other.str_value1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr_value2()).compareTo(other.isSetStr_value2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr_value2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str_value2, other.str_value2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_value1()).compareTo(other.isSetInt_value1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_value1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_value1, other.int_value1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_value2()).compareTo(other.isSetInt_value2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_value2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_value2, other.int_value2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIil_idx()).compareTo(other.isSetIil_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIil_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iil_idx, other.iil_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinished()).compareTo(other.isSetFinished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finished, other.finished);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdx_values()).compareTo(other.isSetIdx_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdx_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idx_values, other.idx_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JmoQueryCond(");
    boolean first = true;

    sb.append("opr:");
    if (this.opr == null) {
      sb.append("null");
    } else {
      sb.append(this.opr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str_value1:");
    if (this.str_value1 == null) {
      sb.append("null");
    } else {
      sb.append(this.str_value1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str_value2:");
    if (this.str_value2 == null) {
      sb.append("null");
    } else {
      sb.append(this.str_value2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("int_value1:");
    sb.append(this.int_value1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("int_value2:");
    sb.append(this.int_value2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iil_idx:");
    sb.append(this.iil_idx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finished:");
    sb.append(this.finished);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idx_values:");
    if (this.idx_values == null) {
      sb.append("null");
    } else {
      sb.append(this.idx_values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JmoQueryCondStandardSchemeFactory implements SchemeFactory {
    public JmoQueryCondStandardScheme getScheme() {
      return new JmoQueryCondStandardScheme();
    }
  }

  private static class JmoQueryCondStandardScheme extends StandardScheme<JmoQueryCond> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JmoQueryCond struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opr = JmoQueryOperator.findByValue(iprot.readI32());
              struct.setOprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STR_VALUE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str_value1 = iprot.readString();
              struct.setStr_value1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STR_VALUE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str_value2 = iprot.readString();
              struct.setStr_value2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INT_VALUE1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int_value1 = iprot.readI64();
              struct.setInt_value1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT_VALUE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int_value2 = iprot.readI64();
              struct.setInt_value2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index = iprot.readI64();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IIL_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.iil_idx = iprot.readI64();
              struct.setIil_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FINISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.finished = iprot.readBool();
              struct.setFinishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IDX_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.idx_values = new ArrayList<Long>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  long _elem26;
                  _elem26 = iprot.readI64();
                  struct.idx_values.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setIdx_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JmoQueryCond struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.opr != null) {
        oprot.writeFieldBegin(OPR_FIELD_DESC);
        oprot.writeI32(struct.opr.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.str_value1 != null) {
        oprot.writeFieldBegin(STR_VALUE1_FIELD_DESC);
        oprot.writeString(struct.str_value1);
        oprot.writeFieldEnd();
      }
      if (struct.str_value2 != null) {
        oprot.writeFieldBegin(STR_VALUE2_FIELD_DESC);
        oprot.writeString(struct.str_value2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INT_VALUE1_FIELD_DESC);
      oprot.writeI64(struct.int_value1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_VALUE2_FIELD_DESC);
      oprot.writeI64(struct.int_value2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI64(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IIL_IDX_FIELD_DESC);
      oprot.writeI64(struct.iil_idx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISHED_FIELD_DESC);
      oprot.writeBool(struct.finished);
      oprot.writeFieldEnd();
      if (struct.idx_values != null) {
        oprot.writeFieldBegin(IDX_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.idx_values.size()));
          for (long _iter27 : struct.idx_values)
          {
            oprot.writeI64(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JmoQueryCondTupleSchemeFactory implements SchemeFactory {
    public JmoQueryCondTupleScheme getScheme() {
      return new JmoQueryCondTupleScheme();
    }
  }

  private static class JmoQueryCondTupleScheme extends TupleScheme<JmoQueryCond> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JmoQueryCond struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOpr()) {
        optionals.set(0);
      }
      if (struct.isSetStr_value1()) {
        optionals.set(1);
      }
      if (struct.isSetStr_value2()) {
        optionals.set(2);
      }
      if (struct.isSetInt_value1()) {
        optionals.set(3);
      }
      if (struct.isSetInt_value2()) {
        optionals.set(4);
      }
      if (struct.isSetIndex()) {
        optionals.set(5);
      }
      if (struct.isSetIil_idx()) {
        optionals.set(6);
      }
      if (struct.isSetFinished()) {
        optionals.set(7);
      }
      if (struct.isSetIdx_values()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetOpr()) {
        oprot.writeI32(struct.opr.getValue());
      }
      if (struct.isSetStr_value1()) {
        oprot.writeString(struct.str_value1);
      }
      if (struct.isSetStr_value2()) {
        oprot.writeString(struct.str_value2);
      }
      if (struct.isSetInt_value1()) {
        oprot.writeI64(struct.int_value1);
      }
      if (struct.isSetInt_value2()) {
        oprot.writeI64(struct.int_value2);
      }
      if (struct.isSetIndex()) {
        oprot.writeI64(struct.index);
      }
      if (struct.isSetIil_idx()) {
        oprot.writeI64(struct.iil_idx);
      }
      if (struct.isSetFinished()) {
        oprot.writeBool(struct.finished);
      }
      if (struct.isSetIdx_values()) {
        {
          oprot.writeI32(struct.idx_values.size());
          for (long _iter28 : struct.idx_values)
          {
            oprot.writeI64(_iter28);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JmoQueryCond struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.opr = JmoQueryOperator.findByValue(iprot.readI32());
        struct.setOprIsSet(true);
      }
      if (incoming.get(1)) {
        struct.str_value1 = iprot.readString();
        struct.setStr_value1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.str_value2 = iprot.readString();
        struct.setStr_value2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.int_value1 = iprot.readI64();
        struct.setInt_value1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.int_value2 = iprot.readI64();
        struct.setInt_value2IsSet(true);
      }
      if (incoming.get(5)) {
        struct.index = iprot.readI64();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(6)) {
        struct.iil_idx = iprot.readI64();
        struct.setIil_idxIsSet(true);
      }
      if (incoming.get(7)) {
        struct.finished = iprot.readBool();
        struct.setFinishedIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.idx_values = new ArrayList<Long>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            long _elem31;
            _elem31 = iprot.readI64();
            struct.idx_values.add(_elem31);
          }
        }
        struct.setIdx_valuesIsSet(true);
      }
    }
  }

}

