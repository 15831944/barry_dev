/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package zykie.jimoapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JmoCallData implements org.apache.thrift.TBase<JmoCallData, JmoCallData._Fields>, java.io.Serializable, Cloneable, Comparable<JmoCallData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JmoCallData");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("api_key", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("user_domain", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("app_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("site_id", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STR_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("str_values", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JmoCallDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JmoCallDataTupleSchemeFactory());
  }

  public String session_id; // required
  public String database; // required
  public String api_key; // required
  public String user_domain; // required
  public String user_name; // required
  public long userid; // required
  public String app_name; // required
  public long site_id; // required
  public long start_time; // required
  public List<String> str_values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "session_id"),
    DATABASE((short)2, "database"),
    API_KEY((short)3, "api_key"),
    USER_DOMAIN((short)4, "user_domain"),
    USER_NAME((short)5, "user_name"),
    USERID((short)6, "userid"),
    APP_NAME((short)7, "app_name"),
    SITE_ID((short)8, "site_id"),
    START_TIME((short)9, "start_time"),
    STR_VALUES((short)10, "str_values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // DATABASE
          return DATABASE;
        case 3: // API_KEY
          return API_KEY;
        case 4: // USER_DOMAIN
          return USER_DOMAIN;
        case 5: // USER_NAME
          return USER_NAME;
        case 6: // USERID
          return USERID;
        case 7: // APP_NAME
          return APP_NAME;
        case 8: // SITE_ID
          return SITE_ID;
        case 9: // START_TIME
          return START_TIME;
        case 10: // STR_VALUES
          return STR_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __SITE_ID_ISSET_ID = 1;
  private static final int __START_TIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("api_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("user_domain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("app_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("site_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STR_VALUES, new org.apache.thrift.meta_data.FieldMetaData("str_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JmoCallData.class, metaDataMap);
  }

  public JmoCallData() {
  }

  public JmoCallData(
    String session_id,
    String database,
    String api_key,
    String user_domain,
    String user_name,
    long userid,
    String app_name,
    long site_id,
    long start_time,
    List<String> str_values)
  {
    this();
    this.session_id = session_id;
    this.database = database;
    this.api_key = api_key;
    this.user_domain = user_domain;
    this.user_name = user_name;
    this.userid = userid;
    setUseridIsSet(true);
    this.app_name = app_name;
    this.site_id = site_id;
    setSite_idIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.str_values = str_values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JmoCallData(JmoCallData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSession_id()) {
      this.session_id = other.session_id;
    }
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetApi_key()) {
      this.api_key = other.api_key;
    }
    if (other.isSetUser_domain()) {
      this.user_domain = other.user_domain;
    }
    if (other.isSetUser_name()) {
      this.user_name = other.user_name;
    }
    this.userid = other.userid;
    if (other.isSetApp_name()) {
      this.app_name = other.app_name;
    }
    this.site_id = other.site_id;
    this.start_time = other.start_time;
    if (other.isSetStr_values()) {
      List<String> __this__str_values = new ArrayList<String>(other.str_values);
      this.str_values = __this__str_values;
    }
  }

  public JmoCallData deepCopy() {
    return new JmoCallData(this);
  }

  @Override
  public void clear() {
    this.session_id = null;
    this.database = null;
    this.api_key = null;
    this.user_domain = null;
    this.user_name = null;
    setUseridIsSet(false);
    this.userid = 0;
    this.app_name = null;
    setSite_idIsSet(false);
    this.site_id = 0;
    setStart_timeIsSet(false);
    this.start_time = 0;
    this.str_values = null;
  }

  public String getSession_id() {
    return this.session_id;
  }

  public JmoCallData setSession_id(String session_id) {
    this.session_id = session_id;
    return this;
  }

  public void unsetSession_id() {
    this.session_id = null;
  }

  /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSession_id() {
    return this.session_id != null;
  }

  public void setSession_idIsSet(boolean value) {
    if (!value) {
      this.session_id = null;
    }
  }

  public String getDatabase() {
    return this.database;
  }

  public JmoCallData setDatabase(String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  public String getApi_key() {
    return this.api_key;
  }

  public JmoCallData setApi_key(String api_key) {
    this.api_key = api_key;
    return this;
  }

  public void unsetApi_key() {
    this.api_key = null;
  }

  /** Returns true if field api_key is set (has been assigned a value) and false otherwise */
  public boolean isSetApi_key() {
    return this.api_key != null;
  }

  public void setApi_keyIsSet(boolean value) {
    if (!value) {
      this.api_key = null;
    }
  }

  public String getUser_domain() {
    return this.user_domain;
  }

  public JmoCallData setUser_domain(String user_domain) {
    this.user_domain = user_domain;
    return this;
  }

  public void unsetUser_domain() {
    this.user_domain = null;
  }

  /** Returns true if field user_domain is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_domain() {
    return this.user_domain != null;
  }

  public void setUser_domainIsSet(boolean value) {
    if (!value) {
      this.user_domain = null;
    }
  }

  public String getUser_name() {
    return this.user_name;
  }

  public JmoCallData setUser_name(String user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean value) {
    if (!value) {
      this.user_name = null;
    }
  }

  public long getUserid() {
    return this.userid;
  }

  public JmoCallData setUserid(long userid) {
    this.userid = userid;
    setUseridIsSet(true);
    return this;
  }

  public void unsetUserid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUseridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getApp_name() {
    return this.app_name;
  }

  public JmoCallData setApp_name(String app_name) {
    this.app_name = app_name;
    return this;
  }

  public void unsetApp_name() {
    this.app_name = null;
  }

  /** Returns true if field app_name is set (has been assigned a value) and false otherwise */
  public boolean isSetApp_name() {
    return this.app_name != null;
  }

  public void setApp_nameIsSet(boolean value) {
    if (!value) {
      this.app_name = null;
    }
  }

  public long getSite_id() {
    return this.site_id;
  }

  public JmoCallData setSite_id(long site_id) {
    this.site_id = site_id;
    setSite_idIsSet(true);
    return this;
  }

  public void unsetSite_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITE_ID_ISSET_ID);
  }

  /** Returns true if field site_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSite_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SITE_ID_ISSET_ID);
  }

  public void setSite_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITE_ID_ISSET_ID, value);
  }

  public long getStart_time() {
    return this.start_time;
  }

  public JmoCallData setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_time() {
    return EncodingUtils.testBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_TIME_ISSET_ID, value);
  }

  public int getStr_valuesSize() {
    return (this.str_values == null) ? 0 : this.str_values.size();
  }

  public java.util.Iterator<String> getStr_valuesIterator() {
    return (this.str_values == null) ? null : this.str_values.iterator();
  }

  public void addToStr_values(String elem) {
    if (this.str_values == null) {
      this.str_values = new ArrayList<String>();
    }
    this.str_values.add(elem);
  }

  public List<String> getStr_values() {
    return this.str_values;
  }

  public JmoCallData setStr_values(List<String> str_values) {
    this.str_values = str_values;
    return this;
  }

  public void unsetStr_values() {
    this.str_values = null;
  }

  /** Returns true if field str_values is set (has been assigned a value) and false otherwise */
  public boolean isSetStr_values() {
    return this.str_values != null;
  }

  public void setStr_valuesIsSet(boolean value) {
    if (!value) {
      this.str_values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSession_id();
      } else {
        setSession_id((String)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((String)value);
      }
      break;

    case API_KEY:
      if (value == null) {
        unsetApi_key();
      } else {
        setApi_key((String)value);
      }
      break;

    case USER_DOMAIN:
      if (value == null) {
        unsetUser_domain();
      } else {
        setUser_domain((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUser_name();
      } else {
        setUser_name((String)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((Long)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetApp_name();
      } else {
        setApp_name((String)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSite_id();
      } else {
        setSite_id((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((Long)value);
      }
      break;

    case STR_VALUES:
      if (value == null) {
        unsetStr_values();
      } else {
        setStr_values((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSession_id();

    case DATABASE:
      return getDatabase();

    case API_KEY:
      return getApi_key();

    case USER_DOMAIN:
      return getUser_domain();

    case USER_NAME:
      return getUser_name();

    case USERID:
      return Long.valueOf(getUserid());

    case APP_NAME:
      return getApp_name();

    case SITE_ID:
      return Long.valueOf(getSite_id());

    case START_TIME:
      return Long.valueOf(getStart_time());

    case STR_VALUES:
      return getStr_values();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSession_id();
    case DATABASE:
      return isSetDatabase();
    case API_KEY:
      return isSetApi_key();
    case USER_DOMAIN:
      return isSetUser_domain();
    case USER_NAME:
      return isSetUser_name();
    case USERID:
      return isSetUserid();
    case APP_NAME:
      return isSetApp_name();
    case SITE_ID:
      return isSetSite_id();
    case START_TIME:
      return isSetStart_time();
    case STR_VALUES:
      return isSetStr_values();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JmoCallData)
      return this.equals((JmoCallData)that);
    return false;
  }

  public boolean equals(JmoCallData that) {
    if (that == null)
      return false;

    boolean this_present_session_id = true && this.isSetSession_id();
    boolean that_present_session_id = true && that.isSetSession_id();
    if (this_present_session_id || that_present_session_id) {
      if (!(this_present_session_id && that_present_session_id))
        return false;
      if (!this.session_id.equals(that.session_id))
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_api_key = true && this.isSetApi_key();
    boolean that_present_api_key = true && that.isSetApi_key();
    if (this_present_api_key || that_present_api_key) {
      if (!(this_present_api_key && that_present_api_key))
        return false;
      if (!this.api_key.equals(that.api_key))
        return false;
    }

    boolean this_present_user_domain = true && this.isSetUser_domain();
    boolean that_present_user_domain = true && that.isSetUser_domain();
    if (this_present_user_domain || that_present_user_domain) {
      if (!(this_present_user_domain && that_present_user_domain))
        return false;
      if (!this.user_domain.equals(that.user_domain))
        return false;
    }

    boolean this_present_user_name = true && this.isSetUser_name();
    boolean that_present_user_name = true && that.isSetUser_name();
    if (this_present_user_name || that_present_user_name) {
      if (!(this_present_user_name && that_present_user_name))
        return false;
      if (!this.user_name.equals(that.user_name))
        return false;
    }

    boolean this_present_userid = true;
    boolean that_present_userid = true;
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (this.userid != that.userid)
        return false;
    }

    boolean this_present_app_name = true && this.isSetApp_name();
    boolean that_present_app_name = true && that.isSetApp_name();
    if (this_present_app_name || that_present_app_name) {
      if (!(this_present_app_name && that_present_app_name))
        return false;
      if (!this.app_name.equals(that.app_name))
        return false;
    }

    boolean this_present_site_id = true;
    boolean that_present_site_id = true;
    if (this_present_site_id || that_present_site_id) {
      if (!(this_present_site_id && that_present_site_id))
        return false;
      if (this.site_id != that.site_id)
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (this.start_time != that.start_time)
        return false;
    }

    boolean this_present_str_values = true && this.isSetStr_values();
    boolean that_present_str_values = true && that.isSetStr_values();
    if (this_present_str_values || that_present_str_values) {
      if (!(this_present_str_values && that_present_str_values))
        return false;
      if (!this.str_values.equals(that.str_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JmoCallData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi_key()).compareTo(other.isSetApi_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api_key, other.api_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_domain()).compareTo(other.isSetUser_domain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_domain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_domain, other.user_domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp_name()).compareTo(other.isSetApp_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_name, other.app_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSite_id()).compareTo(other.isSetSite_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSite_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site_id, other.site_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, other.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr_values()).compareTo(other.isSetStr_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str_values, other.str_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JmoCallData(");
    boolean first = true;

    sb.append("session_id:");
    if (this.session_id == null) {
      sb.append("null");
    } else {
      sb.append(this.session_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("database:");
    if (this.database == null) {
      sb.append("null");
    } else {
      sb.append(this.database);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("api_key:");
    if (this.api_key == null) {
      sb.append("null");
    } else {
      sb.append(this.api_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_domain:");
    if (this.user_domain == null) {
      sb.append("null");
    } else {
      sb.append(this.user_domain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_name:");
    if (this.user_name == null) {
      sb.append("null");
    } else {
      sb.append(this.user_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userid:");
    sb.append(this.userid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("app_name:");
    if (this.app_name == null) {
      sb.append("null");
    } else {
      sb.append(this.app_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("site_id:");
    sb.append(this.site_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_time:");
    sb.append(this.start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("str_values:");
    if (this.str_values == null) {
      sb.append("null");
    } else {
      sb.append(this.str_values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JmoCallDataStandardSchemeFactory implements SchemeFactory {
    public JmoCallDataStandardScheme getScheme() {
      return new JmoCallDataStandardScheme();
    }
  }

  private static class JmoCallDataStandardScheme extends StandardScheme<JmoCallData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JmoCallData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.session_id = iprot.readString();
              struct.setSession_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // API_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.api_key = iprot.readString();
              struct.setApi_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_domain = iprot.readString();
              struct.setUser_domainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_name = iprot.readString();
              struct.setUser_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userid = iprot.readI64();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app_name = iprot.readString();
              struct.setApp_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.site_id = iprot.readI64();
              struct.setSite_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_time = iprot.readI64();
              struct.setStart_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STR_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.str_values = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.str_values.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setStr_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JmoCallData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.session_id != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.session_id);
        oprot.writeFieldEnd();
      }
      if (struct.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(struct.database);
        oprot.writeFieldEnd();
      }
      if (struct.api_key != null) {
        oprot.writeFieldBegin(API_KEY_FIELD_DESC);
        oprot.writeString(struct.api_key);
        oprot.writeFieldEnd();
      }
      if (struct.user_domain != null) {
        oprot.writeFieldBegin(USER_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.user_domain);
        oprot.writeFieldEnd();
      }
      if (struct.user_name != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.user_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USERID_FIELD_DESC);
      oprot.writeI64(struct.userid);
      oprot.writeFieldEnd();
      if (struct.app_name != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.app_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
      oprot.writeI64(struct.site_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.start_time);
      oprot.writeFieldEnd();
      if (struct.str_values != null) {
        oprot.writeFieldBegin(STR_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.str_values.size()));
          for (String _iter3 : struct.str_values)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JmoCallDataTupleSchemeFactory implements SchemeFactory {
    public JmoCallDataTupleScheme getScheme() {
      return new JmoCallDataTupleScheme();
    }
  }

  private static class JmoCallDataTupleScheme extends TupleScheme<JmoCallData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JmoCallData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSession_id()) {
        optionals.set(0);
      }
      if (struct.isSetDatabase()) {
        optionals.set(1);
      }
      if (struct.isSetApi_key()) {
        optionals.set(2);
      }
      if (struct.isSetUser_domain()) {
        optionals.set(3);
      }
      if (struct.isSetUser_name()) {
        optionals.set(4);
      }
      if (struct.isSetUserid()) {
        optionals.set(5);
      }
      if (struct.isSetApp_name()) {
        optionals.set(6);
      }
      if (struct.isSetSite_id()) {
        optionals.set(7);
      }
      if (struct.isSetStart_time()) {
        optionals.set(8);
      }
      if (struct.isSetStr_values()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetSession_id()) {
        oprot.writeString(struct.session_id);
      }
      if (struct.isSetDatabase()) {
        oprot.writeString(struct.database);
      }
      if (struct.isSetApi_key()) {
        oprot.writeString(struct.api_key);
      }
      if (struct.isSetUser_domain()) {
        oprot.writeString(struct.user_domain);
      }
      if (struct.isSetUser_name()) {
        oprot.writeString(struct.user_name);
      }
      if (struct.isSetUserid()) {
        oprot.writeI64(struct.userid);
      }
      if (struct.isSetApp_name()) {
        oprot.writeString(struct.app_name);
      }
      if (struct.isSetSite_id()) {
        oprot.writeI64(struct.site_id);
      }
      if (struct.isSetStart_time()) {
        oprot.writeI64(struct.start_time);
      }
      if (struct.isSetStr_values()) {
        {
          oprot.writeI32(struct.str_values.size());
          for (String _iter4 : struct.str_values)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JmoCallData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.session_id = iprot.readString();
        struct.setSession_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.database = iprot.readString();
        struct.setDatabaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.api_key = iprot.readString();
        struct.setApi_keyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.user_domain = iprot.readString();
        struct.setUser_domainIsSet(true);
      }
      if (incoming.get(4)) {
        struct.user_name = iprot.readString();
        struct.setUser_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userid = iprot.readI64();
        struct.setUseridIsSet(true);
      }
      if (incoming.get(6)) {
        struct.app_name = iprot.readString();
        struct.setApp_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.site_id = iprot.readI64();
        struct.setSite_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.start_time = iprot.readI64();
        struct.setStart_timeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.str_values = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.str_values.add(_elem7);
          }
        }
        struct.setStr_valuesIsSet(true);
      }
    }
  }

}

