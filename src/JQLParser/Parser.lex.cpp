#line 2 "Parser.lex.cpp"

#line 4 "Parser.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 314
#define YY_END_OF_BUFFER 315
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1187] =
    {   0,
        0,    0,    0,    0,    0,    0,  315,  313,  313,  306,
      314,  269,  313,  269,  269,  313,  269,  269,  270,  269,
      293,  288,  291,  313,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  266,
      267,  313,  269,    0,    0,    0,    0,    0,    0,  294,
        0,  282,  280,    0,  286,    0,  281,  279,    0,    0,
      270,  272,    0,  271,  270,  283,  283,  298,  296,  292,
      295,  290,  297,    0,  299,    0,    0,  283,  283,  283,
      283,   11,   10,  283,  283,  283,  283,   19,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,   96,  113,  283,  283,
      101,  114,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  163,  283,
        2,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  241,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  263,
      283,    0,  285,    0,  284,  287,  307,    0,    0,    0,

        0,    0,    0,    0,  280,    0,    0,    0,  279,    0,
        0,    0,  275,  271,    0,    0,  273,  289,    0,  303,
        0,  305,    0,  304,  283,  283,  283,    9,  283,    1,
       12,  283,  283,  283,  283,   15,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,   38,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,   56,  283,   60,
      283,  283,  283,  283,  283,  283,  283,   73,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,   99,  283,
      283,  283,  283,  283,  107,  283,  283,  283,  122,  283,

      125,  283,  283,  283,  283,  283,  283,  283,  133,  283,
      143,  283,  142,  283,  283,  283,  283,  151,  283,  283,
      283,  283,  283,  155,  283,  283,  164,  283,  283,  283,
      283,  283,  283,  283,  283,  182,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  193,  194,  283,
      283,  283,  283,  283,  200,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  227,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  249,  283,  283,  283,
      283,  283,  283,  283,  264,  283,    0,    0,  284,    0,

      308,    0,    0,    0,    0,    0,  280,    0,  279,  273,
        0,  274,  300,  302,  301,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,   20,  283,   23,   30,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
       37,  283,   41,   46,  283,  283,  283,  283,  283,  283,
       52,  283,  283,  283,  283,  283,  283,   63,  283,   66,
       68,  283,   70,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,   87,
       90,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  108,  283,  121,  283,  123,  124,

      126,  283,  129,  283,  283,  131,  132,  283,  283,  283,
      283,  144,  283,  283,  283,  283,  283,  283,  283,  283,
      152,  283,  154,  283,  283,  283,  283,  283,  161,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  172,  283,
      181,  283,  283,  178,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  208,  283,
      283,  210,  283,  283,  283,  283,  283,  220,  283,  225,
      283,  283,  283,  283,  283,  232,  283,  234,  236,  283,
      237,  283,  242,  276,  243,  283,  283,  245,  283,  283,
      283,  251,  283,  283,  283,  283,  283,  259,  260,  283,

      262,  283,    0,  309,    0,    0,    0,    0,    0,    0,
        0,  283,  283,  283,    5,  283,    8,  283,  283,  283,
      283,  283,   21,   22,   28,  283,  283,  283,  283,  283,
      283,  283,  283,  283,   39,  283,  283,   47,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  278,   80,  283,  283,   85,   86,  283,
       91,  283,   93,  283,  283,  283,  283,  283,  283,  103,
      105,  106,  283,  283,  283,  283,  283,  283,  283,  128,
      130,  134,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  153,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  167,  168,  283,  283,  283,  283,  283,
      177,  283,  179,  283,  183,  283,  283,  283,  283,  283,
      192,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  213,  283,  283,  283,  218,  283,  283,
      283,  283,  283,  283,  283,  230,  233,  283,  283,  238,
      283,  283,  246,  283,  283,  283,  252,  250,  253,  283,
      283,  283,  261,  265,    0,    0,  310,    0,    0,  283,
      283,    4,  283,  283,  283,   16,   17,  283,  283,  283,
       31,  283,  283,  283,   34,  283,  283,  283,   40,  283,

      283,  283,  283,  283,   49,  283,  283,  283,  283,  283,
      283,  283,  283,   62,   64,  283,  283,  283,  283,  283,
       74,  283,  283,   77,   79,  283,   81,  283,   83,   89,
       92,  283,  283,  283,  112,  283,  283,  283,  111,  283,
      283,   95,  115,  283,  127,  135,  283,  283,  283,  283,
      119,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  162,  165,  283,  283,  170,  283,  173,  174,
      175,  283,  283,  186,  187,  189,  283,  283,  185,  283,
      283,  198,  201,  283,  205,  283,  283,  209,  283,  214,
      283,  283,  283,  283,  222,  283,  221,  224,  283,  283,

      229,  283,  231,  283,  240,  283,  283,  283,  283,  248,
      254,  283,  283,  283,  311,    0,  283,  283,    7,  283,
       14,  283,  283,  283,  283,   24,  283,  283,  283,   25,
       26,  283,   42,   65,   51,   48,  283,  283,  283,  283,
      283,  283,  283,  283,   67,   69,  283,  283,  283,   75,
      283,  283,  283,  283,  283,  283,  283,  283,  100,  283,
      104,  283,  110,  283,  283,  137,  138,  139,  283,  283,
      283,  283,  283,  283,  159,  160,  283,  283,  156,  283,
      169,  283,  176,  283,  283,  188,  283,  120,  283,  195,
      283,  199,  283,  283,  206,  212,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  239,  244,  277,  283,
      255,  283,  258,  312,    3,  283,  283,  283,  283,   29,
      283,   35,   36,  283,   44,   43,  283,   53,  283,  283,
      283,   58,  283,   61,   71,   72,  118,  283,  283,   82,
       84,  283,  283,  283,   98,  283,  283,  283,  283,  140,
      147,  283,  141,  283,  150,  283,  283,  166,  171,  180,
      283,  283,  191,  196,  197,  203,  202,  207,  211,  283,
      283,  283,  219,  283,  283,  228,  283,  283,  247,  256,
      257,  283,  283,   18,  283,  283,   32,   45,   50,  283,
      283,   57,  283,  283,   76,  283,   88,  283,  283,  102,

      283,  116,  283,  148,  283,  283,  283,  184,  283,  204,
      283,  283,  283,  283,  283,  283,  283,    6,  283,  117,
      283,   33,   54,   55,  283,  283,   78,  283,   97,  283,
      283,  149,  157,  158,  190,  283,  283,  283,  223,  283,
      283,  235,  283,  283,   59,  283,  283,  283,  283,  283,
      283,  283,  283,  268,  283,   27,  283,  283,  109,  136,
      283,  283,  283,  283,  283,  283,   94,  283,  283,  283,
      226,   13,  283,  215,  283,  283,  145,  283,  283,  146,
      283,  217,  283,  283,  216,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    5,    6,    1,    7,    8,    9,   10,    8,
        8,    8,   11,    8,   12,   13,    8,   14,   14,   15,
       14,   14,   14,   14,   14,   14,   14,   16,    8,   17,
       18,   19,    1,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,    8,   50,   51,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,    1,   78,    1,    8,    1,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
       82,   82,   82,   82,   82,   82,   82,   83,   83,   83,
       83,   84,   84,   85,   85
    } ;

static yyconst flex_int32_t yy_meta[86] =
    {   0,
        1,    1,    1,    2,    1,    3,    4,    1,    1,    5,
        1,    1,    6,    6,    6,    1,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1,    1,    6,
        7,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    8,    1,
        1,    1,    1,    1,    8
    } ;

static yyconst flex_int16_t yy_base[1206] =
    {   0,
        0,    0,    0,    0,    0,    0, 3539, 3540,    6, 3540,
     3540, 3520,   87, 3540, 3528,   88,   81,   85,   88, 3518,
       87, 3540,   89,  105,  144,  114,  204,  268,  116,  332,
       84,  111,  392,  167,   96,  195,  266,  193,  450,  200,
      101,  263,  511,  575,  312,  281,  326,  205, 3522, 3540,
     3540,  114, 3456,  276, 3454, 3453, 3452, 3451, 3450, 3540,
      113, 3540, 3522,  124, 3540,  121, 3540, 3517,  141,  180,
      374,  243,  189,  271,  395, 3513,  400, 3540, 3540, 3506,
     3540, 3540, 3540, 3520,  311, 3519, 3518,  329,   99,  362,
      199,  254, 3508,  303,  336,  414,  270,  353,  383,  415,

      410,  404,  124,  350,  277,  419,  455,  520,  457,  429,
      445,  197,  460,  508,  483,  532,  528,  580,  448,  488,
      503,  563,  507,  559,  581,  442,  572, 3507,  515,  593,
      644, 3506,  596,  317,  594,  595,  624,  657,  652,  661,
      651,  648,  598,  653,  639,  707,  711,  650, 3505,  710,
      721,  606,  712,  716,  679,  725,  754,  728,  726,  768,
      735,  747,  738,  783,  792,  771,  785,  788,  745,  784,
      786,  835,  823,  812,  844,  831,  840,  855, 3504,  845,
      514,  879,  867,  886,  889,  764,  894,  757,  814,  890,
      903,  387, 3540,  704, 3465, 3540,  850,  114, 3436, 3435,

     3434, 3433,  391,  611,  931,  932,  110,  824,  940,  941,
      949,  232,  297,  942,  954,  431,  489, 3540,  143, 3540,
      240, 3540,  708, 3540,  949,  957,  934, 3498,  958, 3497,
     3496,  940,  930,  964,  963, 3495,  858,  969,  866,  972,
      974,  968,  982,  994, 1006,  987, 3494,  988,  986, 1013,
      996, 1007,  989, 1041, 1022, 1016, 1039, 1047, 1038, 1060,
      828, 1037, 1044, 1042, 1062, 1071, 1075, 1068, 1073, 1078,
     1076, 1079, 1085, 1087, 1093, 1104, 1099, 1115, 1109, 1119,
     1102, 1106, 1108, 1127, 1118, 1130, 1132, 1135, 1137, 1148,
     1149, 1156, 1146, 1163, 1145, 1169, 1172, 1159, 1150, 1166,

     3493, 1183, 1179, 1178, 1185, 1191, 1186, 1209, 1200,  125,
     1202, 1217, 1194, 1214, 1215, 1197, 1219, 1233, 1236, 1230,
     1235, 1261, 1250, 3492, 1246, 1255, 1252, 1266, 1237, 1289,
     1268, 1281, 1272, 1285, 1283, 3491, 1292, 1305, 1297, 1311,
     1286, 1317, 1299, 1320, 1325, 1336, 1323, 3490, 3489, 1319,
     1337, 1353, 1326, 1328, 3488, 1329, 1355, 1360, 1363, 1364,
     1331, 1361,  198, 1366, 1376, 1369, 1378, 3487, 1372, 1384,
     1362, 1400, 1398, 1401, 1402, 1409, 1403, 1427, 1404, 1411,
     1432, 1433, 1441, 1413, 1435, 1410, 1448, 1437, 1412, 1443,
     1442, 1456, 1466, 1457, 3486, 1474, 1473, 1486,  317,  570,

     3540,  185, 3419, 3418, 3417,  878, 1203,  227,  930,  634,
     1477, 1479, 3540, 3540, 3540, 1486, 1492, 1488, 1495, 1493,
     1498,  443, 1507, 1496, 1502, 1497, 1513, 1516, 3482, 3481,
     1526, 1531, 1529, 1525, 1530, 1547, 1553, 1534, 1555, 1506,
     3480, 1557, 1562, 3479, 1560, 1561, 1538, 1572, 1579, 1587,
     1578, 1577, 1589, 1582, 1595, 1601, 1608, 3478, 1590, 1591,
     3477, 1616, 3476, 1599, 1615, 1617, 1622, 1625, 1618, 1627,
     1628, 1647, 1649, 1655, 1650, 1656, 1658, 1662, 1664, 3475,
     3474, 1663, 1673, 1675,  681, 1678, 1676, 1681, 1680, 1683,
     1682, 1691, 1701, 1698,  983, 1693, 3473, 1722, 3472, 3471,

     3470, 1704, 3469, 1707, 1709, 3468, 3467, 1708, 1711, 1730,
     1724, 3466, 1742, 1746, 1732, 1749, 1745, 1752, 1755, 1767,
     1758, 1774, 3465, 1768, 1776, 1751, 1789, 1785, 3464, 1783,
     1787, 1793, 1791, 1797, 1798, 1800, 1812, 1803, 3463, 1807,
     3462, 1802, 1818, 1805, 1820, 1824, 1823, 1833, 1834, 1838,
     1839, 1825, 1848, 1840, 1870, 1854, 1851, 1884, 3461, 1865,
     1872, 3460, 1879, 1877, 1893, 1904, 1897, 1910, 1901, 3459,
     1869, 1880, 1903, 1923, 1925, 1882, 1917, 3458, 3457, 1932,
     1902, 1934, 3456, 3455, 3454, 1919, 1949, 3453, 1943, 1948,
     1947, 1952, 1953, 1963, 1958, 1976, 1954, 3452, 3451, 1977,

     3450, 1979,  591, 3540, 1301, 3383, 3382, 1295, 1721, 1983,
     1986, 1985, 1960, 1986, 3447, 1990, 3446, 1987, 1999, 1995,
     1991, 2000, 3445, 3444, 2010, 2014, 2008, 2024, 2027, 2017,
     2030, 2032, 2041, 2037, 3443, 2044, 2046, 3442, 2055, 2050,
     2056, 2061, 2035, 2065, 2074, 2072, 2075, 2084, 2077, 2078,
     2090, 2091, 2095, 2106, 2085, 2109, 2110, 2114, 2108, 2087,
     2115, 2116, 2119, 3441, 2121, 2131, 2130, 3440, 3439, 2135,
     3438, 2140, 3437, 2137, 2148, 2149, 2146, 2161, 2163, 2167,
     3436, 3435, 2150, 2166, 2152, 2171, 2173, 2175, 2187, 3434,
     3433, 3432, 2182, 2169, 2192, 2190, 2205, 2198, 2201, 2206,

     2203, 2207, 2200, 3431, 2218, 2221, 2224, 2230, 2232, 2222,
     2238, 2237, 2239, 3430, 3429, 2249, 2242, 2255, 2245, 2273,
     3428, 2275, 3427, 2276, 3426, 2246, 2277, 2281, 2252, 2296,
     3425, 2280, 2304, 2283, 2305, 2285, 2235, 2282, 2317, 2306,
     2314, 2321, 2318, 3424, 2332, 2323, 2333, 2335, 2340, 2328,
     2336, 2341, 2352, 2345, 2349, 2346, 3423, 2359, 2360, 3422,
     2367, 2365, 3421, 2374, 2375, 2377, 3420, 3419, 2373, 2383,
     2378, 2398, 3418, 3417,  702, 1595, 3540, 2387, 3350, 2393,
     2407, 3415, 2408, 2392, 2410, 3414, 3413, 2409, 2416, 2412,
     3412, 2433, 2415, 2423, 3411, 2424, 2428, 2432, 3410, 2417,

     2439, 2429, 2458, 2452, 3409, 2460, 2446, 2447, 2454, 2461,
     2467, 2475, 2488, 3408, 3407, 2478, 2492, 2491, 2496, 2498,
     3406, 2495, 2493, 3405, 3404, 2500, 3403, 2505, 2510, 2511,
     3402, 2507, 2523, 2512, 3401, 2527, 2529, 2521, 3400, 2524,
     2543, 3399, 3398, 2528, 3397, 3396, 2530, 2544, 2561, 2549,
     3395, 2559, 2564, 2555, 2565, 2574, 2575, 2568, 2586, 2582,
     2588, 2581, 3394, 3393, 2592, 2597, 3386, 2601, 3378, 3370,
     2600, 2595, 2603, 3362, 2604, 2605, 2608, 2599, 3354, 2613,
     2616, 2620, 2617, 2623, 3346, 2636, 2642, 3335, 2631, 3325,
     2641, 2649, 2667, 2651, 3315, 2644, 3251, 3250, 2647, 2656,

     3248, 2658, 3246, 2673, 3245, 2660, 2674, 2676, 2678, 3244,
     3243, 2680, 2688, 2689, 3540, 2695, 2698, 2692, 3242, 2691,
     3240, 2696, 2704, 2714, 2710, 3238, 2715, 2711, 2722, 3237,
     3235, 2730, 2717, 3234, 3233, 3231, 2733, 2735, 2716, 2726,
     2727, 2719, 2753, 2749, 3228, 3227, 2756, 2750, 2757, 3226,
     2758, 2766, 2759, 2769, 2785, 2788, 2789, 2762, 3225, 2786,
     3224, 2763, 3223, 2792, 2800, 3222, 3220, 3217, 2791, 2793,
     2796, 2814, 2809, 2820, 3215, 3206, 2810, 2823, 3204, 2806,
     3203, 2833, 3202, 2827, 2837, 3200, 2843, 3196, 2840, 2830,
     2846, 3132, 2816, 2854, 2844, 3014, 2847, 2861, 2865, 2867,

     2864, 2868, 2869, 2877, 2871, 2881, 2959, 2924, 2799, 2888,
     1282, 2892, 2566, 3540, 2551, 2885, 2891, 2895, 2893, 2545,
     2902, 2513, 2464, 2894, 2900, 2414, 2911, 2286, 2921, 2920,
     2922, 2923, 2913, 2253, 2250, 2204, 2118, 2925, 2929, 2117,
     2088, 2928, 2933, 2932, 2086, 2931, 2952, 2956, 2962, 2002,
     1997, 2942, 1992, 2961, 1956, 2960, 2963, 1906, 1899, 1871,
     2970, 2964, 1856, 1849, 1721, 2976, 1715, 1710, 1665, 2974,
     2978, 2992, 1632, 2983, 2980, 1631, 2981, 2998, 1586, 1585,
     1584, 3001, 3008, 1556, 3005, 2994, 3003, 1535, 1455, 3007,
     3009, 1438, 3012, 3027, 1407, 3025, 1195, 3023, 3038, 1081,

     3036, 1040, 3040, 1018, 3050, 3045, 3055,  935, 3053,  916,
     3064, 3059, 3031, 3028, 3058, 3081, 3062,  900, 3069,  880,
     3078,  813,  802,  752, 3082, 3086,  733, 3084,  687, 3090,
     3091,  647,  632,  617,  601, 3093, 3094, 3096,  551, 3101,
     3110,  541, 3105, 3111,  497, 3113, 3097, 3115, 3114, 3125,
     3128, 3129, 3122,  492, 3142,  476, 3144, 3151,  377,  367,
     3157, 3145, 3133, 3160, 3135, 3170,  358, 3161, 3171, 3173,
      301,  269, 3175,  213, 3174, 3180, 3179, 3185, 3189,  179,
     3186,  169, 3191, 3192,  121, 3540, 3265, 3273, 3280, 3288,
      120, 3294, 3301, 3309, 3317, 3325, 3333, 3341, 3349, 3357,

     3365, 3373, 3381, 3389, 3397
    } ;

static yyconst flex_int16_t yy_def[1206] =
    {   0,
     1186,    1, 1187, 1187,    1,    1, 1186, 1186, 1188, 1186,
     1186, 1186, 1189, 1186, 1186, 1190, 1186, 1186, 1191, 1186,
     1186, 1186, 1186, 1192, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191,   37, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1186,
     1186, 1193, 1186, 1188, 1186, 1186, 1186, 1186, 1186, 1186,
     1189, 1186, 1186, 1194, 1186, 1190, 1186, 1186, 1195, 1186,
     1186, 1186, 1186, 1186, 1191, 1191, 1191, 1186, 1186, 1186,
     1186, 1186, 1186, 1196, 1192, 1197, 1198, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1193, 1186, 1199, 1186, 1186, 1188, 1186, 1186, 1186,

     1186, 1186, 1200, 1189, 1189, 1194, 1201, 1190, 1190, 1195,
     1186, 1186, 1186, 1186, 1186, 1186, 1191, 1186, 1196, 1186,
     1197, 1186, 1198, 1186, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1193, 1199, 1202, 1202,

     1186, 1186, 1186, 1186, 1186, 1203, 1200, 1204, 1201, 1186,
     1186, 1186, 1186, 1186, 1186, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1205, 1186, 1186, 1186, 1186, 1200, 1203, 1201,
     1204, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1202, 1205, 1186, 1186, 1186, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1186, 1186, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1186, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191,    0, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186
    } ;

static yyconst flex_int16_t yy_nxt[3626] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   17,   18,   19,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   49,   50,    8,   51,   49,
       52,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   49,   53,    8,    8,
        8,    8,    8,    8,    8,   55,   56,   57,   58,   59,
       62,   67,   63,   70,   71,   71, 1186,   68,   72,   72,

       74,   75,   75,   79,   80,   81,   82,   83, 1186,   73,
       84, 1186,   77, 1186,   86,  401,   62,  193,   63,   68,
      136,  123,  227, 1186,   67,   76, 1186,   62, 1186,  205,
       68,  124,  125, 1186,   64,   69, 1186, 1186,   95,  126,
       73,  158,   96,   77,   67,   97,  220,  113,  413,  114,
      209,  136,  123,  227,  115,   87, 1186,  408,   98,  116,
       64,  194,  124,  125,  195,  247,   88,   89,   69,   95,
      126,  206,  158,   96,  510,   90,   97,   91,  113, 1186,
      114, 1186,   92,   93,   94,  115,  604,  133,  210,   98,
      116, 1186,  198,   72,   72,  134,  247,   88,   89,  212,

      212,  135,  213,  213,   73, 1186,   90, 1186,   91, 1186,
     1186, 1186, 1186,   92,   93,   94, 1186, 1186,  133,  137,
      154,  145,  230,  138,   99, 1186,  134,  146,  155,  139,
      265,  100,  135,  147,  156,   73,  409,  157,  101,  190,
      191,  102,  103,  222,  104,  213,  213,  566,  105,  414,
      137,  154,  145,  230,  138,   99,   72,   72,  146,  155,
      139,  265,  100,  402,  147,  156, 1186,   73,  157,  101,
      190,  191,  102,  103,  611,  104,  231,  197, 1186,  105,
     1186, 1186, 1186,  159,  214,  214,  140,  160,  106, 1186,
      141,  161,  107, 1186,  142,  215,  108,  162,   73,  249,

      143,  185,  109,  163,  237,  110,  144,  231,  111,  186,
      213,  213,  112, 1186,  159, 1186, 1186,  140,  160,  106,
     1186,  141,  161,  107, 1186,  142,  215,  108,  162, 1186,
      249,  143,  185,  109,  163,  237,  110,  144, 1186,  111,
      186, 1186,  232,  112, 1186,  182,  187,  183, 1186,  298,
      184,  225,  117,  188,  189, 1186, 1186, 1186, 1186, 1186,
      118, 1186, 1186,  119,  603, 1186,  120,  399,  226,  121,
     1186,  248,  122,  232, 1186,  233,  182,  187,  183, 1186,
      298,  184,  225,  117,  188,  189,   74,   71,   71, 1186,
      193,  118,  238,  228,  119, 1186,   63,  120,  211,  226,

      121,  229,  248,  122, 1186,  239,  233,   74,   75,   75,
      216,  216, 1186,  217,  217,  127, 1186,  128,  129,   77,
      130,  240, 1186,  238,  228,  131, 1186, 1186,  246,  211,
      132, 1186,  229,  243,  194,  241,  239,  195,  406,  242,
      234, 1186,  244,  245,  410,  410,  127,  235,  128,  129,
       77,  130,  240,  236, 1186, 1186,  131, 1186,  250,  246,
     1186,  132, 1186,  263,  243,  264,  241, 1186,  285, 1186,
      242,  234, 1186,  244,  245,  148,  251,  252,  235,  260,
      253,  261,  278,  149,  236,  150,  254,  151, 1186,  250,
      152,  153,  618,  255,  263, 1186,  264,  262,  266,  285,

     1186, 1186,  217,  217, 1186,  270,  148,  251,  252, 1186,
      260,  253,  261,  278,  149, 1186,  150,  254,  151, 1186,
     1186,  152,  153, 1186,  255,  279, 1186, 1186,  262,  266,
      267,  268, 1186,  164,  269,  165,  270,  280,  166,  167,
     1186,  282,  256,  168, 1186,  169,  170,  171,  288,  382,
      172,  173,  257, 1186,  271,  174,  279,  258,  259,  274,
      272,  267,  268, 1186,  164,  269,  165,  273,  280,  166,
      167, 1186,  282,  256,  168, 1186,  169,  170,  171,  288,
      382,  172,  173,  257, 1186,  271,  174, 1186,  258,  259,
      274,  272, 1186, 1186,  281,  175,  286,  287,  273,  176,

      283,  284,  177,  178,  275, 1186, 1186, 1186, 1186,  179,
     1186,  276,  180, 1186,   62,  299,   63,  603, 1186,  181,
      195,  318,  300,  277,  289,  281,  175,  286,  287, 1186,
      176,  283,  284,  177,  178,  275, 1186,  297,  776,  301,
      179,  399,  276,  180, 1186,  330,  299,  410,  410,  302,
      181, 1186,  318,  300,  277,  289, 1186,  303,   64, 1186,
     1186,  320, 1186, 1186, 1186, 1186,  290,  291,  297, 1186,
      301,  314,  308, 1186,  315,  327,  330,  292,  309,  293,
      302,  316,  294,  295,  319,  296,  317,  304,  303,  305,
      306, 1186,  320, 1186,  310,  307,  311,  290,  291, 1186,

      312,  334,  314,  308,  313,  315,  327,  193,  292,  309,
      293,  224,  316,  294,  295,  319,  296,  317,  304, 1186,
      305,  306, 1186, 1186, 1186,  310,  307,  311, 1186,  321,
      674,  312,  334, 1186,  328,  313,  331, 1186, 1186,  322,
     1186,  323,  325,  326,  329, 1186,  324, 1186,  339,  603,
     1186,  398,  195,  332,  399,  333,  340, 1186,  415, 1186,
      321,  346,  335,  336, 1186,  328, 1186,  331,  341, 1186,
      322,  349,  323,  325,  326,  329, 1186,  324,  347,  339,
     1186,  393,  337, 1186,  332,  361,  333,  340,  338,  348,
      342,  343,  346,  335,  336, 1186, 1186, 1186, 1186,  341,

     1186,  391,  349,  350, 1186,  356,  344,  345,  360,  347,
      351,  357,  393,  337, 1186,  362,  361,  363,  358,  338,
      348,  342,  343,  352, 1186, 1186, 1186,   67,  353,  354,
      359,  355,  391,   68,  350, 1186,  356,  344,  345,  360,
     1186,  351,  357, 1186,  368,  370,  362, 1186,  363,  358,
      371,  197, 1186,  394,  352,  364, 1186, 1186,  369,  353,
      354,  359,  355,  365,  376,  372,  458, 1186,  374,  366,
     1186,   69,  367,  380,  375,  368,  370,  377, 1186, 1186,
      426,  371,  373,  407,  394,  381,  364,  378,  379,  369,
      386, 1186, 1186,  428,  365,  376,  372,  458, 1186,  374,

      366, 1186, 1186,  367,  380,  375, 1186,  383,  377,  384,
      387,  426, 1186,  373,  388, 1186,  381,  385,  378,  379,
      389,  386,  392,  396,  428,  609,  390,  395, 1186, 1186,
     1186, 1186, 1186, 1186,   62,   62,  407,  205,  383,  409,
      384,  387, 1186,   67,   67,  388, 1186, 1186,  385,  409,
      209,  389, 1186,  392,  396,  214,  214,  390,  395,  216,
      216, 1186,  410,  410,  411,  411,  215,  412,  412, 1186,
     1186,  420,  423,  416,  422, 1186, 1186,  408,   64,  206,
     1186, 1186,  421,  425, 1186,  418, 1186,   69,  210,  417,
      431,  419,  424,  427, 1186, 1186,  429,  215, 1186, 1186,

     1186, 1186,  420,  423,  416,  422, 1186,  440, 1186,  447,
      432,  430,  441,  421,  425,  433,  418,  442, 1186, 1186,
      417,  431,  419,  424,  427, 1186,  434,  429, 1186,  435,
     1186,  436,  684,  443, 1186,  446,  445,  444,  440,  437,
      447,  432,  430,  441,  451,  438,  433,  439,  442, 1186,
     1186, 1186, 1186, 1186, 1186,  452, 1186,  434,  459, 1186,
      435,  448,  436,  453,  443,  449,  446,  445,  444,  450,
      437,  454, 1186,  461, 1186,  451,  438,  455,  439,  460,
     1186,  456,  462, 1186,  457, 1186,  452, 1186, 1186,  459,
     1186, 1186,  448, 1186,  453,  463,  449, 1186,  468, 1186,

      450,  467,  454,  466,  461, 1186,  464,  469,  455,  465,
      460, 1186,  456,  462, 1186,  457, 1186,  470, 1186,  471,
     1186, 1186,  472,  477,  474,  473,  463, 1186,  475,  468,
     1186, 1186,  467,  481,  466,  478,  483,  464,  469, 1186,
      465,  479, 1186,  476, 1186,  485,  482, 1186,  470, 1186,
      471,  480,  487,  472,  477,  474,  473, 1186, 1186,  475,
     1186, 1186, 1186,  486,  481,  484,  478,  483, 1186,  488,
      489, 1186,  479,  491,  476, 1186,  485,  482, 1186,  495,
      492, 1186,  480,  487, 1186,  490,  493,  494,  499,  496,
     1186, 1186,  497,  498,  486, 1186,  484, 1186, 1186,  500,

      488,  489,  503, 1186,  491,  502, 1186, 1186,  407, 1186,
      495,  492, 1186,  504, 1186,  505,  490,  493,  494,  499,
      496, 1186,  501,  497,  498,  506, 1186, 1186,  508, 1186,
      500, 1186,  507,  503,  509,  516,  502,  511,  519,  514,
      512,  513, 1186,  518,  504, 1186,  505, 1186, 1186, 1186,
      406,  520,  517,  501,  515,  524,  506,  521, 1186,  508,
      523,  533, 1186,  507, 1186,  509,  516, 1186,  511,  519,
      514,  512,  513, 1186,  518,  522,  530,  529, 1186,  525,
     1186,  526,  520,  517, 1186,  515,  524,  528,  521,  527,
      531,  523,  533, 1186, 1186, 1186, 1080, 1186, 1186,  539,

       63, 1186,  777,  532, 1186,  537,  522,  530,  529, 1186,
      525, 1186,  526,  534,  535,  540,  547, 1186,  528,  538,
      527,  531,  541, 1186,  536,  542,  543,  544,  545, 1186,
      539, 1186, 1186,  546,  532, 1186,  537, 1186, 1186,  549,
     1186, 1186,  406, 1186,  534,  535,  540,  547, 1186, 1186,
      538,  548,  554,  541,  553,  536,  542,  543,  544,  545,
      550,  555,  551,  552,  546, 1186,  557, 1186,  564,  558,
      549,  559, 1186, 1186, 1186, 1186, 1186,  556, 1186,  605,
      560, 1186,  548,  554, 1186,  553,  561,  562, 1186,  565,
     1186,  550,  555,  551,  552,  563, 1186,  557,  571,  564,

      558,  574,  559,  567,  570,  568,  573,  572,  556,  569,
     1186,  560, 1186, 1186, 1186, 1186, 1186,  561,  562, 1186,
      565, 1186, 1186, 1186, 1186, 1186,  563,  580,  576,  571,
      591,  575,  574,  577,  567,  570,  568,  573,  572, 1186,
      569,  578,  579,  583, 1186, 1186,  589, 1186,  582, 1186,
     1186,  581,  594, 1186, 1186, 1186,  584,  585,  580,  576,
     1186,  591,  575,  590,  577,  595,  586, 1186, 1186, 1186,
      593,  596,  578,  579,  583,  587,  193,  589, 1186,  582,
      588,  597,  581,  594,  601,  592, 1186,  584,  585,  193,
      412,  412,  412,  412,  590,  598,  595,  586, 1186,  599,

     1186,  593,  596,  600, 1186, 1186,  587, 1186, 1186, 1186,
     1186,  588,  597,  602, 1186,  601,  592,  616, 1186, 1186,
      194,  612,  614,  195,  613, 1186,  598,  622, 1186,  620,
      599,  619,  615,  398,  600,  617,  399, 1186, 1186,  621,
      624, 1186, 1186, 1186,  602,  634, 1186, 1186,  616,  628,
     1186,  623,  612,  614,  632,  613,  625,  627,  622, 1186,
      620,  629,  619,  615,  626, 1186,  617, 1186, 1186, 1186,
      621,  624, 1186, 1186, 1186,  630,  634,  631,  640,  633,
      628,  635,  623,  636, 1186,  632,  638,  625,  627, 1186,
     1186, 1186,  629,  639, 1186,  626, 1186, 1186, 1186, 1186,

      637, 1186, 1186, 1186,  647,  645,  630, 1186,  631,  640,
      633, 1186,  635, 1186,  636,  644,  641,  638,  642,  643,
     1186,  652,  646,  648,  639,  650,  653, 1186, 1186, 1186,
     1186,  637,  649,  655, 1186,  647,  645, 1186,  656, 1186,
     1186,  651,  776, 1186, 1186,  399,  644,  641,  654,  642,
      643,  657,  652,  646,  648,  658,  650,  653,  660, 1186,
      659, 1186, 1186,  649,  655,  662,  661, 1186, 1186,  656,
     1186,  663,  651,  664, 1186, 1186, 1186, 1186,  665,  654,
      667,  668,  657,  666,  670, 1186,  658, 1186, 1186,  660,
     1186,  659, 1186, 1186, 1186, 1186,  662,  661,  671,  673,

      678,  669,  663, 1186,  664, 1186,  672,  679,  676,  665,
     1186,  667,  668, 1186,  666,  670, 1186,  675,  677, 1186,
     1186, 1186, 1186, 1186,  685,  680,  407, 1186,  681,  671,
      673,  678,  669, 1186, 1186,  683, 1186,  672,  679,  676,
      682,  692, 1186,  689, 1186,  686,  690,  691,  675,  677,
      687,  693,  695,  688, 1186,  685,  680, 1186, 1186,  681,
      698, 1186,  696, 1186, 1186,  694,  683, 1186,  609,  699,
     1186,  682,  692,  697,  689,  702,  686,  690,  691, 1186,
     1186,  687,  693,  695,  688,  700, 1186,  703, 1186,  704,
      706,  698,  701,  696,  708, 1186,  694, 1186,  707, 1186,

      699, 1186,  705, 1186,  697, 1186,  702,  711,  710, 1186,
     1186,  712, 1186,  713, 1186, 1186,  700, 1186,  703, 1186,
      704,  706,  709,  701, 1186,  708,  716,  719,  714,  707,
     1186,  720, 1186,  705,  715, 1186, 1186, 1186,  711,  710,
      717,  721,  712,  723,  713, 1186, 1186,  726,  724,  718,
     1186, 1186, 1186,  709,  725,  722,  728,  716,  719,  714,
     1186, 1186,  720, 1186,  731,  715, 1186,  730, 1186,  729,
      727,  717,  721,  733,  723,  737,  736, 1186,  726,  724,
      718, 1186, 1186, 1186, 1186,  725,  722,  728,  732, 1186,
      740, 1186, 1186,  734, 1186,  731, 1186,  752,  730,  743,

      729,  727,  735,  741,  733, 1186,  737,  736,  738, 1186,
      742, 1186,  739, 1186, 1186, 1186, 1186,  753, 1186,  732,
      757,  740, 1186,  751,  734,  745,  746,  754,  752, 1186,
      743, 1186,  744,  735,  741, 1186,  748, 1186,  749,  738,
      760,  742,  747,  739, 1186,  758, 1186,  755,  753,  756,
      750,  757,  759,  762,  751, 1186,  745,  746,  754, 1186,
     1186, 1186,  761,  744, 1186, 1186, 1186,  748, 1186,  749,
     1186,  760, 1186,  747,  765, 1186,  758,  764,  755,  768,
      756,  750,  763,  759,  762,  770,  766,  769, 1186, 1186,
      767, 1186,   68,  761,  772,  409,  771, 1186, 1186, 1186,

      781,  773, 1186, 1186, 1186,  765,  774, 1186,  764, 1186,
      768, 1186, 1186,  763, 1186,  784,  770,  766,  769,  782,
     1186,  767, 1186,  785,  780,  772, 1186,  771,  783, 1186,
      408,  781,  773,  611,  786,  787, 1186,  774,  788, 1186,
      791,  792, 1186,  795, 1186,  789,  784, 1186,  790, 1186,
      782,  794,  796, 1186,  785,  780, 1186,  793, 1186,  783,
      797,  799, 1186,  806,  800,  786,  787, 1186, 1186,  788,
      801,  791,  792, 1186,  795,  802,  789, 1186,  798,  790,
      804,  803,  794,  796, 1186,  805, 1186, 1186,  793, 1186,
     1186,  797,  799,  807,  806,  800, 1186, 1186, 1186, 1186,

     1186,  801, 1186, 1186,  813,  812,  802, 1186,  808,  798,
      809,  804,  803,  814,  810,  815,  805,  811, 1186,  816,
     1186, 1186, 1186,  818,  807,  823, 1186, 1186, 1186, 1186,
     1186, 1186,  822, 1186,  817,  813,  812,  819,  820,  808,
      821,  809, 1186, 1186,  814,  810,  815, 1186,  811, 1186,
      816,  828, 1186,  824,  818,  825,  823,  826, 1186,  827,
     1186, 1186, 1186,  822, 1186,  817,  831,  829,  819,  820,
      835,  821,  832, 1186,  830, 1186,  833,  834, 1186, 1186,
      841, 1186,  828, 1186,  824, 1186,  825, 1186,  826,  839,
      827,  838,  842,  836, 1186,  837,  843,  831,  829, 1186,

      840,  835, 1186,  832, 1186,  830,  847,  833,  834,  844,
     1186,  841, 1186, 1186,  845, 1186, 1186, 1186, 1186, 1186,
      839,  846,  838,  842,  836,  848,  837,  843,  849,  850,
     1186,  840,  852, 1186, 1186,  854, 1186,  847,  855,  856,
      844,  851, 1186,  853, 1186,  845,  862, 1186,  858, 1186,
     1186, 1186,  846,  857, 1186,  859,  848, 1186, 1186,  849,
      850, 1186, 1186,  852, 1186, 1186,  854, 1186,  884,  855,
      856,  860,  851,  861,  853,  863,  864,  862,  865,  858,
      866,  867,  869,  868,  857, 1186,  859, 1186, 1186, 1186,
      874,  877, 1186, 1186, 1186, 1186,  870, 1186, 1186,  884,

      875,  873,  860,  872,  861,  876,  863,  864, 1186,  865,
      871,  866,  867,  869,  868,  879, 1186, 1186, 1186,  885,
      878,  874,  877,  881,  883,  882, 1186,  870,  880, 1186,
     1186,  875,  873, 1186,  872, 1186,  876,  887,  888,  886,
     1186,  871,  890,  892, 1186, 1186,  879, 1186, 1186,  889,
      885,  878, 1186, 1186,  881,  883,  882, 1186, 1186,  880,
      891, 1186,  895,  894, 1186,  893,  897,  899,  887,  888,
      886, 1186, 1186,  890,  892,  898,  900, 1186,  896, 1186,
      889,  902,  901,  905,  903, 1186, 1186, 1186,  915, 1186,
     1186,  891,  904,  895,  894, 1186,  893,  897,  899,  913,

      906,  910,  907,  912, 1186, 1186,  898,  900,  909,  896,
     1186,  911,  902,  901,  905,  903,  908,  917,  914, 1186,
     1186, 1186, 1186,  904, 1186,  920, 1186, 1186, 1186, 1186,
      913,  906,  910,  907,  912, 1186, 1186,  922,  918,  909,
     1186, 1186,  911,  921, 1186, 1186,  919,  908,  917,  914,
      923, 1186,  924,  925,  927,  932,  920,  926, 1186, 1186,
      934,  930,  928,  929, 1186,  778, 1186,  938,  922,  918,
     1186,  931, 1186, 1186,  921,  936, 1186,  919,  933, 1186,
      939,  923,  940,  924,  925,  927,  932, 1186,  926,  942,
     1186,  934,  930,  928,  929,  941,  943,  935,  938,  937,

     1186,  945,  931, 1186, 1186, 1186,  936, 1186, 1186,  933,
     1186,  939, 1186,  940,  946,  947,  944, 1186,  950, 1186,
      942,  951, 1186, 1186, 1186, 1186,  941,  943,  935,  948,
      937,  949,  945, 1186,  954, 1186, 1186,  953,  952, 1186,
     1186, 1186, 1186,  958,  956,  946,  947,  944,  957,  950,
      955,  959,  951,  960,  964, 1186, 1186, 1186,  965,  961,
      948, 1186,  949, 1186,  962,  954,  963, 1186,  953,  952,
      966, 1186,  968, 1186,  958,  956, 1186, 1186, 1186,  957,
     1186,  955,  959,  971,  960,  964, 1186, 1186,  970,  965,
      961,  967,  975, 1186, 1186,  962,  973,  963, 1186,  969,

     1186,  966,  977,  968, 1186,  972,  974, 1186,  978, 1186,
      976, 1186, 1186, 1186,  971, 1186, 1186, 1186,  979,  970,
     1186,  981,  967,  975,  982, 1186,  980,  973, 1186, 1186,
      969,  985, 1186,  977,  984, 1186,  972,  974,  983,  978,
      989,  976,  986, 1186,  987,  994,  988,  991, 1186,  979,
      990,  993,  981, 1186, 1186,  982, 1186,  980,  992, 1186,
      995, 1186,  985, 1186,  997,  984,  996,  998, 1186,  983,
     1186,  989, 1186,  986, 1003,  987,  994,  988,  991, 1186,
      999,  990,  993, 1002, 1001, 1186, 1186, 1000, 1186,  992,
     1186,  995, 1186, 1006, 1004,  997, 1014,  996,  998, 1007,

     1186, 1186, 1010, 1186, 1186, 1003, 1008, 1005, 1186, 1009,
     1186,  999, 1016, 1017, 1002, 1001, 1186, 1011, 1000, 1012,
     1013, 1015, 1186, 1186, 1006, 1004, 1186, 1186, 1186, 1186,
     1007, 1186, 1019, 1010, 1186, 1023, 1029, 1008, 1186, 1186,
     1009, 1018, 1186, 1016, 1017, 1186, 1020, 1186, 1011, 1021,
     1012, 1013, 1015, 1022, 1025, 1026, 1024, 1027, 1032, 1028,
     1030, 1186, 1186, 1019, 1031, 1186, 1023, 1029, 1186, 1186,
     1186, 1186, 1018,  916, 1186, 1186, 1036, 1020, 1186, 1035,
     1021, 1186, 1034, 1040, 1022, 1025, 1026, 1024, 1027, 1032,
     1028, 1030, 1041, 1033, 1039, 1031, 1037, 1186, 1186, 1038,

     1186, 1186, 1047, 1186, 1186, 1186, 1045, 1036, 1186, 1042,
     1035, 1186, 1186, 1034, 1040, 1050, 1043, 1044, 1186, 1046,
     1048, 1186, 1186, 1041, 1033, 1039, 1186, 1037, 1186, 1052,
     1038, 1051, 1186, 1047, 1049, 1186, 1054, 1045, 1053, 1186,
     1042, 1056, 1186, 1058, 1055, 1186, 1050, 1043, 1044, 1186,
     1046, 1048, 1186, 1066, 1057, 1186, 1186, 1059, 1186, 1186,
     1052, 1061, 1051, 1062, 1063, 1049, 1186, 1054, 1064, 1053,
     1065, 1060, 1056, 1186, 1058, 1055, 1186, 1186, 1067, 1186,
     1186, 1186, 1068, 1186, 1066, 1057, 1069, 1071, 1059, 1186,
     1073, 1077, 1061, 1186, 1062, 1063, 1074, 1186, 1072, 1064,

     1186, 1065, 1060, 1186, 1186, 1186, 1186, 1186, 1075, 1067,
     1070, 1079, 1186, 1068, 1186, 1076, 1081, 1069, 1071, 1084,
     1078, 1073, 1077, 1186, 1082, 1186, 1085, 1074, 1083, 1072,
     1086, 1087, 1186, 1186, 1186, 1186, 1186, 1186, 1088, 1075,
     1186, 1186, 1079, 1186, 1186, 1186, 1076, 1081, 1089, 1095,
     1084, 1078, 1094, 1091, 1186, 1082, 1099, 1085, 1090, 1083,
     1093, 1086, 1087, 1096, 1186, 1097, 1092, 1098, 1186, 1088,
     1100, 1186, 1186, 1186, 1186, 1186, 1186, 1101, 1102, 1089,
     1095, 1104, 1186, 1094, 1091, 1105, 1186, 1099, 1186, 1090,
     1186, 1093, 1186, 1186, 1096, 1186, 1097, 1092, 1098, 1103,

     1106, 1100, 1109, 1107, 1186, 1114, 1186, 1108, 1101, 1102,
     1186, 1111, 1104, 1186, 1110, 1186, 1105, 1186, 1116, 1186,
     1186, 1186, 1117, 1113, 1186, 1118, 1186, 1112, 1121, 1115,
     1103, 1106, 1119, 1109, 1107, 1186, 1114, 1186, 1108, 1186,
     1186, 1122, 1111, 1186, 1120, 1110, 1125, 1124, 1186, 1116,
     1186, 1123, 1186, 1117, 1113, 1126, 1118, 1186, 1127, 1121,
     1128, 1129, 1186, 1119, 1130, 1186, 1139, 1186, 1131, 1133,
     1186, 1186, 1122, 1132, 1186, 1120, 1186, 1125, 1124, 1134,
     1138, 1186, 1123, 1135, 1137, 1142, 1126, 1140, 1136, 1127,
     1186, 1128, 1129, 1186, 1186, 1130, 1186, 1139, 1186, 1131,

     1133, 1143, 1186, 1186, 1132, 1186, 1186, 1141, 1186, 1186,
     1134, 1144, 1147, 1186, 1135, 1137, 1142, 1186, 1140, 1136,
     1146, 1148, 1186, 1186, 1145, 1186, 1186, 1186, 1151, 1155,
     1149, 1150, 1143, 1152, 1186, 1153, 1158, 1186, 1141, 1159,
     1186, 1186, 1144, 1147, 1186, 1186, 1157, 1186, 1154, 1156,
     1164, 1146, 1148, 1163, 1186, 1145, 1186, 1186, 1160, 1151,
     1155, 1149, 1150, 1186, 1152, 1161, 1153, 1158, 1162, 1186,
     1159, 1170, 1186, 1186, 1172, 1165, 1166, 1157, 1169, 1154,
     1156, 1164, 1186, 1186, 1163, 1186, 1186, 1186, 1168, 1160,
     1173, 1186, 1186, 1171, 1175, 1167, 1161, 1186, 1186, 1162,

     1174, 1186, 1170, 1186, 1186, 1172, 1165, 1166, 1186, 1169,
     1177, 1179, 1186, 1176, 1186, 1186, 1186, 1180, 1186, 1168,
     1183, 1173, 1181, 1178, 1171, 1175, 1167, 1186, 1182, 1186,
     1185, 1174, 1186, 1184, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1177, 1179, 1186, 1176, 1186, 1186, 1186, 1180, 1186,
     1186, 1183, 1186, 1181, 1186, 1186, 1186, 1186, 1186, 1182,
     1186, 1185, 1186, 1186, 1184,   11,   11,   11,   11,   11,
       11,   11,   11,   54,   54,   54,   54,   54,   54,   54,
       61,   61,   61,   61,   61,   61,   61,   61,   66,   66,
       66,   66,   66,   66,   66,   66,   85,   85,   85,   85,

       85,  192,  192,  192,  192,  192,  192,  192,  192,  204,
      204,  204,  204,  204,  204,  204,  204,  208,  208,  208,
      208,  208,  208,  208,  208,  219,  219, 1186,  219,  219,
      219,  219,  219,  221,  221,  221,  221, 1186,  221,  221,
      221,  223,  223,  223,  223,  223,  223, 1186,  223,  397,
      397,  397,  397,  397,  397,  397,  397,  203, 1186,  203,
      203,  203,  203,  203,  203,  207, 1186,  207,  207,  207,
      207,  207,  207,  400, 1186,  400,  400,  400,  400,  400,
      400,  608, 1186,  608,  608,  608,  608,  608,  608,  610,
     1186,  610,  610,  610,  610,  610,  610,  775, 1186,  775,

      775,  775,  775,  775,  775, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,  916, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
      779,  778, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186,  607,  606,  605, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186,  405,  404,  403,  402,  400, 1186, 1186, 1186, 1186,
     1186,  224,  222,  220,  218, 1186,  207,  203,  202,  201,
      200,  199,  198,  196, 1186,   78,   65,   60, 1186,    7,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186
    } ;

static yyconst flex_int16_t yy_chk[3626] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    9,    9,    9,    9,    9,
       13,   16,   13,   17,   17,   17,   31,   16,   18,   18,

       19,   19,   19,   21,   21,   21,   23,   23,   35,   18,
       24,   89,   19,   41,   24,  198,   61,   52,   61,  207,
       35,   31,   89,   32,   66, 1191,   26,   64,   29,   64,
       66,   32,   32, 1185,   13,   16,  103,  310,   26,   32,
       18,   41,   26,   19,   69,   26,  219,   29,  219,   29,
       69,   35,   31,   89,   29,   24,   25,  207,   26,   29,
       61,   52,   32,   32,   52,  103,   25,   25,   66,   26,
       32,   64,   41,   26,  310,   25,   26,   25,   29,   34,
       29, 1182,   25,   25,   25,   29,  402,   34,   69,   26,
       29, 1180,  198,   70,   70,   34,  103,   25,   25,   73,

       73,   34,   73,   73,   70,   38,   25,   36,   25,  112,
      363,   91,   40,   25,   25,   25,   27,   48,   34,   36,
       40,   38,   91,   36,   27, 1174,   34,   38,   40,   36,
      112,   27,   34,   38,   40,   70,  408,   40,   27,   48,
       48,   27,   27,  221,   27,  212,  212,  363,   27,  221,
       36,   40,   38,   91,   36,   27,   72,   72,   38,   40,
       36,  112,   27,  402,   38,   40,   92,   72,   40,   27,
       48,   48,   27,   27,  408,   27,   92,   54,   37,   27,
       28, 1172,   97,   42,   74,   74,   37,   42,   28,  105,
       37,   42,   28,   46,   37,   74,   28,   42,   72,  105,

       37,   46,   28,   42,   97,   28,   37,   92,   28,   46,
      213,  213,   28, 1171,   42,   94,   85,   37,   42,   28,
       85,   37,   42,   28,   45,   37,   74,   28,   42,  134,
      105,   37,   46,   28,   42,   97,   28,   37,   47,   28,
       46,   88,   94,   28,   30,   45,   47,   45,   95,  134,
       45,   88,   30,   47,   47,   54,   54,   54,   54,   54,
       30,   85,  104,   30,  399,   98,   30,  399,   88,   30,
     1167,  104,   30,   94,   90,   95,   45,   47,   45, 1160,
      134,   45,   88,   30,   47,   47,   71,   71,   71, 1159,
      192,   30,   98,   90,   30,   99,  203,   30,   71,   88,

       30,   90,  104,   30,   33,   99,   95,   75,   75,   75,
       77,   77,   77,   77,   77,   33,  102,   33,   33,   75,
       33,   99,  101,   98,   90,   33,   96,  100,  102,   71,
       33,  106,   90,  101,  192,  100,   99,  192,  203,  100,
       96,  110,  101,  101,  216,  216,   33,   96,   33,   33,
       75,   33,   99,   96,  126,  422,   33,  111,  106,  102,
      119,   33,   39,  110,  101,  111,  100,  107,  126,  109,
      100,   96,  113,  101,  101,   39,  107,  107,   96,  109,
      107,  109,  119,   39,   96,   39,  107,   39, 1156,  106,
       39,   39,  422,  107,  110,  115,  111,  109,  113,  126,

      120,  217,  217,  217, 1154,  115,   39,  107,  107, 1145,
      109,  107,  109,  119,   39,  121,   39,  107,   39,  123,
      114,   39,   39,   43,  107,  120,  181,  129,  109,  113,
      114,  114,  108,   43,  114,   43,  115,  121,   43,   43,
      117,  123,  108,   43,  116,   43,   43,   43,  129,  181,
       43,   43,  108, 1142,  116,   43,  120,  108,  108,  117,
      116,  114,  114, 1139,   43,  114,   43,  116,  121,   43,
       43,  124,  123,  108,   43,  122,   43,   43,   43,  129,
      181,   43,   43,  108,  127,  116,   43,   44,  108,  108,
      117,  116,  118,  125,  122,   44,  127,  127,  116,   44,

      124,  125,   44,   44,  118,  130,  135,  136,  133,   44,
      143,  118,   44, 1135,  204,  135,  204,  400,  152,   44,
      400,  143,  135,  118,  130,  122,   44,  127,  127, 1134,
       44,  124,  125,   44,   44,  118,  137,  133,  603,  136,
       44,  603,  118,   44, 1133,  152,  135,  410,  410,  137,
       44,  145,  143,  135,  118,  130,  131,  137,  204, 1132,
      142,  145,  148,  141,  139,  144,  131,  131,  133,  138,
      136,  141,  139,  140,  141,  148,  152,  131,  139,  131,
      137,  142,  131,  131,  144,  131,  142,  138,  137,  138,
      138,  155,  145,  485,  139,  138,  140,  131,  131, 1129,

      140,  155,  141,  139,  140,  141,  148,  194,  131,  139,
      131,  223,  142,  131,  131,  144,  131,  142,  138,  146,
      138,  138,  150,  147,  153,  139,  138,  140,  154,  146,
      485,  140,  155,  151,  150,  140,  153,  156,  159,  146,
      158,  146,  147,  147,  151, 1127,  146,  161,  158,  775,
      163,  194,  775,  154,  194,  154,  158,  169,  223,  162,
      146,  161,  156,  156, 1124,  150,  157,  153,  159,  188,
      146,  163,  146,  147,  147,  151,  186,  146,  162,  158,
      160,  188,  157,  166,  154,  169,  154,  158,  157,  162,
      160,  160,  161,  156,  156,  164,  170,  167,  171,  159,

      168,  186,  163,  164,  165,  166,  160,  160,  168,  162,
      164,  166,  188,  157, 1123,  170,  169,  171,  167,  157,
      162,  160,  160,  165,  174, 1122,  189,  208,  165,  165,
      167,  165,  186,  208,  164,  173,  166,  160,  160,  168,
      261,  164,  166,  176,  173,  174,  170,  172,  171,  167,
      174,  197,  177,  189,  165,  172,  175,  180,  173,  165,
      165,  167,  165,  172,  177,  175,  261,  178,  176,  172,
      237,  208,  172,  180,  176,  173,  174,  177,  239,  183,
      237,  174,  175,  406,  189,  180,  172,  178,  178,  173,
      183,  182, 1120,  239,  172,  177,  175,  261,  184,  176,

      172,  185,  190,  172,  180,  176,  187,  182,  177,  182,
      184,  237, 1118,  175,  184,  191,  180,  182,  178,  178,
      185,  183,  187,  191,  239,  406,  185,  190, 1110,  197,
      197,  197,  197,  197,  205,  206,  205,  206,  182,  409,
      182,  184,  233,  209,  210,  184,  227, 1108,  182,  209,
      210,  185,  232,  187,  191,  214,  214,  185,  190,  211,
      211,  225,  211,  211,  215,  215,  214,  215,  215,  226,
      229,  227,  233,  225,  232,  235,  234,  409,  205,  206,
      242,  238,  229,  235,  240,  226,  241,  209,  210,  225,
      242,  226,  234,  238,  243,  495,  240,  214,  249,  246,

      248,  253,  227,  233,  225,  232,  244,  246,  251,  253,
      243,  241,  248,  229,  235,  244,  226,  249,  245,  252,
      225,  242,  226,  234,  238,  250,  244,  240,  256,  244,
     1104,  245,  495,  250,  255,  252,  251,  250,  246,  245,
      253,  243,  241,  248,  255,  245,  244,  245,  249,  262,
      259,  257, 1102,  254,  264,  256,  263,  244,  262,  258,
      244,  254,  245,  257,  250,  254,  252,  251,  250,  254,
      245,  258,  260,  264,  265,  255,  245,  259,  245,  263,
      268,  260,  265,  266,  260,  269,  256,  267,  271,  262,
      270,  272,  254, 1100,  257,  266,  254,  273,  270,  274,

      254,  269,  258,  268,  264,  275,  267,  271,  259,  267,
      263,  277,  260,  265,  281,  260,  276,  272,  282,  273,
      283,  279,  273,  277,  275,  274,  266,  278,  276,  270,
      285,  280,  269,  281,  268,  278,  283,  267,  271,  284,
      267,  279,  286,  276,  287,  285,  282,  288,  272,  289,
      273,  280,  287,  273,  277,  275,  274,  295,  293,  276,
      290,  291,  299,  286,  281,  284,  278,  283,  292,  288,
      289,  298,  279,  291,  276,  294,  285,  282,  300,  295,
      292,  296,  280,  287,  297,  290,  293,  294,  299,  296,
      304,  303,  297,  298,  286,  302,  284,  305,  307,  300,

      288,  289,  304,  306,  291,  303,  313, 1097,  407,  316,
      295,  292,  309,  305,  311,  306,  290,  293,  294,  299,
      296,  308,  302,  297,  298,  307,  314,  315,  309,  312,
      300,  317,  308,  304,  309,  313,  303,  311,  316,  312,
      311,  311,  320,  315,  305,  318,  306,  321,  319,  329,
      407,  317,  314,  302,  312,  321,  307,  318,  325,  309,
      320,  329,  323,  308,  327,  309,  313,  326,  311,  316,
      312,  311,  311,  322,  315,  319,  326,  325,  328,  321,
      331,  322,  317,  314,  333,  312,  321,  323,  318,  322,
      327,  320,  329,  332, 1011,  335, 1011,  334,  341,  333,

      608,  330,  605,  328,  337,  331,  319,  326,  325,  339,
      321,  343,  322,  330,  330,  334,  341,  338,  323,  332,
      322,  327,  335,  340,  330,  337,  337,  338,  339,  342,
      333,  350,  344,  340,  328,  347,  331,  345,  353,  343,
      354,  356,  608,  361,  330,  330,  334,  341,  346,  351,
      332,  342,  350,  335,  347,  330,  337,  337,  338,  339,
      344,  351,  345,  346,  340,  352,  353,  357,  361,  354,
      343,  356,  358,  362,  371,  359,  360,  352,  364,  605,
      357,  366,  342,  350,  369,  347,  358,  359,  365,  362,
      367,  344,  351,  345,  346,  360,  370,  353,  367,  361,

      354,  371,  356,  364,  366,  364,  370,  369,  352,  365,
      373,  357,  372,  374,  375,  377,  379,  358,  359, 1095,
      362,  376,  386,  380,  389,  384,  360,  377,  373,  367,
      386,  372,  371,  374,  364,  366,  364,  370,  369,  378,
      365,  375,  376,  380,  381,  382,  384,  385,  379,  388,
     1092,  378,  389,  383,  391,  390,  381,  382,  377,  373,
      387,  386,  372,  385,  374,  390,  383, 1089,  392,  394,
      388,  390,  375,  376,  380,  383,  397,  384,  393,  379,
      383,  391,  378,  389,  394,  387,  396,  381,  382,  398,
      411,  411,  412,  412,  385,  392,  390,  383,  416,  393,

      418,  388,  390,  393,  417,  420,  383,  419,  424,  426,
      421,  383,  391,  396,  425,  394,  387,  420,  440,  423,
      397,  416,  418,  397,  417,  427,  392,  426,  428,  424,
      393,  423,  419,  398,  393,  421,  398,  434,  431,  425,
      428,  433,  435,  432,  396,  440,  438, 1088,  420,  434,
      447,  427,  416,  418,  438,  417,  431,  433,  426,  436,
      424,  435,  423,  419,  432,  437,  421,  439, 1084,  442,
      425,  428,  445,  446,  443,  436,  440,  437,  447,  439,
      434,  442,  427,  443,  448,  438,  445,  431,  433,  452,
      451,  449,  435,  446,  454,  432, 1081, 1080, 1079,  450,

      443,  453,  459,  460,  454,  452,  436,  455,  437,  447,
      439,  464,  442,  456,  443,  451,  448,  445,  449,  450,
      457,  459,  453,  455,  446,  456,  460,  465,  462,  466,
      469,  443,  455,  464,  467,  454,  452,  468,  465,  470,
      471,  457,  776, 1076, 1073,  776,  451,  448,  462,  449,
      450,  466,  459,  453,  455,  467,  456,  460,  469,  472,
      468,  473,  475,  455,  464,  471,  470,  474,  476,  465,
      477,  472,  457,  473,  478,  482,  479, 1069,  474,  462,
      476,  477,  466,  475,  479,  483,  467,  484,  487,  469,
      486,  468,  489,  488,  491,  490,  471,  470,  482,  484,

      489,  478,  472,  492,  473,  496,  483,  490,  487,  474,
      494,  476,  477,  493,  475,  479,  502,  486,  488,  504,
      508,  505, 1068,  509,  496,  491,  609, 1067,  492,  482,
      484,  489,  478, 1065,  498,  494,  511,  483,  490,  487,
      493,  508,  510,  502,  515,  498,  504,  505,  486,  488,
      498,  509,  511,  498,  513,  496,  491,  517,  514,  492,
      515,  516,  513,  526,  518,  510,  494,  519,  609,  516,
      521,  493,  508,  514,  502,  519,  498,  504,  505,  520,
      524,  498,  509,  511,  498,  517,  522,  520,  525,  521,
      524,  515,  518,  513,  526,  530,  510,  528,  525,  531,

      516,  527,  522,  533,  514,  532,  519,  530,  528,  534,
      535,  531,  536,  532,  542,  538,  517,  544,  520,  540,
      521,  524,  527,  518,  537,  526,  535,  538,  533,  525,
      543,  540,  545,  522,  534,  547,  546,  552,  530,  528,
      536,  542,  531,  544,  532,  548,  549,  547,  545,  537,
      550,  551,  554,  527,  546,  543,  549,  535,  538,  533,
      553, 1064,  540,  557,  552,  534,  556,  551, 1063,  550,
      548,  536,  542,  554,  544,  557,  556,  560,  547,  545,
      537,  571,  555, 1060,  561,  546,  543,  549,  553,  564,
      560,  563,  572,  555,  576,  552,  558,  571,  551,  564,

      550,  548,  555,  561,  554,  565,  557,  556,  558,  567,
      563, 1059,  558,  569,  581,  573,  566,  572, 1058,  553,
      576,  560,  568,  569,  555,  566,  566,  573,  571,  577,
      564,  586,  565,  555,  561,  574,  567,  575,  568,  558,
      581,  563,  566,  558,  580,  577,  582,  574,  572,  575,
      568,  576,  580,  586,  569,  589,  566,  566,  573,  591,
      590,  587,  582,  565,  592,  593,  597,  567, 1055,  568,
      595,  581,  613,  566,  590,  594,  577,  589,  574,  593,
      575,  568,  587,  580,  586,  595,  591,  594,  596,  600,
      592,  602,  610,  582,  597,  611,  596,  612,  614,  618,

      613,  600,  616,  621, 1053,  590,  602,  620,  589, 1051,
      593,  619,  622,  587, 1050,  618,  595,  591,  594,  614,
      627,  592,  625,  619,  612,  597,  626,  596,  616,  630,
      610,  613,  600,  611,  620,  621,  628,  602,  622,  629,
      626,  627,  631,  630,  632,  625,  618,  643,  625,  634,
      614,  629,  631,  633,  619,  612,  636,  628,  637,  616,
      632,  634,  640,  643,  636,  620,  621,  639,  641,  622,
      637,  626,  627,  642,  630,  639,  625,  644,  633,  625,
      641,  640,  629,  631,  646,  642,  645,  647,  628,  649,
      650,  632,  634,  644,  643,  636,  648,  655, 1045,  660,

     1041,  637,  651,  652,  650,  649,  639,  653,  645,  633,
      646,  641,  640,  651,  647,  652,  642,  648,  654,  653,
      659,  656,  657,  655,  644,  660,  658,  661,  662, 1040,
     1037,  663,  659,  665,  654,  650,  649,  656,  657,  645,
      658,  646,  667,  666,  651,  647,  652,  670,  648,  674,
      653,  666,  672,  661,  655,  662,  660,  663,  677,  665,
      675,  676,  683,  659,  685,  654,  672,  667,  656,  657,
      677,  658,  674,  678,  670,  679,  675,  676,  684,  680,
      685,  694,  666,  686,  661,  687,  662,  688,  663,  683,
      665,  680,  686,  678,  693,  679,  687,  672,  667,  689,

      684,  677,  696,  674,  695,  670,  694,  675,  676,  688,
      698,  685,  703,  699,  689,  701, 1036,  697,  700,  702,
      683,  693,  680,  686,  678,  695,  679,  687,  696,  697,
      705,  684,  699,  706,  710,  701,  707,  694,  702,  703,
      688,  698,  708,  700,  709,  689,  710,  737,  706,  712,
      711,  713,  693,  705,  717,  707,  695,  719,  726,  696,
      697,  716, 1035,  699,  729, 1034,  701,  718,  737,  702,
      703,  708,  698,  709,  700,  711,  712,  710,  713,  706,
      716,  717,  719,  718,  705,  720,  707,  722,  724,  727,
      726,  729,  732,  728,  738,  734,  720,  736, 1028,  737,

      727,  724,  708,  722,  709,  728,  711,  712,  730,  713,
      720,  716,  717,  719,  718,  732,  733,  735,  740,  738,
      730,  726,  729,  734,  736,  735,  741,  720,  733,  739,
      743,  727,  724,  742,  722,  746,  728,  740,  741,  739,
      750,  720,  743,  746,  745,  747,  732,  748,  751,  742,
      738,  730,  749,  752,  734,  736,  735,  754,  756,  733,
      745,  755,  749,  748,  753,  747,  750,  752,  740,  741,
      739,  758,  759,  743,  746,  751,  753,  762,  749,  761,
      742,  755,  754,  759,  756,  769,  764,  765,  778,  766,
      771,  745,  758,  749,  748,  770,  747,  750,  752,  771,

      761,  766,  762,  770,  784,  780,  751,  753,  765,  749,
      772,  769,  755,  754,  759,  756,  764,  780,  772,  781,
      783,  788,  785,  758,  790,  784, 1026,  793,  789,  800,
      771,  761,  766,  762,  770,  794,  796,  788,  781,  765,
      797,  802,  769,  785,  798,  792,  783,  764,  780,  772,
      789,  801,  790,  792,  793,  800,  784,  792,  807,  808,
      802,  797,  794,  796,  804,  778,  809,  807,  788,  781,
      803,  798,  806,  810,  785,  804, 1023,  783,  801,  811,
      808,  789,  809,  790,  792,  793,  800,  812,  792,  811,
      816,  802,  797,  794,  796,  810,  812,  803,  807,  806,

      813,  816,  798,  818,  817,  823,  804,  822,  819,  801,
      820,  808,  826,  809,  817,  818,  813,  828,  822,  832,
      811,  823,  829,  830,  834, 1022,  810,  812,  803,  819,
      806,  820,  816,  838,  829,  833,  840,  828,  826,  836,
      844,  837,  847,  834,  832,  817,  818,  813,  833,  822,
      830,  836,  823,  837,  844,  841,  848, 1020,  847,  838,
      819,  850,  820, 1015,  840,  829,  841,  854,  828,  826,
      848,  852,  850,  849,  834,  832,  853,  855, 1013,  833,
      858,  830,  836,  854,  837,  844,  856,  857,  853,  847,
      838,  849,  858,  862,  860,  840,  856,  841,  859,  852,

      861,  848,  860,  850,  865,  855,  857,  872,  861,  866,
      859,  878,  871,  868,  854,  873,  875,  876,  862,  853,
      877,  866,  849,  858,  868,  880,  865,  856,  881,  883,
      852,  873,  882,  860,  872,  884,  855,  857,  871,  861,
      878,  859,  875,  889,  876,  884,  877,  881,  886,  862,
      880,  883,  866,  891,  887,  868,  896,  865,  882,  899,
      886,  892,  873,  894,  889,  872,  887,  891,  900,  871,
      902,  878,  906,  875,  899,  876,  884,  877,  881,  893,
      892,  880,  883,  896,  894,  904,  907,  893,  908,  882,
      909,  886,  912,  904,  900,  889,  916,  887,  891,  906,

      913,  914,  909,  920,  918,  899,  907,  902,  922,  908,
      917,  892,  918,  920,  896,  894,  923,  912,  893,  913,
      914,  917,  925,  928,  904,  900,  924,  927,  939,  933,
      906,  942,  923,  909,  929,  928,  939,  907,  940,  941,
      908,  922,  932,  918,  920,  937,  924,  938,  912,  925,
      913,  914,  917,  927,  932,  933,  929,  937,  942,  938,
      940,  944,  948,  923,  941,  943,  928,  939,  947,  949,
      951,  953,  922,  916,  958,  962,  948,  924,  952,  947,
      925,  954,  944,  953,  927,  932,  933,  929,  937,  942,
      938,  940,  954,  943,  952,  941,  949,  955,  960,  951,

      956,  957,  962,  969,  964,  970,  958,  948,  971,  955,
      947, 1009,  965,  944,  953,  969,  956,  957,  980,  960,
      964,  973,  977,  954,  943,  952,  972,  949,  993,  971,
      951,  970,  974,  962,  965,  978,  973,  958,  972,  984,
      955,  977,  990,  980,  974,  982,  969,  956,  957,  985,
      960,  964,  989,  993,  978,  987,  995,  982,  991,  997,
      971,  985,  970,  987,  989,  965,  994,  973,  990,  972,
      991,  984,  977,  998,  980,  974, 1001,  999,  994, 1000,
     1002, 1003,  995, 1005,  993,  978,  997,  999,  982, 1004,
     1001, 1005,  985, 1006,  987,  989, 1002, 1016, 1000,  990,

     1010,  991,  984, 1017, 1012, 1019, 1024, 1018, 1003,  994,
      998, 1010, 1025,  995, 1021, 1004, 1012,  997,  999, 1018,
     1006, 1001, 1005, 1027, 1016, 1033, 1019, 1002, 1017, 1000,
     1021, 1024, 1030, 1029, 1031, 1032, 1008, 1038, 1025, 1003,
     1042, 1039, 1010, 1046, 1044, 1043, 1004, 1012, 1027, 1038,
     1018, 1006, 1033, 1030, 1052, 1016, 1044, 1019, 1029, 1017,
     1032, 1021, 1024, 1039, 1047, 1042, 1031, 1043, 1048, 1025,
     1046, 1007, 1056, 1054, 1049, 1057, 1062, 1047, 1048, 1027,
     1038, 1052, 1061, 1033, 1030, 1054, 1070, 1044, 1066, 1029,
     1071, 1032, 1075, 1077, 1039, 1074, 1042, 1031, 1043, 1049,

     1056, 1046, 1062, 1057, 1072, 1074, 1086, 1061, 1047, 1048,
     1078, 1070, 1052, 1082, 1066, 1087, 1054, 1085, 1077, 1090,
     1083, 1091, 1078, 1072, 1093, 1082,  996, 1071, 1086, 1075,
     1049, 1056, 1083, 1062, 1057, 1098, 1074, 1096, 1061, 1094,
     1114, 1087, 1070, 1113, 1085, 1066, 1093, 1091, 1101, 1077,
     1099, 1090, 1103, 1078, 1072, 1094, 1082, 1106, 1096, 1086,
     1098, 1099, 1105, 1083, 1101, 1109, 1114, 1107, 1103, 1106,
     1115, 1112, 1087, 1105, 1117, 1085, 1111, 1093, 1091, 1107,
     1113, 1119, 1090, 1109, 1112, 1117, 1094, 1115, 1111, 1096,
     1121, 1098, 1099, 1116, 1125, 1101, 1128, 1114, 1126, 1103,

     1106, 1119, 1130, 1131, 1105, 1136, 1137, 1116, 1138, 1147,
     1107, 1121, 1128, 1140, 1109, 1112, 1117, 1143, 1115, 1111,
     1126, 1130, 1141, 1144, 1125, 1146, 1149, 1148, 1137, 1143,
     1131, 1136, 1119, 1138, 1153, 1140, 1147, 1150, 1116, 1148,
     1151, 1152, 1121, 1128,  992, 1163, 1146, 1165, 1141, 1144,
     1153, 1126, 1130, 1152, 1155, 1125, 1157, 1162, 1149, 1137,
     1143, 1131, 1136, 1158, 1138, 1150, 1140, 1147, 1151, 1161,
     1148, 1163, 1164, 1168, 1165, 1155, 1157, 1146, 1162, 1141,
     1144, 1153, 1166, 1169, 1152, 1170, 1175, 1173, 1161, 1149,
     1166, 1177, 1176, 1164, 1169, 1158, 1150, 1178, 1181, 1151,

     1168, 1179, 1163, 1183, 1184, 1165, 1155, 1157,  988, 1162,
     1173, 1176,  986, 1170,  983,  981,  979, 1177,  976, 1161,
     1181, 1166, 1178, 1175, 1164, 1169, 1158,  975, 1179,  968,
     1184, 1168,  967, 1183,  966,  963,  961,  959,  950,  946,
      945, 1173, 1176,  936, 1170,  935,  934,  931, 1177,  930,
      926, 1181,  921, 1178,  919,  911,  910,  905,  903, 1179,
      901, 1184,  898,  897, 1183, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1192, 1192, 1192, 1192,

     1192, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1196, 1196,  895, 1196, 1196,
     1196, 1196, 1196, 1197, 1197, 1197, 1197,  890, 1197, 1197,
     1197, 1198, 1198, 1198, 1198, 1198, 1198,  888, 1198, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200,  885, 1200,
     1200, 1200, 1200, 1200, 1200, 1201,  879, 1201, 1201, 1201,
     1201, 1201, 1201, 1202,  874, 1202, 1202, 1202, 1202, 1202,
     1202, 1203,  870, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
      869, 1204, 1204, 1204, 1204, 1204, 1204, 1205,  867, 1205,

     1205, 1205, 1205, 1205, 1205,  864,  863,  851,  846,  845,
      843,  842,  839,  835,  831,  827,  825,  824,  821,  815,
      814,  805,  799,  795,  791,  787,  786,  782,  779,  774,
      773,  768,  767,  763,  760,  757,  744,  731,  725,  723,
      721,  715,  714,  704,  692,  691,  690,  682,  681,  673,
      671,  669,  668,  664,  638,  635,  624,  623,  617,  615,
      607,  606,  601,  599,  598,  588,  585,  584,  583,  579,
      578,  570,  562,  559,  541,  539,  529,  523,  512,  507,
      506,  503,  501,  500,  499,  497,  481,  480,  463,  461,
      458,  444,  441,  430,  429,  405,  404,  403,  395,  368,

      355,  349,  348,  336,  324,  301,  247,  236,  231,  230,
      228,  202,  201,  200,  199,  195,  179,  149,  132,  128,
       93,   87,   86,   84,   80,   76,   68,   63,   59,   58,
       57,   56,   55,   53,   49,   20,   15,   12,    7, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[315] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Parser.l"
/* recognize tokens for the C++ SQL Parse */
#line 8 "Parser.l"
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

# include <stdarg.h>
# include <cstdlib>
#include <vector>
#include <string>


using namespace std;

//your files
#include "API/AosApi.h"
#include "Util/String.h"
#include "JQLParser/JQLParser.h"
#include "JQLParser/ParserInclude.h"
#include "Parser.tab.hh"

extern AosJQLParser gAosJQLParser;

//yang 2015-08-03
extern std::vector<std::string> gTokenBuf;
extern void getToken(const char* token);

// CHENDING
#undef YY_INPUT
#define YY_INPUT(b,r,s) AosJQLParser_ReadInput(b,&r,s)
#define YY_DECL int yylex(yy::Parser::semantic_type *yylval,yy::Parser::location_type *yylloc)

int yycolumn = 1;
//#define YY_USER_ACTION yylloc->columns (yyleng);
#define YY_USER_ACTION yylloc->begin.line = yylloc->end.line = yylineno; \
                       yylloc->begin.column = yycolumn; yylloc->end.column = yycolumn + yyleng - 1; \
					   yycolumn += yyleng;

typedef yy::Parser::token token;
const int MAX_LEN = 1000;

void yyerror(const char *s, ...);

int oldstate;
char *errMesg = new char[256];




#line 1741 "Parser.lex.cpp"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 58 "Parser.l"



	yylloc->step();



#line 1938 "Parser.lex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1187 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3540 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "Parser.l"
{ yylval->subtok = AosExprLogic::eAnd; getToken(yytext); return token::LOGIC; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "Parser.l"
{ yylval->subtok = AosExprLogic::eOr; getToken(yytext); return token::LOGIC; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 68 "Parser.l"
{ getToken(yytext);/*yang 2015-08-03*/ return token::ACCEPTED; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 69 "Parser.l"
{ getToken(yytext); return token::ACTION; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "Parser.l"
{ getToken(yytext); return token::ACTOR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 71 "Parser.l"
{ getToken(yytext); return token::ACCUMULATE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 72 "Parser.l"
{ getToken(yytext); return token::ADDRESS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "Parser.l"
{ getToken(yytext); return token::ALTER;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 74 "Parser.l"
{ getToken(yytext); return token::ALL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 75 "Parser.l"
{ getToken(yytext); return token::AT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 76 "Parser.l"
{ getToken(yytext); return token::AS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 77 "Parser.l"
{ getToken(yytext); return token::ASC; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 78 "Parser.l"
{ getToken(yytext); return token::AUTO_INCREMENT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 79 "Parser.l"
{ getToken(yytext); return token::BETWEEN;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 80 "Parser.l"
{ getToken(yytext); return token::BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 81 "Parser.l"
{ getToken(yytext); return token::BIGINT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 82 "Parser.l"
{ getToken(yytext); return token::BINARY; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 83 "Parser.l"
{ getToken(yytext); return token::BLOCKSIZE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 84 "Parser.l"
{ getToken(yytext); return token::BY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 85 "Parser.l"
{ getToken(yytext); return token::BYTE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 86 "Parser.l"
{ getToken(yytext); return token::BYTES; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 87 "Parser.l"
{ getToken(yytext); return token::CACHE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 88 "Parser.l"
{ getToken(yytext); return token::CASE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "Parser.l"
{ getToken(yytext); return token::COMBINE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 90 "Parser.l"
{ getToken(yytext); return token::CONTAIN;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 91 "Parser.l"
{ getToken(yytext); return token::CONVERT;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 92 "Parser.l"
{ getToken(yytext); return token::COMBINATIONS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 93 "Parser.l"
{ getToken(yytext); return token::CHECK;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 94 "Parser.l"
{ getToken(yytext); return token::CHECKSUM; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "Parser.l"
{ getToken(yytext); return token::CHAR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 96 "Parser.l"
{ getToken(yytext); return token::CODING;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 97 "Parser.l"
{ getToken(yytext); return token::CONNECTOR;}	
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 98 "Parser.l"
{ getToken(yytext); return token::CONNECTORS;}	
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 99 "Parser.l"
{ getToken(yytext); return token::CONFIG;}	
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 100 "Parser.l"
{ getToken(yytext); return token::COMMENTS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 101 "Parser.l"
{ getToken(yytext); return token::COMPLETE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 102 "Parser.l"
{ getToken(yytext); return token::CUBE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 103 "Parser.l"
{ getToken(yytext); return token::CSV; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 104 "Parser.l"
{ getToken(yytext); return token::CYCLE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 105 "Parser.l"
{ getToken(yytext); return token::CREATE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 106 "Parser.l"
{ getToken(yytext); return token::DATA; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 107 "Parser.l"
{ getToken(yytext); return token::DATASET; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 108 "Parser.l"
{ getToken(yytext); return token::DATASETS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 109 "Parser.l"
{ getToken(yytext); return token::DATABASE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 110 "Parser.l"
{ getToken(yytext); return token::DATABASES; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 111 "Parser.l"
{ getToken(yytext); return token::DATE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 112 "Parser.l"
{ getToken(yytext); return token::DEBUG; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 113 "Parser.l"
{ getToken(yytext); return token::DELAYED;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 114 "Parser.l"
{ getToken(yytext); return token::DELETE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 115 "Parser.l"
{ getToken(yytext); return token::DELIMITER;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "Parser.l"
{ getToken(yytext); return token::DEFAULT; } 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 117 "Parser.l"
{ getToken(yytext); return token::DESC; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 118 "Parser.l"
{ getToken(yytext); return token::DESCRIBE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 119 "Parser.l"
{ getToken(yytext); return token::DICTIONARY;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 120 "Parser.l"
{ getToken(yytext); return token::DIMENSIONS;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 121 "Parser.l"
{ getToken(yytext); return token::DIR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 122 "Parser.l"
{ getToken(yytext); return token::DIRECTORY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 123 "Parser.l"
{ getToken(yytext); return token::DISTINCT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 124 "Parser.l"
{ getToken(yytext); return token::DISTINCTROW; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 125 "Parser.l"
{ getToken(yytext); return token::DOC; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 126 "Parser.l"
{ getToken(yytext); return token::DOCBEGIN;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 127 "Parser.l"
{ getToken(yytext); return token::DOCEND;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 128 "Parser.l"
{ getToken(yytext); return token::DOES; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 129 "Parser.l"
{ getToken(yytext); return token::DOUBLE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 130 "Parser.l"
{ getToken(yytext); return token::DECIMAL; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 131 "Parser.l"
{ getToken(yytext); return token::DROP; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 132 "Parser.l"
{ getToken(yytext); return token::DROPPED; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 133 "Parser.l"
{ getToken(yytext); return token::DUAL; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 134 "Parser.l"
{ getToken(yytext); return token::DYNAMIC; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 135 "Parser.l"
{ getToken(yytext); return token::ELSE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 136 "Parser.l"
{ getToken(yytext); return token::ENCLOSED; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 137 "Parser.l"
{ getToken(yytext); return token::ENCODING; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 138 "Parser.l"
{ getToken(yytext); return token::END; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 139 "Parser.l"
{ getToken(yytext); return token::ENGING; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 140 "Parser.l"
{ getToken(yytext); return token::ESCAPED; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 141 "Parser.l"
{ getToken(yytext); return token::EXCLUSIVE; } 
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 142 "Parser.l"
{ getToken(yytext); return token::EXISTS; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 143 "Parser.l"
{ getToken(yytext); return token::EXPRESSION; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 144 "Parser.l"
{ getToken(yytext); return token::EXPORT;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 145 "Parser.l"
{ getToken(yytext); return token::FIELD;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 146 "Parser.l"
{ getToken(yytext); return token::FIELDS;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 147 "Parser.l"
{ getToken(yytext); return token::FILENAME; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 148 "Parser.l"
{ getToken(yytext); return token::FILTER; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 149 "Parser.l"
{ getToken(yytext); return token::FILTERED; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 150 "Parser.l"
{ getToken(yytext); return token::FIXED; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 151 "Parser.l"
{ getToken(yytext); return token::FLOAT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 152 "Parser.l"
{ getToken(yytext); return token::FROM; } 
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 153 "Parser.l"
{ getToken(yytext); return token::FORMATTER; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 154 "Parser.l"
{ getToken(yytext); return token::FORMAT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 155 "Parser.l"
{ getToken(yytext); return token::FULL; } 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 156 "Parser.l"
{ getToken(yytext); return token::GROUP; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 157 "Parser.l"
{ getToken(yytext); return token::HAVING;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 158 "Parser.l"
{ getToken(yytext); return token::HBASE;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 159 "Parser.l"
{ getToken(yytext); return token::HIGH_PRIORITY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 160 "Parser.l"
{ getToken(yytext); return token::JIMODB; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 161 "Parser.l"
{ getToken(yytext); return token::ID; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 162 "Parser.l"
{ getToken(yytext); return token::IDENTIFIED;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 163 "Parser.l"
{ getToken(yytext); return token::IDFAMILY; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 164 "Parser.l"
{ getToken(yytext); return token::IIL; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 165 "Parser.l"
{ getToken(yytext); return token::IILNAME;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 166 "Parser.l"
{ getToken(yytext); return token::IN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 167 "Parser.l"
{ getToken(yytext); return token::INCREMENT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 168 "Parser.l"
{ getToken(yytext); return token::INDEX; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 169 "Parser.l"
{ getToken(yytext); return token::INDEXES; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 170 "Parser.l"
{ getToken(yytext); return token::INNER; } 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 171 "Parser.l"
{ getToken(yytext); return token::INPUT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 172 "Parser.l"
{ getToken(yytext); return token::INT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 173 "Parser.l"
{ getToken(yytext); return token::INTO;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 174 "Parser.l"
{ getToken(yytext); return token::INTO_OUTFILE;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 175 "Parser.l"
{ getToken(yytext); return token::INVALID; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 176 "Parser.l"
{ getToken(yytext); return token::INSERT;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 177 "Parser.l"
{ getToken(yytext); return token::IGNORE;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 178 "Parser.l"
{ getToken(yytext); return token::IF;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 179 "Parser.l"
{ getToken(yytext); return token::IS;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 180 "Parser.l"
{ getToken(yytext); return token::JIMOID; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 181 "Parser.l"
{ getToken(yytext); return token::JIMOLOGIC; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 182 "Parser.l"
{ getToken(yytext); return token::CHECKPOINT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 183 "Parser.l"
{ getToken(yytext); return token::ENDPOINT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 184 "Parser.l"
{ getToken(yytext); return token::MATRIX; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 185 "Parser.l"
{ getToken(yytext); return token::RESULTS; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 186 "Parser.l"
{ getToken(yytext); return token::JAVA; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 187 "Parser.l"
{ getToken(yytext); return token::JOB; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 188 "Parser.l"
{ getToken(yytext); return token::JOBS; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 189 "Parser.l"
{ getToken(yytext); return token::JOIN; } 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 190 "Parser.l"
{ getToken(yytext); return token::KEY; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 191 "Parser.l"
{ getToken(yytext); return token::LEFT; } 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 192 "Parser.l"
{ getToken(yytext); return token::LENGTH;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 193 "Parser.l"
{ getToken(yytext); return token::LIMIT; } 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 194 "Parser.l"
{ getToken(yytext); return token::LIKE; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 195 "Parser.l"
{ getToken(yytext); return token::LINES ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 196 "Parser.l"
{ getToken(yytext); return token::LIST;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 197 "Parser.l"
{ getToken(yytext); return token::LOAD; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 198 "Parser.l"
{ getToken(yytext); return token::LOG; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 199 "Parser.l"
{ getToken(yytext); return token::LOGIN;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 200 "Parser.l"
{ getToken(yytext); return token::LOGOUT;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 201 "Parser.l"
{ getToken(yytext); return token::LOW_PRIORITY;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 202 "Parser.l"
{ getToken(yytext); return token::MAPPING; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 203 "Parser.l"
{ getToken(yytext); return token::MAPTASK; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 204 "Parser.l"
{ getToken(yytext); return token::MATCHED; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 205 "Parser.l"
{ getToken(yytext); return token::MAXVALUE; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 206 "Parser.l"
{ getToken(yytext); return token::MINVALUE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 207 "Parser.l"
{ getToken(yytext); return token::MAX; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 208 "Parser.l"
{ getToken(yytext); return token::MAP;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 209 "Parser.l"
{ getToken(yytext); return token::MAPS;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 210 "Parser.l"
{ getToken(yytext); return token::DISTRIBUTIONMAP;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 211 "Parser.l"
{ getToken(yytext); return token::DISTRIBUTIONMAPS;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 212 "Parser.l"
{ getToken(yytext); return token::MEASURES; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 213 "Parser.l"
{ getToken(yytext); return token::MEDIUMINT; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 214 "Parser.l"
{ getToken(yytext); return token::MISMATCHED; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 215 "Parser.l"
{ getToken(yytext); return token::MULTIPLE; } 
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 216 "Parser.l"
{ getToken(yytext); return token::MOD; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 217 "Parser.l"
{ getToken(yytext); return token::MODE; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 218 "Parser.l"
{ getToken(yytext); return token::MODEL; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 219 "Parser.l"
{ getToken(yytext); return token::NICK; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 220 "Parser.l"
{ getToken(yytext); return token::NOT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 221 "Parser.l"
{ getToken(yytext); return token::NOORDER; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 222 "Parser.l"
{ getToken(yytext); return token::NOMAXVALUE; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 223 "Parser.l"
{ getToken(yytext); return token::NOMINVALUE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 224 "Parser.l"
{ getToken(yytext); return token::NOCACHE; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 225 "Parser.l"
{ getToken(yytext); return token::NOCYCLE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 226 "Parser.l"
{ getToken(yytext); return token::NULLX; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 227 "Parser.l"
{ getToken(yytext); return token::NUMBER;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 228 "Parser.l"
{ getToken(yytext); return token::ON; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 229 "Parser.l"
{ getToken(yytext); return token::OFF; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 230 "Parser.l"
{ getToken(yytext); return token::OFFSET; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 231 "Parser.l"
{ getToken(yytext); return token::OPERATOR;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 232 "Parser.l"
{ getToken(yytext); return token::ORDER; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 233 "Parser.l"
{ getToken(yytext); return token::OUTER; } 
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 234 "Parser.l"
{ getToken(yytext); return token::OUTFILE; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 235 "Parser.l"
{ getToken(yytext); return token::OUTPUT; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 236 "Parser.l"
{ getToken(yytext); return token::OVERRIDE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 237 "Parser.l"
{ getToken(yytext); return token::PATH; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 238 "Parser.l"
{ getToken(yytext); return token::PARSER; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 239 "Parser.l"
{ getToken(yytext); return token::PICKED; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 240 "Parser.l"
{ getToken(yytext); return token::PICKER; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 241 "Parser.l"
{ getToken(yytext); return token::PICKERS; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 242 "Parser.l"
{ getToken(yytext); return token::PRINT; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 243 "Parser.l"
{ getToken(yytext); return token::PROC; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 244 "Parser.l"
{ getToken(yytext); return token::PROCS; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 245 "Parser.l"
{ getToken(yytext); return token::PRIORITY; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 246 "Parser.l"
{ getToken(yytext); return token::PORT;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 247 "Parser.l"
{ getToken(yytext); return token::POS; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 248 "Parser.l"
{ getToken(yytext); return token::QUICK;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 249 "Parser.l"
{ getToken(yytext); return token::QUALIFIER;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 250 "Parser.l"
{ getToken(yytext); return token::ROLLUP; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 251 "Parser.l"
{ getToken(yytext); return token::RAWKEY; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 252 "Parser.l"
{ getToken(yytext); return token::RECORD; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 253 "Parser.l"
{ getToken(yytext); return token::RECORDS; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 254 "Parser.l"
{ getToken(yytext); return token::REDUCE; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 255 "Parser.l"
{ getToken(yytext); return token::REDUCETASK; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 256 "Parser.l"
{ getToken(yytext); return token::RETRIEVE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 257 "Parser.l"
{ getToken(yytext); return token::RIGHT; } 
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 258 "Parser.l"
{ getToken(yytext); return token::ROW; } 
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 259 "Parser.l"
{ getToken(yytext); return token::RUN; } 
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 260 "Parser.l"
{ getToken(yytext); return token::SCANNER; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 261 "Parser.l"
{ getToken(yytext); return token::SCANNERS; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 262 "Parser.l"
{ getToken(yytext); return token::SCHEDULE; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 263 "Parser.l"
{ getToken(yytext); return token::SCHEMA; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 264 "Parser.l"
{ getToken(yytext); return token::SCHEMAS; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 265 "Parser.l"
{ getToken(yytext); return token::SET;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 266 "Parser.l"
{ getToken(yytext); return token::SELECT; } 
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 267 "Parser.l"
{ getToken(yytext); return token::SEQUENCE; } 
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 268 "Parser.l"
{ getToken(yytext); return token::SELECTOR; } 
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 269 "Parser.l"
{ getToken(yytext); return token::SELECTORS; } 
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 270 "Parser.l"
{ getToken(yytext); return token::SERVER; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 271 "Parser.l"
{ getToken(yytext); return token::SERVICE; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 272 "Parser.l"
{ getToken(yytext); return token::SERVICES; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 273 "Parser.l"
{ getToken(yytext); return token::SHOW; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 274 "Parser.l"
{ getToken(yytext); return token::SINGLE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 275 "Parser.l"
{ getToken(yytext); return token::SIZE; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 276 "Parser.l"
{ getToken(yytext); return token::SMALLINT; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 277 "Parser.l"
{ getToken(yytext); return token::SHUFFLE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 278 "Parser.l"
{ getToken(yytext); return token::SPLIT; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 279 "Parser.l"
{ getToken(yytext); return token::SOURCE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 280 "Parser.l"
{ getToken(yytext); return token::SQL_BIG_RESULT; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 281 "Parser.l"
{ getToken(yytext); return token::SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 282 "Parser.l"
{ getToken(yytext); return token::SQL_SMALL_RESULT; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 283 "Parser.l"
{ getToken(yytext); return token::START;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 284 "Parser.l"
{ getToken(yytext); return token::STARTING;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 285 "Parser.l"
{ getToken(yytext); return token::STAT;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 286 "Parser.l"
{ getToken(yytext); return token::STATUS;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 287 "Parser.l"
{ getToken(yytext); return token::STATIC;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 288 "Parser.l"
{ getToken(yytext); return token::STATISTICS; }	
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 289 "Parser.l"
{ getToken(yytext); return token::STINCT; }	
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 290 "Parser.l"
{ getToken(yytext); return token::STOP;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 291 "Parser.l"
{ getToken(yytext); return token::STRAIGHT_JOIN; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 292 "Parser.l"
{ getToken(yytext); return token::SUB; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 293 "Parser.l"
{ getToken(yytext); return token::SUPPRESS; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 294 "Parser.l"
{ getToken(yytext); return token::SYNCER; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 295 "Parser.l"
{ getToken(yytext); return token::TABLE; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 296 "Parser.l"
{ getToken(yytext); return token::TABLES; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 297 "Parser.l"
{ getToken(yytext); return token::TASK; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 298 "Parser.l"
{ getToken(yytext); return token::TASKS; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 299 "Parser.l"
{ getToken(yytext); return token::TEXT; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 300 "Parser.l"
{ getToken(yytext); return token::TERMINATED; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 301 "Parser.l"
{ getToken(yytext); return token::THEN;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 302 "Parser.l"
{ getToken(yytext); return token::TIME; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 303 "Parser.l"
{ getToken(yytext); return token::TIMES; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 304 "Parser.l"
{ getToken(yytext); return token::TINYINT; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 305 "Parser.l"
{ getToken(yytext); return token::THREAD;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 306 "Parser.l"
{ getToken(yytext); return token::TO; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 307 "Parser.l"
{ getToken(yytext); return token::TRIM; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 308 "Parser.l"
{ getToken(yytext); return token::TYPE; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 309 "Parser.l"
{ getToken(yytext); return token::UNIFORM; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 310 "Parser.l"
{ getToken(yytext); return token::UNIT; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 311 "Parser.l"
{ getToken(yytext); return token::UNION; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 312 "Parser.l"
{ getToken(yytext); return token::UNSIGNED; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 313 "Parser.l"
{ getToken(yytext); return token::UPDATE;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 314 "Parser.l"
{ getToken(yytext); return token::USE; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 315 "Parser.l"
{ getToken(yytext); return token::USING; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 316 "Parser.l"
{ getToken(yytext); return token::USER; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 317 "Parser.l"
{ getToken(yytext); return token::USERS; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 318 "Parser.l"
{ getToken(yytext); return token::VALUE; } 
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 319 "Parser.l"
{ getToken(yytext); return token::VALUES;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 320 "Parser.l"
{ getToken(yytext); return token::VARCHAR;}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 321 "Parser.l"
{ getToken(yytext); return token::VARCHAR2;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 322 "Parser.l"
{ getToken(yytext); return token::VARIABLE;}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 323 "Parser.l"
{ getToken(yytext); return token::VIRTUAL;}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 324 "Parser.l"
{ getToken(yytext); return token::WAIT;}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 325 "Parser.l"
{ getToken(yytext); return token::WHEN;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 326 "Parser.l"
{ getToken(yytext); return token::WHERE;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 327 "Parser.l"
{ getToken(yytext); return token::WITH;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 328 "Parser.l"
{ getToken(yytext); return token::XO; } 
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 329 "Parser.l"
{ getToken(yytext); return token::XOR; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 330 "Parser.l"
{ getToken(yytext); return token::XPATH;}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 331 "Parser.l"
{ getToken(yytext); return token::LEFT_BRACKET;}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 332 "Parser.l"
{ getToken(yytext); return token::RIGHT_BRACKET;}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 333 "Parser.l"
{ getToken(yytext); return token::SYSTEM_ARGS; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 335 "Parser.l"
{ getToken(yytext); return yytext[0]; }
	YY_BREAK
/* numbers */
case 270:
YY_RULE_SETUP
#line 338 "Parser.l"
{
		OmnString str = yytext;
		yylval->ll_value = str.parseInt64(0); 
		getToken(yytext);
		return token::INTNUM; 
} 
	YY_BREAK
case 271:
#line 346 "Parser.l"
case 272:
#line 347 "Parser.l"
case 273:
#line 348 "Parser.l"
case 274:
#line 349 "Parser.l"
case 275:
YY_RULE_SETUP
#line 349 "Parser.l"
{
		yylval->double_val = atof(yytext);
        getToken(yytext);
		return token::DOUBLE_NUM; 
}
	YY_BREAK
/* booleans */
case 276:
YY_RULE_SETUP
#line 357 "Parser.l"
{ cout<< "true" <<endl; yylval->ll_value = 1; return token::BOOL; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 358 "Parser.l"
{ yylval->ll_value = -1; return token::BOOL; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 359 "Parser.l"
{ yylval->ll_value = 0; return token::BOOL; }
	YY_BREAK
/* strings */
case 279:
#line 363 "Parser.l"
case 280:
YY_RULE_SETUP
#line 363 "Parser.l"
{ 
							u32 len = strlen(yytext);
							char *str = 0;
							str = strdup(&yytext[1]);
							str[len -2] = 0;
							yylval->strval = strdup(str);
							free(str);
							getToken(yytext);
							return token::STRING; 
						}
	YY_BREAK
case 281:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 374 "Parser.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 282:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 375 "Parser.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* NAME */
case 283:
YY_RULE_SETUP
#line 378 "Parser.l"
{ 
	 						/*
							size_t len = strlen(yytext);
							size_t i = 0;
							for (; i<len; i++) yytext[i] = tolower(yytext[i]);
							*/
	 						yylval->strval = strdup(yytext); 
							getToken(yytext);
							return token :: NAME;
							}
	YY_BREAK
/* name */
case 284:
YY_RULE_SETUP
#line 391 "Parser.l"
{ 
							size_t len = strlen(yytext);
							char *str = 0;
							str = strdup(&yytext[1]);
							str[len -2] = 0;
							/*
							size_t i = 0;
							for (; i<len-2; i++) str[i] = tolower(str[i]);
							*/
							yylval->strval = strdup(str);
							free(str);
							getToken(yytext);
							return token::NAME; 
						}
	YY_BREAK
case 285:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 406 "Parser.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 408 "Parser.l"
{ yylval->subtok = AosExprLogic::eAnd; getToken(yytext); return token::LOGIC; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 409 "Parser.l"
{ yylval->subtok = AosExprLogic::eOr; getToken(yytext); return token::LOGIC; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 410 "Parser.l"
{ yylval->subtok = AosExprComparison::eEqual;      getToken(yytext); return token::COMPARISON; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 411 "Parser.l"
{ yylval->subtok = AosExprComparison::eInvalid;        getToken(yytext); return token::COMPARISON; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 412 "Parser.l"
{ yylval->subtok = AosExprComparison::eLargerEqual; getToken(yytext); return token::COMPARISON; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 413 "Parser.l"
{ yylval->subtok = AosExprComparison::eLarger;      getToken(yytext); return token::COMPARISON; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 414 "Parser.l"
{ yylval->subtok = AosExprComparison::eLessEqual;   getToken(yytext); return token::COMPARISON; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 415 "Parser.l"
{ yylval->subtok = AosExprComparison::eLess;        getToken(yytext); return token::COMPARISON; }
	YY_BREAK
case 294:
#line 417 "Parser.l"
case 295:
YY_RULE_SETUP
#line 417 "Parser.l"
{ yylval->subtok = AosExprComparison::eNotEqual;    getToken(yytext); return token::COMPARISON; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 419 "Parser.l"
{ yylval->subtok = 1; getToken(yytext); return token::SHIFT; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 420 "Parser.l"
{ yylval->subtok = 2; getToken(yytext); return token::SHIFT; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 421 "Parser.l"
{ yylval->subtok = 2; getToken(yytext); return token::ASSIGNMENT; }
	YY_BREAK
/* XML DOC */
/* remove this token for now since it conflicts */
/*  with comparsion symbols <, > */
/* \<(.*+)\>+			{yylval->strval = strdup(yytext); */
/*							 return token::XMLDOC;} */
/* user variables */
case 299:
#line 432 "Parser.l"
case 300:
#line 433 "Parser.l"
case 301:
#line 434 "Parser.l"
case 302:
YY_RULE_SETUP
#line 434 "Parser.l"
{ yylval->strval = strdup(yytext+1);getToken(yytext); return token::USERVAR; }
	YY_BREAK
case 303:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 436 "Parser.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 304:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 437 "Parser.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 305:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 438 "Parser.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 441 "Parser.l"
{ yylloc->step(); }/* white space */
	YY_BREAK
case 307:
/* rule 307 can match eol */
#line 444 "Parser.l"
case 308:
/* rule 308 can match eol */
#line 445 "Parser.l"
case 309:
/* rule 309 can match eol */
#line 446 "Parser.l"
case 310:
/* rule 310 can match eol */
#line 447 "Parser.l"
case 311:
/* rule 311 can match eol */
#line 448 "Parser.l"
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 448 "Parser.l"
{ yylval->strval = strdup(yytext); return token :: U8VAR;}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 450 "Parser.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 451 "Parser.l"
ECHO;
	YY_BREAK
#line 3634 "Parser.lex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1187 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1187 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1186);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 451 "Parser.l"




int AosParseJQL(
		char * data, 
		const bool debug_flag)
{
	gAosJQLParser.finishParse(); 
	//cout << __FILE__ << ":" << __LINE__ << "Start parsing" << endl;
	gAosJQLParser.setContents(data);

	yy::Parser parser;  // create a SQL Parser
	if (debug_flag) parser.set_debug_level(1);
	
	//yang
	gTokenBuf.clear();
	yylex_destroy();
	//cout << "File Buff : " << data << endl;
	//cout << __FILE__ << ":" << __LINE__ << ": Befor parse" << endl;
	int v = parser.parse();  // and run it
	//cout << __FILE__ << ":" << __LINE__ << ": After parsing: " << v << endl;
	//gAosJQLParser.finishParse();

	return v;
}


void
emit(const char *s, ...)
{
	//extern yylineno;

	va_list ap;
	va_start(ap, s);

	printf("rpn: ");
	vfprintf(stdout, s, ap);
	printf("\n");
}


void
yyerror(const char *s, ...)
{
	//extern yylineno;

	va_list ap;
	va_start(ap, s);

	fprintf(stderr, "%d: error: ", 0);
	vfprintf(stderr, s, ap);
	fprintf(stderr, "\n");
	va_end(ap); // add by young
}

